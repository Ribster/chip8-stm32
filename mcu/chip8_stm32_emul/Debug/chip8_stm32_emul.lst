
chip8_stm32_emul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c8c  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 0000002f  08005e5c  08005e5c  00010154  2**0
                  CONTENTS, READONLY
  3 .data         00000154  20000000  080064b6  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001bb0  20000154  0800660a  00010154  2**2
                  ALLOC
  5 ._user_heap_stack 00000100  20001d04  080081ba  00010154  2**0
                  ALLOC
  6 .debug_abbrev 00002a17  00000000  00000000  00010183  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e8c7  00000000  00000000  00012b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000078cf  00000000  00000000  00021461  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 00662cae  00000000  00000000  00028d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007c4c  00000000  00000000  0068b9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000031b4  00000000  00000000  0069362a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000011ae  00000000  00000000  006967de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001550  00000000  00000000  00697990  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001380  00000000  00000000  00698ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000055df  00000000  00000000  0069a260  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000002a  00000000  00000000  0069f83f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004390  00000000  00000000  0069f86c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <memcpy>:
 80001d0:	2a03      	cmp	r2, #3
 80001d2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80001d6:	d809      	bhi.n	80001ec <memcpy+0x1c>
 80001d8:	b12a      	cbz	r2, 80001e6 <memcpy+0x16>
 80001da:	2300      	movs	r3, #0
 80001dc:	5ccc      	ldrb	r4, [r1, r3]
 80001de:	54c4      	strb	r4, [r0, r3]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d1fa      	bne.n	80001dc <memcpy+0xc>
 80001e6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80001ea:	4770      	bx	lr
 80001ec:	460b      	mov	r3, r1
 80001ee:	1882      	adds	r2, r0, r2
 80001f0:	4601      	mov	r1, r0
 80001f2:	e003      	b.n	80001fc <memcpy+0x2c>
 80001f4:	7824      	ldrb	r4, [r4, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	f801 4b01 	strb.w	r4, [r1], #1
 80001fc:	f011 0f03 	tst.w	r1, #3
 8000200:	461c      	mov	r4, r3
 8000202:	d1f7      	bne.n	80001f4 <memcpy+0x24>
 8000204:	f013 0503 	ands.w	r5, r3, #3
 8000208:	d05d      	beq.n	80002c6 <memcpy+0xf6>
 800020a:	426e      	negs	r6, r5
 800020c:	f1c5 0c04 	rsb	ip, r5, #4
 8000210:	00ed      	lsls	r5, r5, #3
 8000212:	599b      	ldr	r3, [r3, r6]
 8000214:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000218:	e008      	b.n	800022c <memcpy+0x5c>
 800021a:	3404      	adds	r4, #4
 800021c:	59a7      	ldr	r7, [r4, r6]
 800021e:	463b      	mov	r3, r7
 8000220:	fa07 f70c 	lsl.w	r7, r7, ip
 8000224:	ea48 0707 	orr.w	r7, r8, r7
 8000228:	f841 7b04 	str.w	r7, [r1], #4
 800022c:	1a57      	subs	r7, r2, r1
 800022e:	fa23 f805 	lsr.w	r8, r3, r5
 8000232:	2f03      	cmp	r7, #3
 8000234:	dcf1      	bgt.n	800021a <memcpy+0x4a>
 8000236:	e003      	b.n	8000240 <memcpy+0x70>
 8000238:	f814 3b01 	ldrb.w	r3, [r4], #1
 800023c:	f801 3b01 	strb.w	r3, [r1], #1
 8000240:	428a      	cmp	r2, r1
 8000242:	d8f9      	bhi.n	8000238 <memcpy+0x68>
 8000244:	e7cf      	b.n	80001e6 <memcpy+0x16>
 8000246:	f853 4c40 	ldr.w	r4, [r3, #-64]
 800024a:	f841 4c40 	str.w	r4, [r1, #-64]
 800024e:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 8000252:	f841 4c3c 	str.w	r4, [r1, #-60]
 8000256:	f853 4c38 	ldr.w	r4, [r3, #-56]
 800025a:	f841 4c38 	str.w	r4, [r1, #-56]
 800025e:	f853 4c34 	ldr.w	r4, [r3, #-52]
 8000262:	f841 4c34 	str.w	r4, [r1, #-52]
 8000266:	f853 4c30 	ldr.w	r4, [r3, #-48]
 800026a:	f841 4c30 	str.w	r4, [r1, #-48]
 800026e:	f853 4c2c 	ldr.w	r4, [r3, #-44]
 8000272:	f841 4c2c 	str.w	r4, [r1, #-44]
 8000276:	f853 4c28 	ldr.w	r4, [r3, #-40]
 800027a:	f841 4c28 	str.w	r4, [r1, #-40]
 800027e:	f853 4c24 	ldr.w	r4, [r3, #-36]
 8000282:	f841 4c24 	str.w	r4, [r1, #-36]
 8000286:	f853 4c20 	ldr.w	r4, [r3, #-32]
 800028a:	f841 4c20 	str.w	r4, [r1, #-32]
 800028e:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 8000292:	f841 4c1c 	str.w	r4, [r1, #-28]
 8000296:	f853 4c18 	ldr.w	r4, [r3, #-24]
 800029a:	f841 4c18 	str.w	r4, [r1, #-24]
 800029e:	f853 4c14 	ldr.w	r4, [r3, #-20]
 80002a2:	f841 4c14 	str.w	r4, [r1, #-20]
 80002a6:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80002aa:	f841 4c10 	str.w	r4, [r1, #-16]
 80002ae:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80002b2:	f841 4c0c 	str.w	r4, [r1, #-12]
 80002b6:	f853 4c08 	ldr.w	r4, [r3, #-8]
 80002ba:	f841 4c08 	str.w	r4, [r1, #-8]
 80002be:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80002c2:	f841 4c04 	str.w	r4, [r1, #-4]
 80002c6:	1a56      	subs	r6, r2, r1
 80002c8:	461d      	mov	r5, r3
 80002ca:	460c      	mov	r4, r1
 80002cc:	3340      	adds	r3, #64	; 0x40
 80002ce:	3140      	adds	r1, #64	; 0x40
 80002d0:	2e3f      	cmp	r6, #63	; 0x3f
 80002d2:	dcb8      	bgt.n	8000246 <memcpy+0x76>
 80002d4:	462b      	mov	r3, r5
 80002d6:	e00f      	b.n	80002f8 <memcpy+0x128>
 80002d8:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80002dc:	f844 1c10 	str.w	r1, [r4, #-16]
 80002e0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80002e4:	f844 1c0c 	str.w	r1, [r4, #-12]
 80002e8:	f853 1c08 	ldr.w	r1, [r3, #-8]
 80002ec:	f844 1c08 	str.w	r1, [r4, #-8]
 80002f0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80002f4:	f844 1c04 	str.w	r1, [r4, #-4]
 80002f8:	1b16      	subs	r6, r2, r4
 80002fa:	4621      	mov	r1, r4
 80002fc:	461d      	mov	r5, r3
 80002fe:	3410      	adds	r4, #16
 8000300:	3310      	adds	r3, #16
 8000302:	2e0f      	cmp	r6, #15
 8000304:	dce8      	bgt.n	80002d8 <memcpy+0x108>
 8000306:	462b      	mov	r3, r5
 8000308:	e002      	b.n	8000310 <memcpy+0x140>
 800030a:	6824      	ldr	r4, [r4, #0]
 800030c:	f841 4b04 	str.w	r4, [r1], #4
 8000310:	1a55      	subs	r5, r2, r1
 8000312:	461c      	mov	r4, r3
 8000314:	2d03      	cmp	r5, #3
 8000316:	f103 0304 	add.w	r3, r3, #4
 800031a:	dcf6      	bgt.n	800030a <memcpy+0x13a>
 800031c:	e790      	b.n	8000240 <memcpy+0x70>
 800031e:	bf00      	nop

08000320 <memset>:
 8000320:	2a03      	cmp	r2, #3
 8000322:	b2c9      	uxtb	r1, r1
 8000324:	b470      	push	{r4, r5, r6}
 8000326:	d808      	bhi.n	800033a <memset+0x1a>
 8000328:	b12a      	cbz	r2, 8000336 <memset+0x16>
 800032a:	4603      	mov	r3, r0
 800032c:	1812      	adds	r2, r2, r0
 800032e:	f803 1b01 	strb.w	r1, [r3], #1
 8000332:	4293      	cmp	r3, r2
 8000334:	d1fb      	bne.n	800032e <memset+0xe>
 8000336:	bc70      	pop	{r4, r5, r6}
 8000338:	4770      	bx	lr
 800033a:	1882      	adds	r2, r0, r2
 800033c:	4604      	mov	r4, r0
 800033e:	e001      	b.n	8000344 <memset+0x24>
 8000340:	f804 1b01 	strb.w	r1, [r4], #1
 8000344:	f014 0f03 	tst.w	r4, #3
 8000348:	d1fa      	bne.n	8000340 <memset+0x20>
 800034a:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800034e:	fb03 f301 	mul.w	r3, r3, r1
 8000352:	e01f      	b.n	8000394 <memset+0x74>
 8000354:	f844 3c40 	str.w	r3, [r4, #-64]
 8000358:	f844 3c3c 	str.w	r3, [r4, #-60]
 800035c:	f844 3c38 	str.w	r3, [r4, #-56]
 8000360:	f844 3c34 	str.w	r3, [r4, #-52]
 8000364:	f844 3c30 	str.w	r3, [r4, #-48]
 8000368:	f844 3c2c 	str.w	r3, [r4, #-44]
 800036c:	f844 3c28 	str.w	r3, [r4, #-40]
 8000370:	f844 3c24 	str.w	r3, [r4, #-36]
 8000374:	f844 3c20 	str.w	r3, [r4, #-32]
 8000378:	f844 3c1c 	str.w	r3, [r4, #-28]
 800037c:	f844 3c18 	str.w	r3, [r4, #-24]
 8000380:	f844 3c14 	str.w	r3, [r4, #-20]
 8000384:	f844 3c10 	str.w	r3, [r4, #-16]
 8000388:	f844 3c0c 	str.w	r3, [r4, #-12]
 800038c:	f844 3c08 	str.w	r3, [r4, #-8]
 8000390:	f844 3c04 	str.w	r3, [r4, #-4]
 8000394:	1b16      	subs	r6, r2, r4
 8000396:	4625      	mov	r5, r4
 8000398:	3440      	adds	r4, #64	; 0x40
 800039a:	2e3f      	cmp	r6, #63	; 0x3f
 800039c:	dcda      	bgt.n	8000354 <memset+0x34>
 800039e:	462c      	mov	r4, r5
 80003a0:	e007      	b.n	80003b2 <memset+0x92>
 80003a2:	f844 3c10 	str.w	r3, [r4, #-16]
 80003a6:	f844 3c0c 	str.w	r3, [r4, #-12]
 80003aa:	f844 3c08 	str.w	r3, [r4, #-8]
 80003ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80003b2:	1b16      	subs	r6, r2, r4
 80003b4:	4625      	mov	r5, r4
 80003b6:	3410      	adds	r4, #16
 80003b8:	2e0f      	cmp	r6, #15
 80003ba:	dcf2      	bgt.n	80003a2 <memset+0x82>
 80003bc:	e001      	b.n	80003c2 <memset+0xa2>
 80003be:	f845 3b04 	str.w	r3, [r5], #4
 80003c2:	1b54      	subs	r4, r2, r5
 80003c4:	2c03      	cmp	r4, #3
 80003c6:	dcfa      	bgt.n	80003be <memset+0x9e>
 80003c8:	e001      	b.n	80003ce <memset+0xae>
 80003ca:	f805 1b01 	strb.w	r1, [r5], #1
 80003ce:	4295      	cmp	r5, r2
 80003d0:	d3fb      	bcc.n	80003ca <memset+0xaa>
 80003d2:	e7b0      	b.n	8000336 <memset+0x16>

080003d4 <strlen>:
 80003d4:	f020 0103 	bic.w	r1, r0, #3
 80003d8:	f010 0003 	ands.w	r0, r0, #3
 80003dc:	f1c0 0000 	rsb	r0, r0, #0
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f100 0c04 	add.w	ip, r0, #4
 80003e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80003ec:	f06f 0200 	mvn.w	r2, #0
 80003f0:	bf1c      	itt	ne
 80003f2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80003f6:	4313      	orrne	r3, r2
 80003f8:	f04f 0c01 	mov.w	ip, #1
 80003fc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8000400:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8000404:	eba3 020c 	sub.w	r2, r3, ip
 8000408:	ea22 0203 	bic.w	r2, r2, r3
 800040c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8000410:	bf04      	itt	eq
 8000412:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000416:	3004      	addeq	r0, #4
 8000418:	d0f4      	beq.n	8000404 <strlen+0x30>
 800041a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800041e:	bf1f      	itttt	ne
 8000420:	3001      	addne	r0, #1
 8000422:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8000426:	3001      	addne	r0, #1
 8000428:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800042c:	bf18      	it	ne
 800042e:	3001      	addne	r0, #1
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop

08000434 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <NVIC_EnableIRQ+0x30>)
 8000440:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000444:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000448:	79f9      	ldrb	r1, [r7, #7]
 800044a:	f001 011f 	and.w	r1, r1, #31
 800044e:	f04f 0001 	mov.w	r0, #1
 8000452:	fa00 f101 	lsl.w	r1, r0, r1
 8000456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800045a:	f107 070c 	add.w	r7, r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	e000e100 	.word	0xe000e100

08000468 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	da0d      	bge.n	8000498 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 800047c:	490e      	ldr	r1, [pc, #56]	; (80004b8 <NVIC_SetPriority+0x50>)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	f1a3 0304 	sub.w	r3, r3, #4
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	18cb      	adds	r3, r1, r3
 8000494:	761a      	strb	r2, [r3, #24]
 8000496:	e00a      	b.n	80004ae <NVIC_SetPriority+0x46>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000498:	4908      	ldr	r1, [pc, #32]	; (80004bc <NVIC_SetPriority+0x54>)
 800049a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049e:	683a      	ldr	r2, [r7, #0]
 80004a0:	b2d2      	uxtb	r2, r2
 80004a2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	18cb      	adds	r3, r1, r3
 80004aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004ae:	f107 070c 	add.w	r7, r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d902      	bls.n	80004d8 <SysTick_Config+0x18>
 80004d2:	f04f 0301 	mov.w	r3, #1
 80004d6:	e016      	b.n	8000506 <SysTick_Config+0x46>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <SysTick_Config+0x50>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80004e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80004e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80004e6:	f04f 30ff 	mov.w	r0, #4294967295
 80004ea:	f04f 010f 	mov.w	r1, #15
 80004ee:	f7ff ffbb 	bl	8000468 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <SysTick_Config+0x50>)
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <SysTick_Config+0x50>)
 80004fc:	f04f 0207 	mov.w	r2, #7
 8000500:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000502:	f04f 0300 	mov.w	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	f107 0708 	add.w	r7, r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	e000e010 	.word	0xe000e010

08000514 <EnableExti>:
volatile uint8_t btn_old_state[10];
volatile uint8_t btn_state[10];


void EnableExti(uint32_t line)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	EXTI_InitStructure.EXTI_Line = line;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <EnableExti+0x34>)
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <EnableExti+0x34>)
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	711a      	strb	r2, [r3, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <EnableExti+0x34>)
 800052c:	f04f 020c 	mov.w	r2, #12
 8000530:	715a      	strb	r2, [r3, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <EnableExti+0x34>)
 8000534:	f04f 0201 	mov.w	r2, #1
 8000538:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStructure);
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <EnableExti+0x34>)
 800053c:	f001 fcba 	bl	8001eb4 <EXTI_Init>
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);*/

}
 8000540:	f107 0708 	add.w	r7, r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200004a4 	.word	0x200004a4

0800054c <initButtons>:

void initButtons(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 8000550:	4855      	ldr	r0, [pc, #340]	; (80006a8 <initButtons+0x15c>)
 8000552:	f04f 0101 	mov.w	r1, #1
 8000556:	f001 fe7d 	bl	8002254 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 800055a:	4854      	ldr	r0, [pc, #336]	; (80006ac <initButtons+0x160>)
 800055c:	f04f 0101 	mov.w	r1, #1
 8000560:	f001 fe78 	bl	8002254 <GPIO_PinRemapConfig>


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8000564:	4b52      	ldr	r3, [pc, #328]	; (80006b0 <initButtons+0x164>)
 8000566:	f04f 0248 	mov.w	r2, #72	; 0x48
 800056a:	70da      	strb	r2, [r3, #3]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800056c:	4b50      	ldr	r3, [pc, #320]	; (80006b0 <initButtons+0x164>)
 800056e:	f04f 02f8 	mov.w	r2, #248	; 0xf8
 8000572:	801a      	strh	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000574:	4b4e      	ldr	r3, [pc, #312]	; (80006b0 <initButtons+0x164>)
 8000576:	f04f 0202 	mov.w	r2, #2
 800057a:	709a      	strb	r2, [r3, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800057c:	484d      	ldr	r0, [pc, #308]	; (80006b4 <initButtons+0x168>)
 800057e:	494c      	ldr	r1, [pc, #304]	; (80006b0 <initButtons+0x164>)
 8000580:	f001 fd4e 	bl	8002020 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000584:	4b4a      	ldr	r3, [pc, #296]	; (80006b0 <initButtons+0x164>)
 8000586:	f04f 0204 	mov.w	r2, #4
 800058a:	801a      	strh	r2, [r3, #0]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 800058c:	484a      	ldr	r0, [pc, #296]	; (80006b8 <initButtons+0x16c>)
 800058e:	4948      	ldr	r1, [pc, #288]	; (80006b0 <initButtons+0x164>)
 8000590:	f001 fd46 	bl	8002020 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_11 | GPIO_Pin_12;
 8000594:	4b46      	ldr	r3, [pc, #280]	; (80006b0 <initButtons+0x164>)
 8000596:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800059a:	801a      	strh	r2, [r3, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800059c:	4847      	ldr	r0, [pc, #284]	; (80006bc <initButtons+0x170>)
 800059e:	4944      	ldr	r1, [pc, #272]	; (80006b0 <initButtons+0x164>)
 80005a0:	f001 fd3e 	bl	8002020 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80005a4:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <initButtons+0x164>)
 80005a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005aa:	801a      	strh	r2, [r3, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005ac:	4844      	ldr	r0, [pc, #272]	; (80006c0 <initButtons+0x174>)
 80005ae:	4940      	ldr	r1, [pc, #256]	; (80006b0 <initButtons+0x164>)
 80005b0:	f001 fd36 	bl	8002020 <GPIO_Init>

	//Button b1,b2,b3,b5,b6
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource3);
 80005b4:	f04f 0001 	mov.w	r0, #1
 80005b8:	f04f 0103 	mov.w	r1, #3
 80005bc:	f001 fecc 	bl	8002358 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource4);
 80005c0:	f04f 0001 	mov.w	r0, #1
 80005c4:	f04f 0104 	mov.w	r1, #4
 80005c8:	f001 fec6 	bl	8002358 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource5);
 80005cc:	f04f 0001 	mov.w	r0, #1
 80005d0:	f04f 0105 	mov.w	r1, #5
 80005d4:	f001 fec0 	bl	8002358 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource6);
 80005d8:	f04f 0001 	mov.w	r0, #1
 80005dc:	f04f 0106 	mov.w	r1, #6
 80005e0:	f001 feba 	bl	8002358 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource7);
 80005e4:	f04f 0001 	mov.w	r0, #1
 80005e8:	f04f 0107 	mov.w	r1, #7
 80005ec:	f001 feb4 	bl	8002358 <GPIO_EXTILineConfig>
	//Button b4
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource2);
 80005f0:	f04f 0003 	mov.w	r0, #3
 80005f4:	f04f 0102 	mov.w	r1, #2
 80005f8:	f001 feae 	bl	8002358 <GPIO_EXTILineConfig>

	//Button down, left, up
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource8);
 80005fc:	f04f 0000 	mov.w	r0, #0
 8000600:	f04f 0108 	mov.w	r1, #8
 8000604:	f001 fea8 	bl	8002358 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource11);
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	f04f 010b 	mov.w	r1, #11
 8000610:	f001 fea2 	bl	8002358 <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource12);
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	f04f 010c 	mov.w	r1, #12
 800061c:	f001 fe9c 	bl	8002358 <GPIO_EXTILineConfig>
	//button right
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource9);
 8000620:	f04f 0002 	mov.w	r0, #2
 8000624:	f04f 0109 	mov.w	r1, #9
 8000628:	f001 fe96 	bl	8002358 <GPIO_EXTILineConfig>

	EnableExti(EXTI_Line2);
 800062c:	f04f 0004 	mov.w	r0, #4
 8000630:	f7ff ff70 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line3);
 8000634:	f04f 0008 	mov.w	r0, #8
 8000638:	f7ff ff6c 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line4);
 800063c:	f04f 0010 	mov.w	r0, #16
 8000640:	f7ff ff68 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line5);
 8000644:	f04f 0020 	mov.w	r0, #32
 8000648:	f7ff ff64 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line6);
 800064c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000650:	f7ff ff60 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line7);
 8000654:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000658:	f7ff ff5c 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line8);
 800065c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000660:	f7ff ff58 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line9);
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f7ff ff54 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line11);
 800066c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000670:	f7ff ff50 	bl	8000514 <EnableExti>
	EnableExti(EXTI_Line12);
 8000674:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000678:	f7ff ff4c 	bl	8000514 <EnableExti>

	NVIC_EnableIRQ(EXTI2_IRQn);
 800067c:	f04f 0008 	mov.w	r0, #8
 8000680:	f7ff fed8 	bl	8000434 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8000684:	f04f 0009 	mov.w	r0, #9
 8000688:	f7ff fed4 	bl	8000434 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 800068c:	f04f 000a 	mov.w	r0, #10
 8000690:	f7ff fed0 	bl	8000434 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000694:	f04f 0017 	mov.w	r0, #23
 8000698:	f7ff fecc 	bl	8000434 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800069c:	f04f 0028 	mov.w	r0, #40	; 0x28
 80006a0:	f7ff fec8 	bl	8000434 <NVIC_EnableIRQ>

	//EnableIRQ(EXTI2_IRQn, EXTI_Line2);
}
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	00300100 	.word	0x00300100
 80006ac:	00300200 	.word	0x00300200
 80006b0:	20000488 	.word	0x20000488
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	40011400 	.word	0x40011400
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40011000 	.word	0x40011000

080006c4 <main>:

void main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
	  SysTick_Config(SystemCoreClock /1000);
 80006ca:	4b91      	ldr	r3, [pc, #580]	; (8000910 <main+0x24c>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b91      	ldr	r3, [pc, #580]	; (8000914 <main+0x250>)
 80006d0:	fba3 1302 	umull	r1, r3, r3, r2
 80006d4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fef1 	bl	80004c0 <SysTick_Config>

	  /* Включаем тактирование порта C */
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC |
 80006de:	f04f 003d 	mov.w	r0, #61	; 0x3d
 80006e2:	f04f 0101 	mov.w	r1, #1
 80006e6:	f001 fe85 	bl	80023f4 <RCC_APB2PeriphClockCmd>
			  	  	  	  	 RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOB |
			  	  	  	  	 RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);

	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 , ENABLE);
 80006ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006ee:	f04f 0101 	mov.w	r1, #1
 80006f2:	f001 fea1 	bl	8002438 <RCC_APB1PeriphClockCmd>


	  initButtons();
 80006f6:	f7ff ff29 	bl	800054c <initButtons>


	  /* Init usart spi */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_4;
 80006fa:	4b87      	ldr	r3, [pc, #540]	; (8000918 <main+0x254>)
 80006fc:	f04f 0214 	mov.w	r2, #20
 8000700:	801a      	strh	r2, [r3, #0]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000702:	4b85      	ldr	r3, [pc, #532]	; (8000918 <main+0x254>)
 8000704:	f04f 0210 	mov.w	r2, #16
 8000708:	70da      	strb	r2, [r3, #3]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800070a:	4b83      	ldr	r3, [pc, #524]	; (8000918 <main+0x254>)
 800070c:	f04f 0201 	mov.w	r2, #1
 8000710:	709a      	strb	r2, [r3, #2]

	  GPIO_Init( GPIOA , &GPIO_InitStructure);
 8000712:	4882      	ldr	r0, [pc, #520]	; (800091c <main+0x258>)
 8000714:	4980      	ldr	r1, [pc, #512]	; (8000918 <main+0x254>)
 8000716:	f001 fc83 	bl	8002020 <GPIO_Init>
	  USART_ClockInitStruct.USART_LastBit = USART_LastBit_Enable;
	  USART_ClockInit(USART2, &USART_ClockInitStruct);*/


	  /* Init lcd led control pin */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800071a:	4b7f      	ldr	r3, [pc, #508]	; (8000918 <main+0x254>)
 800071c:	f04f 0210 	mov.w	r2, #16
 8000720:	70da      	strb	r2, [r3, #3]
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8000722:	4b7d      	ldr	r3, [pc, #500]	; (8000918 <main+0x254>)
 8000724:	f04f 0201 	mov.w	r2, #1
 8000728:	801a      	strh	r2, [r3, #0]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800072a:	4b7b      	ldr	r3, [pc, #492]	; (8000918 <main+0x254>)
 800072c:	f04f 0202 	mov.w	r2, #2
 8000730:	709a      	strb	r2, [r3, #2]
	  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000732:	487b      	ldr	r0, [pc, #492]	; (8000920 <main+0x25c>)
 8000734:	4978      	ldr	r1, [pc, #480]	; (8000918 <main+0x254>)
 8000736:	f001 fc73 	bl	8002020 <GPIO_Init>


	  /* Init lcd controll CS signal */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800073a:	4b77      	ldr	r3, [pc, #476]	; (8000918 <main+0x254>)
 800073c:	f04f 0210 	mov.w	r2, #16
 8000740:	70da      	strb	r2, [r3, #3]
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8000742:	4b75      	ldr	r3, [pc, #468]	; (8000918 <main+0x254>)
 8000744:	f04f 0202 	mov.w	r2, #2
 8000748:	801a      	strh	r2, [r3, #0]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800074a:	4b73      	ldr	r3, [pc, #460]	; (8000918 <main+0x254>)
 800074c:	f04f 0202 	mov.w	r2, #2
 8000750:	709a      	strb	r2, [r3, #2]
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000752:	4872      	ldr	r0, [pc, #456]	; (800091c <main+0x258>)
 8000754:	4970      	ldr	r1, [pc, #448]	; (8000918 <main+0x254>)
 8000756:	f001 fc63 	bl	8002020 <GPIO_Init>


	  /* Устанавливаем единички на выводах 8 и 9 */
	  GPIO_SetBits(GPIOC, GPIO_Pin_0);
 800075a:	4871      	ldr	r0, [pc, #452]	; (8000920 <main+0x25c>)
 800075c:	f04f 0101 	mov.w	r1, #1
 8000760:	f001 fd5c 	bl	800221c <GPIO_SetBits>


	  uint8_t i;
	  for (i=0;i<10;i++) {
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	e00e      	b.n	800078a <main+0xc6>
			btn_old_state[i] = btn_state[i] = 0;
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	496c      	ldr	r1, [pc, #432]	; (8000924 <main+0x260>)
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	54c8      	strb	r0, [r1, r3]
 8000778:	496a      	ldr	r1, [pc, #424]	; (8000924 <main+0x260>)
 800077a:	5ccb      	ldrb	r3, [r1, r3]
 800077c:	b2d9      	uxtb	r1, r3
 800077e:	4b6a      	ldr	r3, [pc, #424]	; (8000928 <main+0x264>)
 8000780:	5499      	strb	r1, [r3, r2]
	  /* Устанавливаем единички на выводах 8 и 9 */
	  GPIO_SetBits(GPIOC, GPIO_Pin_0);


	  uint8_t i;
	  for (i=0;i<10;i++) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f103 0301 	add.w	r3, r3, #1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b09      	cmp	r3, #9
 800078e:	d9ed      	bls.n	800076c <main+0xa8>
			btn_old_state[i] = btn_state[i] = 0;
	  }

	  press=1;
 8000790:	4b66      	ldr	r3, [pc, #408]	; (800092c <main+0x268>)
 8000792:	f04f 0201 	mov.w	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
	  current=1;
 8000798:	4b65      	ldr	r3, [pc, #404]	; (8000930 <main+0x26c>)
 800079a:	f04f 0201 	mov.w	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
	  select_b=0;
 80007a0:	4b64      	ldr	r3, [pc, #400]	; (8000934 <main+0x270>)
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]


	  disp_string = test;
 80007a8:	4b63      	ldr	r3, [pc, #396]	; (8000938 <main+0x274>)
 80007aa:	4a64      	ldr	r2, [pc, #400]	; (800093c <main+0x278>)
 80007ac:	601a      	str	r2, [r3, #0]
	  update_lcd = 1;
 80007ae:	4b64      	ldr	r3, [pc, #400]	; (8000940 <main+0x27c>)
 80007b0:	f04f 0201 	mov.w	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]

	  /*-----------------*/
	  	lcd_init();
 80007b6:	f000 fabd 	bl	8000d34 <lcd_init>
	  	//lcd_segment_direction(1);
	  	lcd_column_direction(1);
 80007ba:	f04f 0001 	mov.w	r0, #1
 80007be:	f000 fb3b 	bl	8000e38 <lcd_column_direction>
	  	//lcd_flags.inverse_char = -1;
	  	lcd_image(0, 0, 8, 96, CHIP8);
 80007c2:	4b60      	ldr	r3, [pc, #384]	; (8000944 <main+0x280>)
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	f04f 0000 	mov.w	r0, #0
 80007ca:	f04f 0100 	mov.w	r1, #0
 80007ce:	f04f 0208 	mov.w	r2, #8
 80007d2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80007d6:	f000 fc7d 	bl	80010d4 <lcd_image>
	  	delay_ms(1000);
 80007da:	4b5b      	ldr	r3, [pc, #364]	; (8000948 <main+0x284>)
 80007dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e0:	4798      	blx	r3
	  	//do __NOP(); while (1); // зависаем
	  	lcd_clr();
 80007e2:	f000 faf1 	bl	8000dc8 <lcd_clr>
	    lcd_str_center(lcdRows()-1, "chip8 emulator");
 80007e6:	f04f 0007 	mov.w	r0, #7
 80007ea:	4958      	ldr	r1, [pc, #352]	; (800094c <main+0x288>)
 80007ec:	f000 fc52 	bl	8001094 <lcd_str_center>
	        //int n = cnt;
	        //uint8_t keys = (~GPIOB->IDR) & 0x1F;
	        //uint8_t keys = GPIOB->IDR & 0b11111111;


			if(!press) break;
 80007f0:	4b4e      	ldr	r3, [pc, #312]	; (800092c <main+0x268>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d113      	bne.n	8000820 <main+0x15c>

	        //cnt++;
	        //if(cnt>9999999) cnt = 0;
	    }

		init8();
 80007f8:	f001 fa10 	bl	8001c1c <init8>
		loadApplication(prog_table[current],prog_size[current]);
 80007fc:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <main+0x26c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <main+0x28c>)
 8000804:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000808:	4b49      	ldr	r3, [pc, #292]	; (8000930 <main+0x26c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4b51      	ldr	r3, [pc, #324]	; (8000954 <main+0x290>)
 8000810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000814:	b29b      	uxth	r3, r3
 8000816:	4610      	mov	r0, r2
 8000818:	4619      	mov	r1, r3
 800081a:	f001 fb37 	bl	8001e8c <loadApplication>
 800081e:	e065      	b.n	80008ec <main+0x228>
	        //uint8_t keys = GPIOB->IDR & 0b11111111;


			if(!press) break;

			if(current!=select_b){
 8000820:	4b43      	ldr	r3, [pc, #268]	; (8000930 <main+0x26c>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <main+0x270>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d04b      	beq.n	80008c4 <main+0x200>
				lcd_clr();
 800082c:	f000 facc 	bl	8000dc8 <lcd_clr>
				lcd_image(lcdRows()/2, lcdWidth()-15, 1, 4, menu_cursor);
 8000830:	4b49      	ldr	r3, [pc, #292]	; (8000958 <main+0x294>)
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	f04f 0004 	mov.w	r0, #4
 8000838:	f04f 0151 	mov.w	r1, #81	; 0x51
 800083c:	f04f 0201 	mov.w	r2, #1
 8000840:	f04f 0304 	mov.w	r3, #4
 8000844:	f000 fc46 	bl	80010d4 <lcd_image>
				if(select_b!=0) {
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <main+0x270>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00d      	beq.n	800086c <main+0x1a8>
					lcd_str(lcdRows()/2-1, 20, menu_table[select_b-1]);
 8000850:	4b38      	ldr	r3, [pc, #224]	; (8000934 <main+0x270>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f103 32ff 	add.w	r2, r3, #4294967295
 8000858:	4b40      	ldr	r3, [pc, #256]	; (800095c <main+0x298>)
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	f04f 0003 	mov.w	r0, #3
 8000862:	f04f 0114 	mov.w	r1, #20
 8000866:	461a      	mov	r2, r3
 8000868:	f000 fbe2 	bl	8001030 <lcd_str>
				}
				lcd_str(lcdRows()/2, 20, menu_table[select_b]);
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <main+0x270>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <main+0x298>)
 8000874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000878:	f04f 0004 	mov.w	r0, #4
 800087c:	f04f 0114 	mov.w	r1, #20
 8000880:	461a      	mov	r2, r3
 8000882:	f000 fbd5 	bl	8001030 <lcd_str>
				if(select_b<MENU_LEN) {
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <main+0x270>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b15      	cmp	r3, #21
 800088c:	d80d      	bhi.n	80008aa <main+0x1e6>
					lcd_str(lcdRows()/2+1, 20, menu_table[select_b+1]);
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <main+0x270>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f103 0201 	add.w	r2, r3, #1
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <main+0x298>)
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	f04f 0005 	mov.w	r0, #5
 80008a0:	f04f 0114 	mov.w	r1, #20
 80008a4:	461a      	mov	r2, r3
 80008a6:	f000 fbc3 	bl	8001030 <lcd_str>
				}

				current=select_b;
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <main+0x270>)
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <main+0x26c>)
 80008b0:	701a      	strb	r2, [r3, #0]

				lcd_str(0, 0, disp_string);
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <main+0x274>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 0100 	mov.w	r1, #0
 80008be:	461a      	mov	r2, r3
 80008c0:	f000 fbb6 	bl	8001030 <lcd_str>
			}

	    	if(update_lcd)
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <main+0x27c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00c      	beq.n	80008e6 <main+0x222>
	    	{
	        lcd_str(0, 0, disp_string);
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <main+0x274>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f04f 0000 	mov.w	r0, #0
 80008d4:	f04f 0100 	mov.w	r1, #0
 80008d8:	461a      	mov	r2, r3
 80008da:	f000 fba9 	bl	8001030 <lcd_str>
	        update_lcd = 0;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <main+0x27c>)
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	    	}

	    	//delay_ms(100);
			update_controll_button();
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <main+0x29c>)
 80008e8:	4798      	blx	r3
	        //okeys = keys;
	        // lcd_start_line(cnt>>8);

	        //cnt++;
	        //if(cnt>9999999) cnt = 0;
	    }
 80008ea:	e781      	b.n	80007f0 <main+0x12c>
		init8();
		loadApplication(prog_table[current],prog_size[current]);
		//loadApplication(MAZE,38);
		uint8_t x,y;
		while(1) {
			emulateCycle();
 80008ec:	f001 fa60 	bl	8001db0 <emulateCycle>
			delay_ms(5);
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <main+0x284>)
 80008f2:	f04f 0005 	mov.w	r0, #5
 80008f6:	4798      	blx	r3
			if(drawFlag) {
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <main+0x2a0>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d074      	beq.n	80009ea <main+0x326>
				//lcd_clr();
				for(y = 18; y < 50; ++y)
 8000900:	f04f 0312 	mov.w	r3, #18
 8000904:	717b      	strb	r3, [r7, #5]
 8000906:	e05e      	b.n	80009c6 <main+0x302>
				{
					for(x = 20; x < 84; ++x)
 8000908:	f04f 0314 	mov.w	r3, #20
 800090c:	71bb      	strb	r3, [r7, #6]
 800090e:	e053      	b.n	80009b8 <main+0x2f4>
 8000910:	20000150 	.word	0x20000150
 8000914:	10624dd3 	.word	0x10624dd3
 8000918:	20000488 	.word	0x20000488
 800091c:	40010800 	.word	0x40010800
 8000920:	40011000 	.word	0x40011000
 8000924:	2000047c 	.word	0x2000047c
 8000928:	2000045c 	.word	0x2000045c
 800092c:	2000049c 	.word	0x2000049c
 8000930:	20000475 	.word	0x20000475
 8000934:	20000474 	.word	0x20000474
 8000938:	20000478 	.word	0x20000478
 800093c:	200000b8 	.word	0x200000b8
 8000940:	2000046c 	.word	0x2000046c
 8000944:	08002ae8 	.word	0x08002ae8
 8000948:	08000c75 	.word	0x08000c75
 800094c:	080029a4 	.word	0x080029a4
 8000950:	20000000 	.word	0x20000000
 8000954:	080058b0 	.word	0x080058b0
 8000958:	080058ac 	.word	0x080058ac
 800095c:	2000005c 	.word	0x2000005c
 8000960:	08000a01 	.word	0x08000a01
 8000964:	200014ec 	.word	0x200014ec
					{
						if(gfx[((y-18)*64) + (x-20)] == 0)
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	f1a3 0312 	sub.w	r3, r3, #18
 800096e:	ea4f 1283 	mov.w	r2, r3, lsl #6
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	f1a3 0314 	sub.w	r3, r3, #20
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <main+0x32c>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10b      	bne.n	800099a <main+0x2d6>
							lcd_pixel(100-x,y,PIXEL_OFF);
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000988:	b2da      	uxtb	r2, r3
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	4610      	mov	r0, r2
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	f000 fc28 	bl	80011e8 <lcd_pixel>
 8000998:	e00a      	b.n	80009b0 <main+0x2ec>
						else
							lcd_pixel(100-x,y,PIXEL_ON);
 800099a:	79bb      	ldrb	r3, [r7, #6]
 800099c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	4610      	mov	r0, r2
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 0201 	mov.w	r2, #1
 80009ac:	f000 fc1c 	bl	80011e8 <lcd_pixel>
			delay_ms(5);
			if(drawFlag) {
				//lcd_clr();
				for(y = 18; y < 50; ++y)
				{
					for(x = 20; x < 84; ++x)
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	f103 0301 	add.w	r3, r3, #1
 80009b6:	71bb      	strb	r3, [r7, #6]
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	2b53      	cmp	r3, #83	; 0x53
 80009bc:	d9d4      	bls.n	8000968 <main+0x2a4>
		while(1) {
			emulateCycle();
			delay_ms(5);
			if(drawFlag) {
				//lcd_clr();
				for(y = 18; y < 50; ++y)
 80009be:	797b      	ldrb	r3, [r7, #5]
 80009c0:	f103 0301 	add.w	r3, r3, #1
 80009c4:	717b      	strb	r3, [r7, #5]
 80009c6:	797b      	ldrb	r3, [r7, #5]
 80009c8:	2b31      	cmp	r3, #49	; 0x31
 80009ca:	d99d      	bls.n	8000908 <main+0x244>
							lcd_pixel(x,y,PIXEL_OFF);
						else
							lcd_pixel(x,y,PIXEL_ON);
					}
				}*/
				drawFlag = false;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <main+0x330>)
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
				lcd_update();
 80009d4:	f000 fbf4 	bl	80011c0 <lcd_update>
				lcd_str(0, 0, disp_string);
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <main+0x334>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	f04f 0100 	mov.w	r1, #0
 80009e4:	461a      	mov	r2, r3
 80009e6:	f000 fb23 	bl	8001030 <lcd_str>
			}
			update_game_button();
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <main+0x338>)
 80009ec:	4798      	blx	r3

		}
 80009ee:	e77d      	b.n	80008ec <main+0x228>
 80009f0:	20001504 	.word	0x20001504
 80009f4:	200014ec 	.word	0x200014ec
 80009f8:	20000478 	.word	0x20000478
 80009fc:	08000b15 	.word	0x08000b15

08000a00 <update_controll_button>:
	  do __NOP(); while (1); // зависаем
}


void update_controll_button()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	if (btn_state[UP] && GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_8))
 8000a04:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <update_controll_button+0xf8>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d012      	beq.n	8000a34 <update_controll_button+0x34>
 8000a0e:	483b      	ldr	r0, [pc, #236]	; (8000afc <update_controll_button+0xfc>)
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	f001 fbe4 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00a      	beq.n	8000a34 <update_controll_button+0x34>
	{
		select_b--;
 8000a1e:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <update_controll_button+0x100>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <update_controll_button+0x100>)
 8000a2a:	701a      	strb	r2, [r3, #0]
		//delay_ms(200);
		btn_state[UP] = 0;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <update_controll_button+0xf8>)
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
	}
	if (btn_state[DOWN] && GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_12))
 8000a34:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <update_controll_button+0xf8>)
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d012      	beq.n	8000a64 <update_controll_button+0x64>
 8000a3e:	482f      	ldr	r0, [pc, #188]	; (8000afc <update_controll_button+0xfc>)
 8000a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a44:	f001 fbcc 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00a      	beq.n	8000a64 <update_controll_button+0x64>
	{
		select_b++;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <update_controll_button+0x100>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	f103 0301 	add.w	r3, r3, #1
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <update_controll_button+0x100>)
 8000a5a:	701a      	strb	r2, [r3, #0]
		//delay_ms(200);
		btn_state[DOWN] = 0;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <update_controll_button+0xf8>)
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	709a      	strb	r2, [r3, #2]
	}
	if (btn_state[B4]&& GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2))
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <update_controll_button+0xf8>)
 8000a66:	79db      	ldrb	r3, [r3, #7]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00f      	beq.n	8000a8e <update_controll_button+0x8e>
 8000a6e:	4825      	ldr	r0, [pc, #148]	; (8000b04 <update_controll_button+0x104>)
 8000a70:	f04f 0104 	mov.w	r1, #4
 8000a74:	f001 fbb4 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <update_controll_button+0x8e>
	{
		press=0;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <update_controll_button+0x108>)
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
		//delay_ms(200);
		btn_state[B4] = 0;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <update_controll_button+0xf8>)
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	71da      	strb	r2, [r3, #7]
	}

	if (btn_state[B5]&& GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_3))
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <update_controll_button+0xf8>)
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d01e      	beq.n	8000ad6 <update_controll_button+0xd6>
 8000a98:	481c      	ldr	r0, [pc, #112]	; (8000b0c <update_controll_button+0x10c>)
 8000a9a:	f04f 0108 	mov.w	r1, #8
 8000a9e:	f001 fb9f 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d016      	beq.n	8000ad6 <update_controll_button+0xd6>
	{
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_0))
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <update_controll_button+0x110>)
 8000aaa:	f04f 0101 	mov.w	r1, #1
 8000aae:	f001 fb97 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d005      	beq.n	8000ac4 <update_controll_button+0xc4>
			GPIO_ResetBits(GPIOC, GPIO_Pin_0);
 8000ab8:	4815      	ldr	r0, [pc, #84]	; (8000b10 <update_controll_button+0x110>)
 8000aba:	f04f 0101 	mov.w	r1, #1
 8000abe:	f001 fbbb 	bl	8002238 <GPIO_ResetBits>
 8000ac2:	e004      	b.n	8000ace <update_controll_button+0xce>
		else
			GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <update_controll_button+0x110>)
 8000ac6:	f04f 0101 	mov.w	r1, #1
 8000aca:	f001 fba7 	bl	800221c <GPIO_SetBits>
		//delay_ms(200);
		btn_state[B5] = 0;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <update_controll_button+0xf8>)
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	721a      	strb	r2, [r3, #8]
	}
	if(select_b == 255) select_b=MENU_LEN;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <update_controll_button+0x100>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2bff      	cmp	r3, #255	; 0xff
 8000adc:	d103      	bne.n	8000ae6 <update_controll_button+0xe6>
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <update_controll_button+0x100>)
 8000ae0:	f04f 0216 	mov.w	r2, #22
 8000ae4:	701a      	strb	r2, [r3, #0]
	if(select_b > MENU_LEN) select_b=0;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <update_controll_button+0x100>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b16      	cmp	r3, #22
 8000aec:	d903      	bls.n	8000af6 <update_controll_button+0xf6>
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <update_controll_button+0x100>)
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]

}
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000047c 	.word	0x2000047c
 8000afc:	40010800 	.word	0x40010800
 8000b00:	20000474 	.word	0x20000474
 8000b04:	40011400 	.word	0x40011400
 8000b08:	2000049c 	.word	0x2000049c
 8000b0c:	40010c00 	.word	0x40010c00
 8000b10:	40011000 	.word	0x40011000

08000b14 <update_game_button>:

void update_game_button() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	byte i[4];
	i[0] = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_8);
 8000b1a:	4845      	ldr	r0, [pc, #276]	; (8000c30 <update_game_button+0x11c>)
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	f001 fb5e 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000b24:	4603      	mov	r3, r0
 8000b26:	713b      	strb	r3, [r7, #4]
	i[1] = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_12);
 8000b28:	4841      	ldr	r0, [pc, #260]	; (8000c30 <update_game_button+0x11c>)
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	f001 fb57 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000b32:	4603      	mov	r3, r0
 8000b34:	717b      	strb	r3, [r7, #5]
	i[3] = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_11);
 8000b36:	483f      	ldr	r0, [pc, #252]	; (8000c34 <update_game_button+0x120>)
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	f001 fb50 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
	i[2] = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_9);
 8000b44:	483b      	ldr	r0, [pc, #236]	; (8000c34 <update_game_button+0x120>)
 8000b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4a:	f001 fb49 	bl	80021e0 <GPIO_ReadInputDataBit>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71bb      	strb	r3, [r7, #6]

	if (btn_state[UP] && i[0])
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <update_game_button+0x124>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00b      	beq.n	8000b74 <update_game_button+0x60>
 8000b5c:	793b      	ldrb	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <update_game_button+0x60>
	{
		key[0x4] =1;
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <update_game_button+0x128>)
 8000b64:	f04f 0201 	mov.w	r2, #1
 8000b68:	711a      	strb	r2, [r3, #4]
		btn_state[UP] = 0;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <update_game_button+0x124>)
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e008      	b.n	8000b86 <update_game_button+0x72>
	}
	else if (!btn_state[UP])
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <update_game_button+0x124>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <update_game_button+0x72>
		key[0x4] =0;
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <update_game_button+0x128>)
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	711a      	strb	r2, [r3, #4]
	if (btn_state[DOWN] && i[1])
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <update_game_button+0x124>)
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00b      	beq.n	8000ba8 <update_game_button+0x94>
 8000b90:	797b      	ldrb	r3, [r7, #5]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d008      	beq.n	8000ba8 <update_game_button+0x94>
	{
		key[0xD] =1;
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <update_game_button+0x128>)
 8000b98:	f04f 0201 	mov.w	r2, #1
 8000b9c:	735a      	strb	r2, [r3, #13]
		btn_state[DOWN] = 0;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <update_game_button+0x124>)
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	709a      	strb	r2, [r3, #2]
 8000ba6:	e008      	b.n	8000bba <update_game_button+0xa6>
	}
	else if (!btn_state[DOWN])
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <update_game_button+0x124>)
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <update_game_button+0xa6>
		key[0xD] =0;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <update_game_button+0x128>)
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	735a      	strb	r2, [r3, #13]
	if (btn_state[RIGHT] && i[2])
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <update_game_button+0x124>)
 8000bbc:	785b      	ldrb	r3, [r3, #1]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00b      	beq.n	8000bdc <update_game_button+0xc8>
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d008      	beq.n	8000bdc <update_game_button+0xc8>
	{
		key[0x6] =1;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <update_game_button+0x128>)
 8000bcc:	f04f 0201 	mov.w	r2, #1
 8000bd0:	719a      	strb	r2, [r3, #6]
		btn_state[RIGHT] = 0;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <update_game_button+0x124>)
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	705a      	strb	r2, [r3, #1]
 8000bda:	e008      	b.n	8000bee <update_game_button+0xda>
	}
	else if (!btn_state[RIGHT])
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <update_game_button+0x124>)
 8000bde:	785b      	ldrb	r3, [r3, #1]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <update_game_button+0xda>
		key[0x6] =0;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <update_game_button+0x128>)
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	719a      	strb	r2, [r3, #6]
	if (btn_state[LEFT] && i[3])
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <update_game_button+0x124>)
 8000bf0:	78db      	ldrb	r3, [r3, #3]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00b      	beq.n	8000c10 <update_game_button+0xfc>
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <update_game_button+0xfc>
	{
		key[0x5] =1;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <update_game_button+0x128>)
 8000c00:	f04f 0201 	mov.w	r2, #1
 8000c04:	715a      	strb	r2, [r3, #5]
		btn_state[LEFT] = 0;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <update_game_button+0x124>)
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	70da      	strb	r2, [r3, #3]
 8000c0e:	e00b      	b.n	8000c28 <update_game_button+0x114>
	}
	else if (!btn_state[btn_state[DOWN]])
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <update_game_button+0x124>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <update_game_button+0x124>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d103      	bne.n	8000c28 <update_game_button+0x114>
		key[0x5] =0;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <update_game_button+0x128>)
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	715a      	strb	r2, [r3, #5]
}
 8000c28:	f107 0708 	add.w	r7, r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40011000 	.word	0x40011000
 8000c38:	2000047c 	.word	0x2000047c
 8000c3c:	200014f0 	.word	0x200014f0

08000c40 <SysTick_Worker>:

void SysTick_Worker(void) {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	timer++;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <SysTick_Worker+0x2c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f103 0201 	add.w	r2, r3, #1
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SysTick_Worker+0x2c>)
 8000c4e:	601a      	str	r2, [r3, #0]
	if (SysTickDelay != 0) {
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <SysTick_Worker+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <SysTick_Worker+0x24>
		SysTickDelay--;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Worker+0x30>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <SysTick_Worker+0x30>)
 8000c62:	601a      	str	r2, [r3, #0]
	}

}
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000468 	.word	0x20000468
 8000c70:	20000470 	.word	0x20000470

08000c74 <delay_ms>:

void delay_ms(unsigned int nCount) {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	SysTickDelay = nCount;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <delay_ms+0x24>)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]
	while (SysTickDelay != 0) {};
 8000c82:	bf00      	nop
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <delay_ms+0x24>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1fb      	bne.n	8000c84 <delay_ms+0x10>
}
 8000c8c:	f107 070c 	add.w	r7, r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000470 	.word	0x20000470

08000c9c <lcd_reset>:
    GPIOA->BRR = (1<<4);
#endif
}

static void lcd_reset(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
    lcd_rst_mark();
    lcd_delay_us(10);
    lcd_rst_release();
    lcd_delay_us(10);
    */
}
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <lcd_write_byte>:

static void lcd_write_byte(uint8_t data, uint8_t rc)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71fa      	strb	r2, [r7, #7]
 8000cb4:	71bb      	strb	r3, [r7, #6]
        ; /* BLANK */

    USART1->DR = d;

#else
    if(rc)
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <lcd_write_byte+0x1e>
        GPIOA->BSRR = (1<<2);
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <lcd_write_byte+0x88>)
 8000cbe:	f04f 0204 	mov.w	r2, #4
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	e003      	b.n	8000cce <lcd_write_byte+0x26>
    else
        GPIOA->BRR = (1<<2);
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <lcd_write_byte+0x88>)
 8000cc8:	f04f 0204 	mov.w	r2, #4
 8000ccc:	615a      	str	r2, [r3, #20]

    GPIOA->BSRR = (1<<4);
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <lcd_write_byte+0x88>)
 8000cd0:	f04f 0210 	mov.w	r2, #16
 8000cd4:	611a      	str	r2, [r3, #16]
    GPIOA->BRR = (1<<4);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <lcd_write_byte+0x88>)
 8000cd8:	f04f 0210 	mov.w	r2, #16
 8000cdc:	615a      	str	r2, [r3, #20]

    int i;
    for(i=0; i<8; i++)
 8000cde:	f04f 0300 	mov.w	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e01c      	b.n	8000d20 <lcd_write_byte+0x78>
    {
        if(data & 0x80)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da04      	bge.n	8000cf8 <lcd_write_byte+0x50>
            GPIOA->BSRR = (1<<2);
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <lcd_write_byte+0x88>)
 8000cf0:	f04f 0204 	mov.w	r2, #4
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	e003      	b.n	8000d00 <lcd_write_byte+0x58>
        else
            GPIOA->BRR = (1<<2);
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <lcd_write_byte+0x88>)
 8000cfa:	f04f 0204 	mov.w	r2, #4
 8000cfe:	615a      	str	r2, [r3, #20]
        GPIOA->BSRR = (1<<4);
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <lcd_write_byte+0x88>)
 8000d02:	f04f 0210 	mov.w	r2, #16
 8000d06:	611a      	str	r2, [r3, #16]
        GPIOA->BRR = (1<<4);
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <lcd_write_byte+0x88>)
 8000d0a:	f04f 0210 	mov.w	r2, #16
 8000d0e:	615a      	str	r2, [r3, #20]
        data <<= 1;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d16:	71fb      	strb	r3, [r7, #7]

    GPIOA->BSRR = (1<<4);
    GPIOA->BRR = (1<<4);

    int i;
    for(i=0; i<8; i++)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f103 0301 	add.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b07      	cmp	r3, #7
 8000d24:	dddf      	ble.n	8000ce6 <lcd_write_byte+0x3e>
        GPIOA->BSRR = (1<<4);
        GPIOA->BRR = (1<<4);
        data <<= 1;
    }
#endif
}
 8000d26:	f107 0714 	add.w	r7, r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40010800 	.word	0x40010800

08000d34 <lcd_init>:
/* hw undepended functions */

lcd_flags_t lcd_flags;

void lcd_init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
    //lcd_init_gpio();
    lcd_reset();
 8000d3a:	f7ff ffaf 	bl	8000c9c <lcd_reset>

    lcd_cs_mark();
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <lcd_init+0x84>)
 8000d40:	f04f 0202 	mov.w	r2, #2
 8000d44:	615a      	str	r2, [r3, #20]
    lcd_write_byte(0xE2, 0); // Reset
 8000d46:	f04f 00e2 	mov.w	r0, #226	; 0xe2
 8000d4a:	f04f 0100 	mov.w	r1, #0
 8000d4e:	f7ff ffab 	bl	8000ca8 <lcd_write_byte>
    lcd_delay_us(10000);
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <lcd_init+0x88>)
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e7ff      	b.n	8000d58 <lcd_init+0x24>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f8      	bne.n	8000d58 <lcd_init+0x24>
    // lcd_write_byte(0x3D, 0);  // Charge pump
    // lcd_write_byte(0x01, 0);  // Charge pump = 4 (default 5 is too hight for 3.0 volt)
    // lcd_write_byte(0xE1, 0);  // Additional VOP for contrast increase
    // lcd_write_byte(0x16, 0);  // from -127 to +127
    lcd_write_byte(0xA4, 0); // Power saver off
 8000d66:	f04f 00a4 	mov.w	r0, #164	; 0xa4
 8000d6a:	f04f 0100 	mov.w	r1, #0
 8000d6e:	f7ff ff9b 	bl	8000ca8 <lcd_write_byte>
    lcd_write_byte(0x2F, 0); // Booster ON Voltage regulator ON Voltage follover ON
 8000d72:	f04f 002f 	mov.w	r0, #47	; 0x2f
 8000d76:	f04f 0100 	mov.w	r1, #0
 8000d7a:	f7ff ff95 	bl	8000ca8 <lcd_write_byte>
    lcd_write_byte(0xAF, 0); // LCD display on
 8000d7e:	f04f 00af 	mov.w	r0, #175	; 0xaf
 8000d82:	f04f 0100 	mov.w	r1, #0
 8000d86:	f7ff ff8f 	bl	8000ca8 <lcd_write_byte>
    lcd_cs_release();
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <lcd_init+0x8c>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f8      	beq.n	8000d8a <lcd_init+0x56>
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <lcd_init+0x84>)
 8000d9a:	f04f 0202 	mov.w	r2, #2
 8000d9e:	611a      	str	r2, [r3, #16]

    lcd_flags.inverse_char = 0;
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <lcd_init+0x90>)
 8000da2:	6813      	ldr	r3, [r2, #0]
 8000da4:	f36f 0300 	bfc	r3, #0, #1
 8000da8:	6013      	str	r3, [r2, #0]

    lcd_clr();
 8000daa:	f000 f80d 	bl	8000dc8 <lcd_clr>
}
 8000dae:	f107 0708 	add.w	r7, r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	0001adb0 	.word	0x0001adb0
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	200004ac 	.word	0x200004ac

08000dc8 <lcd_clr>:
        lcd_write_byte(0x00 | ((col) & 0x0F), 0); /* lower 4-bit */ \
    } while(0)


void lcd_clr(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
    int i;
    lcd_home();
 8000dce:	f000 f85f 	bl	8000e90 <lcd_home>
    lcd_cs_mark();
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <lcd_clr+0x64>)
 8000dd4:	f04f 0202 	mov.w	r2, #2
 8000dd8:	615a      	str	r2, [r3, #20]
    for(i=0; i<16*6*9; i++)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e009      	b.n	8000df6 <lcd_clr+0x2e>
    {
        lcd_write_byte(0x00, 1);
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	f04f 0101 	mov.w	r1, #1
 8000dea:	f7ff ff5d 	bl	8000ca8 <lcd_write_byte>
void lcd_clr(void)
{
    int i;
    lcd_home();
    lcd_cs_mark();
    for(i=0; i<16*6*9; i++)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f103 0301 	add.w	r3, r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	f240 335f 	movw	r3, #863	; 0x35f
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	ddf0      	ble.n	8000de2 <lcd_clr+0x1a>
    {
        lcd_write_byte(0x00, 1);
    }
    lcd_cs_release();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <lcd_clr+0x68>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f8      	beq.n	8000e00 <lcd_clr+0x38>
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <lcd_clr+0x64>)
 8000e10:	f04f 0202 	mov.w	r2, #2
 8000e14:	611a      	str	r2, [r3, #16]
    memset( LcdCache, 0x00, LCD_CACHE_SIZE );
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <lcd_clr+0x6c>)
 8000e18:	f04f 0100 	mov.w	r1, #0
 8000e1c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e20:	f7ff fa7e 	bl	8000320 <memset>
}
 8000e24:	f107 0708 	add.w	r7, r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40004400 	.word	0x40004400
 8000e34:	20000154 	.word	0x20000154

08000e38 <lcd_column_direction>:
        lcd_write_byte(0xA0, 0); // normal segment direction
    lcd_cs_release();
}

void lcd_column_direction(lcd_reverse_t reverse)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
    lcd_cs_mark();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <lcd_column_direction+0x50>)
 8000e44:	f04f 0202 	mov.w	r2, #2
 8000e48:	615a      	str	r2, [r3, #20]
    if(reverse)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <lcd_column_direction+0x26>
        lcd_write_byte(0xC8, 0); // reverse column direction
 8000e50:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000e54:	f04f 0100 	mov.w	r1, #0
 8000e58:	f7ff ff26 	bl	8000ca8 <lcd_write_byte>
    else
        lcd_write_byte(0xC0, 0); // normal column direction
    lcd_cs_release();
 8000e5c:	e005      	b.n	8000e6a <lcd_column_direction+0x32>
{
    lcd_cs_mark();
    if(reverse)
        lcd_write_byte(0xC8, 0); // reverse column direction
    else
        lcd_write_byte(0xC0, 0); // normal column direction
 8000e5e:	f04f 00c0 	mov.w	r0, #192	; 0xc0
 8000e62:	f04f 0100 	mov.w	r1, #0
 8000e66:	f7ff ff1f 	bl	8000ca8 <lcd_write_byte>
    lcd_cs_release();
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <lcd_column_direction+0x54>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f8      	beq.n	8000e6a <lcd_column_direction+0x32>
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <lcd_column_direction+0x50>)
 8000e7a:	f04f 0202 	mov.w	r2, #2
 8000e7e:	611a      	str	r2, [r3, #16]
}
 8000e80:	f107 0708 	add.w	r7, r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40004400 	.word	0x40004400

08000e90 <lcd_home>:
    lcd_write_byte(0x40 | (line & 0x3F), 0);
    lcd_cs_release();
}

void lcd_home(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    lcd_cs_mark();
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <lcd_home+0x48>)
 8000e96:	f04f 0202 	mov.w	r2, #2
 8000e9a:	615a      	str	r2, [r3, #20]
    lcd_set_row(0);
 8000e9c:	f04f 00b0 	mov.w	r0, #176	; 0xb0
 8000ea0:	f04f 0100 	mov.w	r1, #0
 8000ea4:	f7ff ff00 	bl	8000ca8 <lcd_write_byte>
    lcd_set_col(0);
 8000ea8:	f04f 0010 	mov.w	r0, #16
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	f7ff fefa 	bl	8000ca8 <lcd_write_byte>
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	f04f 0100 	mov.w	r1, #0
 8000ebc:	f7ff fef4 	bl	8000ca8 <lcd_write_byte>
    lcd_cs_release();
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <lcd_home+0x4c>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f8      	beq.n	8000ec0 <lcd_home+0x30>
 8000ece:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <lcd_home+0x48>)
 8000ed0:	f04f 0202 	mov.w	r2, #2
 8000ed4:	611a      	str	r2, [r3, #16]
}
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40004400 	.word	0x40004400

08000ee0 <lcd_char>:

void lcd_char(uint8_t row, uint8_t col, char chr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	4602      	mov	r2, r0
 8000eea:	71fa      	strb	r2, [r7, #7]
 8000eec:	460a      	mov	r2, r1
 8000eee:	71ba      	strb	r2, [r7, #6]
 8000ef0:	717b      	strb	r3, [r7, #5]
    int i;
    const uint8_t* f = font5x8 + chr*5 + fontWidth - 1;
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	f103 0201 	add.w	r2, r3, #1
 8000ef8:	4613      	mov	r3, r2
 8000efa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	f103 32ff 	add.w	r2, r3, #4294967295
 8000f04:	4b46      	ldr	r3, [pc, #280]	; (8001020 <lcd_char+0x140>)
 8000f06:	18d3      	adds	r3, r2, r3
 8000f08:	613b      	str	r3, [r7, #16]
    lcd_cs_mark();
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <lcd_char+0x144>)
 8000f0c:	f04f 0202 	mov.w	r2, #2
 8000f10:	615a      	str	r2, [r3, #20]
    lcd_set_row(row);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f04f 0100 	mov.w	r1, #0
 8000f28:	f7ff febe 	bl	8000ca8 <lcd_write_byte>
    lcd_set_col(col);
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f04f 0100 	mov.w	r1, #0
 8000f40:	f7ff feb2 	bl	8000ca8 <lcd_write_byte>
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f04f 0100 	mov.w	r1, #0
 8000f52:	f7ff fea9 	bl	8000ca8 <lcd_write_byte>
    for(i=0; i<fontWidth; i++)
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e02e      	b.n	8000fbc <lcd_char+0xdc>
    {
        uint8_t b = *f--;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	f103 33ff 	add.w	r3, r3, #4294967295
 8000f6a:	613b      	str	r3, [r7, #16]
        if(lcd_flags.inverse_char) b = ~b;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <lcd_char+0x148>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <lcd_char+0xa2>
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	ea6f 0303 	mvn.w	r3, r3
 8000f80:	73fb      	strb	r3, [r7, #15]
        lcd_write_byte(b, 1);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f04f 0101 	mov.w	r1, #1
 8000f8a:	f7ff fe8d 	bl	8000ca8 <lcd_write_byte>
        if(++col >= lcdWidth())
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	f103 0301 	add.w	r3, r3, #1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b5f      	cmp	r3, #95	; 0x5f
 8000f9a:	d90b      	bls.n	8000fb4 <lcd_char+0xd4>
        {
            lcd_cs_release();
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <lcd_char+0x14c>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f8      	beq.n	8000f9c <lcd_char+0xbc>
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <lcd_char+0x144>)
 8000fac:	f04f 0202 	mov.w	r2, #2
 8000fb0:	611a      	str	r2, [r3, #16]
            return;
 8000fb2:	e030      	b.n	8001016 <lcd_char+0x136>
    int i;
    const uint8_t* f = font5x8 + chr*5 + fontWidth - 1;
    lcd_cs_mark();
    lcd_set_row(row);
    lcd_set_col(col);
    for(i=0; i<fontWidth; i++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f103 0301 	add.w	r3, r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	ddcd      	ble.n	8000f5e <lcd_char+0x7e>
        {
            lcd_cs_release();
            return;
        }
    }
    for(i=0; i<fontSpace; i++)
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e017      	b.n	8000ffa <lcd_char+0x11a>
    {
        if(lcd_flags.inverse_char)
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <lcd_char+0x148>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <lcd_char+0x106>
            lcd_write_byte(0xFF, 1);
 8000fd8:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8000fdc:	f04f 0101 	mov.w	r1, #1
 8000fe0:	f7ff fe62 	bl	8000ca8 <lcd_write_byte>
 8000fe4:	e005      	b.n	8000ff2 <lcd_char+0x112>
        else
            lcd_write_byte(0, 1);
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	f04f 0101 	mov.w	r1, #1
 8000fee:	f7ff fe5b 	bl	8000ca8 <lcd_write_byte>
        {
            lcd_cs_release();
            return;
        }
    }
    for(i=0; i<fontSpace; i++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f103 0301 	add.w	r3, r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dde4      	ble.n	8000fca <lcd_char+0xea>
        if(lcd_flags.inverse_char)
            lcd_write_byte(0xFF, 1);
        else
            lcd_write_byte(0, 1);
    }
    lcd_cs_release();
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <lcd_char+0x14c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f8      	beq.n	8001000 <lcd_char+0x120>
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <lcd_char+0x144>)
 8001010:	f04f 0202 	mov.w	r2, #2
 8001014:	611a      	str	r2, [r3, #16]
}
 8001016:	f107 0718 	add.w	r7, r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	0800590c 	.word	0x0800590c
 8001024:	40010800 	.word	0x40010800
 8001028:	200004ac 	.word	0x200004ac
 800102c:	40004400 	.word	0x40004400

08001030 <lcd_str>:

void lcd_str(uint8_t row, uint8_t col, const char* str)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	460b      	mov	r3, r1
 8001038:	603a      	str	r2, [r7, #0]
 800103a:	4602      	mov	r2, r0
 800103c:	71fa      	strb	r2, [r7, #7]
 800103e:	71bb      	strb	r3, [r7, #6]
    char c;
    col = lcdWidth() - col - fontSpace*5;
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	f1c3 035b 	rsb	r3, r3, #91	; 0x5b
 8001046:	71bb      	strb	r3, [r7, #6]
    while((c = *str++) != 0)
 8001048:	e00e      	b.n	8001068 <lcd_str+0x38>
    {
        lcd_char(row, col, c);
 800104a:	79f9      	ldrb	r1, [r7, #7]
 800104c:	79ba      	ldrb	r2, [r7, #6]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	f7ff ff43 	bl	8000ee0 <lcd_char>
        col -= fontWidth + fontSpace;
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	f1a3 0306 	sub.w	r3, r3, #6
 8001060:	71bb      	strb	r3, [r7, #6]
        //if(col >= lcdWidth()) return;
        if(col <= 0) return;
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00f      	beq.n	8001088 <lcd_str+0x58>

void lcd_str(uint8_t row, uint8_t col, const char* str)
{
    char c;
    col = lcdWidth() - col - fontSpace*5;
    while((c = *str++) != 0)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2300      	moveq	r3, #0
 8001076:	2301      	movne	r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	f102 0201 	add.w	r2, r2, #1
 8001080:	603a      	str	r2, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1e1      	bne.n	800104a <lcd_str+0x1a>
 8001086:	e000      	b.n	800108a <lcd_str+0x5a>
    {
        lcd_char(row, col, c);
        col -= fontWidth + fontSpace;
        //if(col >= lcdWidth()) return;
        if(col <= 0) return;
 8001088:	bf00      	nop
    }
}
 800108a:	f107 0710 	add.w	r7, r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop

08001094 <lcd_str_center>:

void lcd_str_center(uint8_t row, const char* str)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
    lcd_str(row,
        (lcdWidth()-strlen(str)*(fontWidth+fontSpace))>>1,
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f7ff f997 	bl	80003d4 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4613      	mov	r3, r2
 80010ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80010b0:	189b      	adds	r3, r3, r2
 80010b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80010b6:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 80010ba:	ea4f 0353 	mov.w	r3, r3, lsr #1
    }
}

void lcd_str_center(uint8_t row, const char* str)
{
    lcd_str(row,
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	f7ff ffb2 	bl	8001030 <lcd_str>
        (lcdWidth()-strlen(str)*(fontWidth+fontSpace))>>1,
        str);
}
 80010cc:	f107 0708 	add.w	r7, r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <lcd_image>:
}

void lcd_image(uint8_t row, uint8_t col,
        uint8_t height, uint8_t widht,
        const uint8_t* img)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	71f8      	strb	r0, [r7, #7]
 80010dc:	71b9      	strb	r1, [r7, #6]
 80010de:	717a      	strb	r2, [r7, #5]
 80010e0:	713b      	strb	r3, [r7, #4]
    uint8_t r, c;
    lcd_cs_mark();
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <lcd_image+0xe0>)
 80010e4:	f04f 0202 	mov.w	r2, #2
 80010e8:	615a      	str	r2, [r3, #20]
    for(r = 0; r < height; r++)
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e04d      	b.n	800118e <lcd_image+0xba>
    {
        lcd_set_row(row+r);
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	18d3      	adds	r3, r2, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f04f 0100 	mov.w	r1, #0
 8001110:	f7ff fdca 	bl	8000ca8 <lcd_write_byte>
        lcd_set_col(col);
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f04f 0100 	mov.w	r1, #0
 8001128:	f7ff fdbe 	bl	8000ca8 <lcd_write_byte>
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f04f 0100 	mov.w	r1, #0
 800113a:	f7ff fdb5 	bl	8000ca8 <lcd_write_byte>
        for(c = 0; c < widht; c++)
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
 8001144:	e01b      	b.n	800117e <lcd_image+0xaa>
        {
            uint8_t b = *img++;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	737b      	strb	r3, [r7, #13]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f103 0301 	add.w	r3, r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
            if(lcd_flags.inverse_char) b = ~b;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <lcd_image+0xe4>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <lcd_image+0x96>
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	ea6f 0303 	mvn.w	r3, r3
 8001168:	737b      	strb	r3, [r7, #13]
            lcd_write_byte(b, 1);
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	4618      	mov	r0, r3
 800116e:	f04f 0101 	mov.w	r1, #1
 8001172:	f7ff fd99 	bl	8000ca8 <lcd_write_byte>
    lcd_cs_mark();
    for(r = 0; r < height; r++)
    {
        lcd_set_row(row+r);
        lcd_set_col(col);
        for(c = 0; c < widht; c++)
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	f103 0301 	add.w	r3, r3, #1
 800117c:	73bb      	strb	r3, [r7, #14]
 800117e:	7bba      	ldrb	r2, [r7, #14]
 8001180:	793b      	ldrb	r3, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3df      	bcc.n	8001146 <lcd_image+0x72>
        uint8_t height, uint8_t widht,
        const uint8_t* img)
{
    uint8_t r, c;
    lcd_cs_mark();
    for(r = 0; r < height; r++)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f103 0301 	add.w	r3, r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3ad      	bcc.n	80010f2 <lcd_image+0x1e>
            uint8_t b = *img++;
            if(lcd_flags.inverse_char) b = ~b;
            lcd_write_byte(b, 1);
        }
    }
    lcd_cs_release();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <lcd_image+0xe8>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f8      	beq.n	8001196 <lcd_image+0xc2>
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <lcd_image+0xe0>)
 80011a6:	f04f 0202 	mov.w	r2, #2
 80011aa:	611a      	str	r2, [r3, #16]
}
 80011ac:	f107 0710 	add.w	r7, r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010800 	.word	0x40010800
 80011b8:	200004ac 	.word	0x200004ac
 80011bc:	40004400 	.word	0x40004400

080011c0 <lcd_update>:

void lcd_update (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af02      	add	r7, sp, #8
	lcd_image(0, 0, 8, 96, LcdCache);
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <lcd_update+0x24>)
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	f04f 0100 	mov.w	r1, #0
 80011d2:	f04f 0208 	mov.w	r2, #8
 80011d6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80011da:	f7ff ff7b 	bl	80010d4 <lcd_image>
}
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000154 	.word	0x20000154

080011e8 <lcd_pixel>:

uint8_t lcd_pixel ( uint8_t x, uint8_t y, LcdPixelMode mode )
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4613      	mov	r3, r2
 80011f0:	4602      	mov	r2, r0
 80011f2:	71fa      	strb	r2, [r7, #7]
 80011f4:	460a      	mov	r2, r1
 80011f6:	71ba      	strb	r2, [r7, #6]
 80011f8:	717b      	strb	r3, [r7, #5]
    int  index;
    uint8_t  offset;
    uint8_t  data;

    // Çàùèòà îò âûõîäà çà ïðåäåëû
    if ( x >= lcdWidth() || y >= lcdHeight()) return -1;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b5f      	cmp	r3, #95	; 0x5f
 80011fe:	d802      	bhi.n	8001206 <lcd_pixel+0x1e>
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	2b43      	cmp	r3, #67	; 0x43
 8001204:	d902      	bls.n	800120c <lcd_pixel+0x24>
 8001206:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800120a:	e057      	b.n	80012bc <lcd_pixel+0xd4>

    // Ïåðåñ÷åò èíäåêñà è ñìåùåíèÿ
    index = ( ( y / 8 ) * lcdWidth() ) + x;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4613      	mov	r3, r2
 8001218:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800121c:	189b      	adds	r3, r3, r2
 800121e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001222:	461a      	mov	r2, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	18d3      	adds	r3, r2, r3
 8001228:	613b      	str	r3, [r7, #16]
    offset  = y - ( ( y / 8 ) * 8 );
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800123e:	b2da      	uxtb	r2, r3
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	73fb      	strb	r3, [r7, #15]

    data = LcdCache[ index ];
 8001246:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <lcd_pixel+0xe0>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	18d3      	adds	r3, r2, r3
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	75fb      	strb	r3, [r7, #23]

    // Îáðàáîòêà áèòîâ

    // Ðåæèì PIXEL_OFF
    if ( mode == PIXEL_OFF )
 8001250:	797b      	ldrb	r3, [r7, #5]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10e      	bne.n	8001274 <lcd_pixel+0x8c>
    {
        data &= ( ~( 0x01 << offset ) );
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f04f 0201 	mov.w	r2, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	ea6f 0303 	mvn.w	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	ea02 0303 	and.w	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	75fb      	strb	r3, [r7, #23]
 8001272:	e01c      	b.n	80012ae <lcd_pixel+0xc6>
    }
    // Ðåæèì PIXEL_ON
    else if ( mode == PIXEL_ON )
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d10b      	bne.n	8001292 <lcd_pixel+0xaa>
    {
        data |= ( 0x01 << offset );
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f04f 0201 	mov.w	r2, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	b2da      	uxtb	r2, r3
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	ea42 0303 	orr.w	r3, r2, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	75fb      	strb	r3, [r7, #23]
 8001290:	e00d      	b.n	80012ae <lcd_pixel+0xc6>
    }
    // Ðåæèì PIXEL_XOR
    else if ( mode  == PIXEL_XOR )
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d10a      	bne.n	80012ae <lcd_pixel+0xc6>
    {
        data ^= ( 0x01 << offset );
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	f04f 0201 	mov.w	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	ea82 0303 	eor.w	r3, r2, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	75fb      	strb	r3, [r7, #23]
    }
    LcdCache[ index ] = data;
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <lcd_pixel+0xe0>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	18d3      	adds	r3, r2, r3
 80012b4:	7dfa      	ldrb	r2, [r7, #23]
 80012b6:	701a      	strb	r2, [r3, #0]

    return 1;
 80012b8:	f04f 0301 	mov.w	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	f107 071c 	add.w	r7, r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	20000154 	.word	0x20000154

080012cc <xor128>:
#define get_reg_value_2(opcode)         (*get_reg_offset_2(opcode))

typedef void (*opcode_fn) (word opcode);
typedef void (*math_fn) (byte *reg1,byte reg2);

unsigned long xor128(void) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  static unsigned long y = 362436069;
  static unsigned long z = 521288629;
  static unsigned long w = 88675123;
  unsigned int t;

  t = x ^ (x << 11);
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <xor128+0x60>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	ea4f 22c3 	mov.w	r2, r3, lsl #11
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <xor128+0x60>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	ea82 0303 	eor.w	r3, r2, r3
 80012e2:	607b      	str	r3, [r7, #4]
  x = y; y = z; z = w;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <xor128+0x64>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <xor128+0x60>)
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <xor128+0x68>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <xor128+0x64>)
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <xor128+0x6c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <xor128+0x68>)
 80012fa:	601a      	str	r2, [r3, #0]
  return w = w ^ (w >> 19) ^ (t ^ (t >> 8));
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <xor128+0x6c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	ea4f 42d3 	mov.w	r2, r3, lsr #19
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <xor128+0x6c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	405a      	eors	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ea4f 2113 	mov.w	r1, r3, lsr #8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ea81 0303 	eor.w	r3, r1, r3
 8001316:	405a      	eors	r2, r3
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <xor128+0x6c>)
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <xor128+0x6c>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	f107 070c 	add.w	r7, r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000140 	.word	0x20000140
 8001330:	20000144 	.word	0x20000144
 8001334:	20000148 	.word	0x20000148
 8001338:	2000014c 	.word	0x2000014c

0800133c <op_system>:

static void op_system (word opcode) {
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
	switch ((byte)opcode) {
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2be0      	cmp	r3, #224	; 0xe0
 800134c:	d002      	beq.n	8001354 <op_system+0x18>
 800134e:	2bee      	cmp	r3, #238	; 0xee
 8001350:	d017      	beq.n	8001382 <op_system+0x46>
 8001352:	e028      	b.n	80013a6 <op_system+0x6a>
	case 0xe0:
	{
		word i;
		for(i = 0; i < 2048; ++i)
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	e008      	b.n	800136e <op_system+0x32>
			gfx[i] = 0;
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <op_system+0x74>)
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	54d1      	strb	r1, [r2, r3]
static void op_system (word opcode) {
	switch ((byte)opcode) {
	case 0xe0:
	{
		word i;
		for(i = 0; i < 2048; ++i)
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	f103 0301 	add.w	r3, r3, #1
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	89fa      	ldrh	r2, [r7, #14]
 8001370:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001374:	429a      	cmp	r2, r3
 8001376:	d9f1      	bls.n	800135c <op_system+0x20>
			gfx[i] = 0;
		drawFlag =true;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <op_system+0x78>)
 800137a:	f04f 0201 	mov.w	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
	} break;
 8001380:	e011      	b.n	80013a6 <op_system+0x6a>
	case 0xee:
	{
		--chip8_cpu.sp;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <op_system+0x7c>)
 8001384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001386:	f103 33ff 	add.w	r3, r3, #4294967295
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <op_system+0x7c>)
 800138e:	86da      	strh	r2, [r3, #54]	; 0x36
		chip8_cpu.pc = chip8_cpu.stack[chip8_cpu.sp];
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <op_system+0x7c>)
 8001392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001394:	461a      	mov	r2, r3
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <op_system+0x7c>)
 8001398:	f102 0208 	add.w	r2, r2, #8
 800139c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <op_system+0x7c>)
 80013a2:	869a      	strh	r2, [r3, #52]	; 0x34

	} break;
 80013a4:	bf00      	nop
  }
}
 80013a6:	f107 0714 	add.w	r7, r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20001504 	.word	0x20001504
 80013b4:	200014ec 	.word	0x200014ec
 80013b8:	200004b0 	.word	0x200004b0

080013bc <op_jmp>:
static void op_jmp (word opcode) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
	chip8_cpu.pc = opcode;
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <op_jmp+0x1c>)
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80013cc:	f107 070c 	add.w	r7, r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200004b0 	.word	0x200004b0

080013dc <op_call>:
static void op_call (word opcode) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	chip8_cpu.stack[chip8_cpu.sp] = chip8_cpu.pc;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <op_call+0x48>)
 80013e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <op_call+0x48>)
 80013ee:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <op_call+0x48>)
 80013f2:	f102 0208 	add.w	r2, r2, #8
 80013f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	chip8_cpu.sp+=1;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <op_call+0x48>)
 80013fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013fe:	f103 0301 	add.w	r3, r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <op_call+0x48>)
 8001406:	86da      	strh	r2, [r3, #54]	; 0x36
	chip8_cpu.pc = opcode & 0x0FFF;
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800140e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <op_call+0x48>)
 8001416:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8001418:	f107 070c 	add.w	r7, r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200004b0 	.word	0x200004b0

08001428 <op_skeq_const>:
static void op_skeq_const (word opcode) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
	if (get_reg_value(opcode)==(opcode&0xff)) chip8_cpu.pc+=2;
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <op_skeq_const+0x40>)
 800143e:	18d3      	adds	r3, r2, r3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800144a:	429a      	cmp	r2, r3
 800144c:	d106      	bne.n	800145c <op_skeq_const+0x34>
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <op_skeq_const+0x40>)
 8001450:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001452:	f103 0302 	add.w	r3, r3, #2
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <op_skeq_const+0x40>)
 800145a:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800145c:	f107 070c 	add.w	r7, r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200004b0 	.word	0x200004b0

0800146c <op_skne_const>:
static void op_skne_const (word opcode) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	if (get_reg_value(opcode)!=(opcode&0xff)) chip8_cpu.pc+=2;
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <op_skne_const+0x40>)
 8001482:	18d3      	adds	r3, r2, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800148e:	429a      	cmp	r2, r3
 8001490:	d006      	beq.n	80014a0 <op_skne_const+0x34>
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <op_skne_const+0x40>)
 8001494:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001496:	f103 0302 	add.w	r3, r3, #2
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <op_skne_const+0x40>)
 800149e:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80014a0:	f107 070c 	add.w	r7, r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200004b0 	.word	0x200004b0

080014b0 <op_skeq_reg>:
static void op_skeq_reg (word opcode) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
	if (get_reg_value(opcode)==get_reg_value_2(opcode)) chip8_cpu.pc+=2;
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <op_skeq_reg+0x48>)
 80014c6:	18d3      	adds	r3, r2, r3
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f003 010f 	and.w	r1, r3, #15
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <op_skeq_reg+0x48>)
 80014d8:	18cb      	adds	r3, r1, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d106      	bne.n	80014ee <op_skeq_reg+0x3e>
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <op_skeq_reg+0x48>)
 80014e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80014e4:	f103 0302 	add.w	r3, r3, #2
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <op_skeq_reg+0x48>)
 80014ec:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80014ee:	f107 070c 	add.w	r7, r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	200004b0 	.word	0x200004b0

080014fc <op_mov_const>:
static void op_mov_const (word opcode) {
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
	*get_reg_offset(opcode)=opcode&0xff;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <op_mov_const+0x28>)
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	f107 070c 	add.w	r7, r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	200004b0 	.word	0x200004b0

08001528 <op_add_const>:
static void op_add_const (word opcode) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
	*get_reg_offset(opcode)+=opcode&0xff;
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <op_add_const+0x3c>)
 800153e:	18d3      	adds	r3, r2, r3
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001546:	b292      	uxth	r2, r2
 8001548:	4611      	mov	r1, r2
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <op_add_const+0x3c>)
 800154c:	188a      	adds	r2, r1, r2
 800154e:	7811      	ldrb	r1, [r2, #0]
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	188a      	adds	r2, r1, r2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
}
 800155a:	f107 070c 	add.w	r7, r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200004b0 	.word	0x200004b0

08001568 <op_skne_reg>:

static void op_skne_reg (word opcode) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
	if (get_reg_value(opcode)!=get_reg_value_2(opcode)) chip8_cpu.pc+=2;
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <op_skne_reg+0x48>)
 800157e:	18d3      	adds	r3, r2, r3
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001588:	b29b      	uxth	r3, r3
 800158a:	f003 010f 	and.w	r1, r3, #15
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <op_skne_reg+0x48>)
 8001590:	18cb      	adds	r3, r1, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d006      	beq.n	80015a6 <op_skne_reg+0x3e>
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <op_skne_reg+0x48>)
 800159a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800159c:	f103 0302 	add.w	r3, r3, #2
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <op_skne_reg+0x48>)
 80015a4:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80015a6:	f107 070c 	add.w	r7, r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	200004b0 	.word	0x200004b0

080015b4 <op_mvi>:
static void op_mvi (word opcode) {
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	chip8_cpu.i=opcode;
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <op_mvi+0x1c>)
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80015c4:	f107 070c 	add.w	r7, r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200004b0 	.word	0x200004b0

080015d4 <op_jmi>:
static void op_jmi (word opcode) {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
	chip8_cpu.pc=opcode+chip8_cpu.V[0];
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <op_jmi+0x24>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	18d3      	adds	r3, r2, r3
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <op_jmi+0x24>)
 80015ec:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80015ee:	f107 070c 	add.w	r7, r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	200004b0 	.word	0x200004b0

080015fc <op_rand>:
static void op_rand (word opcode) {
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	*get_reg_offset(opcode)= xor128()&(opcode&0xff);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <op_rand+0x34>)
 8001612:	18d4      	adds	r4, r2, r3
 8001614:	f7ff fe5a 	bl	80012cc <xor128>
 8001618:	4603      	mov	r3, r0
 800161a:	b2da      	uxtb	r2, r3
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	ea02 0303 	and.w	r3, r2, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	7023      	strb	r3, [r4, #0]
}
 8001628:	f107 070c 	add.w	r7, r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	200004b0 	.word	0x200004b0

08001634 <op_sprite>:
static void op_sprite (word opcode) {
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]

	chip8_cpu.V[0xF]=0;*/
	 byte *q;
	 byte n,x,x2,y,collision;
	 word p;
	 x=get_reg_value(opcode)&63;
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <op_sprite+0x108>)
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001652:	737b      	strb	r3, [r7, #13]
	 y=get_reg_value_2(opcode)&31;
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800165a:	b29b      	uxth	r3, r3
 800165c:	f003 020f 	and.w	r2, r3, #15
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <op_sprite+0x108>)
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	747b      	strb	r3, [r7, #17]
	 p=chip8_cpu.i;
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <op_sprite+0x108>)
 800166e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001670:	81fb      	strh	r3, [r7, #14]
	 q=gfx+y*64;
 8001672:	7c7b      	ldrb	r3, [r7, #17]
 8001674:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8001678:	461a      	mov	r2, r3
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <op_sprite+0x10c>)
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
	 n=opcode&0x0f;
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	74fb      	strb	r3, [r7, #19]
	 if (n+y>32) n=32-y;
 800168a:	7cfa      	ldrb	r2, [r7, #19]
 800168c:	7c7b      	ldrb	r3, [r7, #17]
 800168e:	18d3      	adds	r3, r2, r3
 8001690:	2b20      	cmp	r3, #32
 8001692:	dd03      	ble.n	800169c <op_sprite+0x68>
 8001694:	7c7b      	ldrb	r3, [r7, #17]
 8001696:	f1c3 0320 	rsb	r3, r3, #32
 800169a:	74fb      	strb	r3, [r7, #19]
	 for (collision=1;n;--n,q+=64)
 800169c:	f04f 0301 	mov.w	r3, #1
 80016a0:	743b      	strb	r3, [r7, #16]
 80016a2:	e038      	b.n	8001716 <op_sprite+0xe2>
	 {
	  for (y=read_mem(p++),x2=x;y;y<<=1,x2=(x2+1)&63)
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80016aa:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <op_sprite+0x110>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	747b      	strb	r3, [r7, #17]
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	f103 0301 	add.w	r3, r3, #1
 80016ba:	81fb      	strh	r3, [r7, #14]
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	74bb      	strb	r3, [r7, #18]
 80016c0:	e01e      	b.n	8001700 <op_sprite+0xcc>
	   if (y&0x80) collision&=(q[x2]^=0xff);
 80016c2:	7c7b      	ldrb	r3, [r7, #17]
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da0f      	bge.n	80016ea <op_sprite+0xb6>
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	7cba      	ldrb	r2, [r7, #18]
 80016d2:	6979      	ldr	r1, [r7, #20]
 80016d4:	188a      	adds	r2, r1, r2
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	ea6f 0202 	mvn.w	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	7c3b      	ldrb	r3, [r7, #16]
 80016e4:	ea02 0303 	and.w	r3, r2, r3
 80016e8:	743b      	strb	r3, [r7, #16]
	 q=gfx+y*64;
	 n=opcode&0x0f;
	 if (n+y>32) n=32-y;
	 for (collision=1;n;--n,q+=64)
	 {
	  for (y=read_mem(p++),x2=x;y;y<<=1,x2=(x2+1)&63)
 80016ea:	7c7b      	ldrb	r3, [r7, #17]
 80016ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80016f0:	747b      	strb	r3, [r7, #17]
 80016f2:	7cbb      	ldrb	r3, [r7, #18]
 80016f4:	f103 0301 	add.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fe:	74bb      	strb	r3, [r7, #18]
 8001700:	7c7b      	ldrb	r3, [r7, #17]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1dd      	bne.n	80016c2 <op_sprite+0x8e>
	 y=get_reg_value_2(opcode)&31;
	 p=chip8_cpu.i;
	 q=gfx+y*64;
	 n=opcode&0x0f;
	 if (n+y>32) n=32-y;
	 for (collision=1;n;--n,q+=64)
 8001706:	7cfb      	ldrb	r3, [r7, #19]
 8001708:	f103 33ff 	add.w	r3, r3, #4294967295
 800170c:	74fb      	strb	r3, [r7, #19]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	7cfb      	ldrb	r3, [r7, #19]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1c3      	bne.n	80016a4 <op_sprite+0x70>
	 {
	  for (y=read_mem(p++),x2=x;y;y<<=1,x2=(x2+1)&63)
	   if (y&0x80) collision&=(q[x2]^=0xff);
	 }
	 chip8_cpu.V[15]=collision^1;
 800171c:	7c3b      	ldrb	r3, [r7, #16]
 800171e:	f083 0301 	eor.w	r3, r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <op_sprite+0x108>)
 8001726:	73da      	strb	r2, [r3, #15]
	 drawFlag = true;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <op_sprite+0x114>)
 800172a:	f04f 0201 	mov.w	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
		}
	}

	drawFlag = true;*/

}
 8001730:	f107 071c 	add.w	r7, r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200004b0 	.word	0x200004b0
 8001740:	20001504 	.word	0x20001504
 8001744:	200004ec 	.word	0x200004ec
 8001748:	200014ec 	.word	0x200014ec

0800174c <op_key>:
static void op_key (word opcode) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
	switch(opcode & 0x00FF) {
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800175c:	2b9e      	cmp	r3, #158	; 0x9e
 800175e:	d002      	beq.n	8001766 <op_key+0x1a>
 8001760:	2ba1      	cmp	r3, #161	; 0xa1
 8001762:	d014      	beq.n	800178e <op_key+0x42>
 8001764:	e028      	b.n	80017b8 <op_key+0x6c>
	case 0x009E:
		if(key[get_reg_value(opcode)] !=0) chip8_cpu.pc +=2;
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <op_key+0x78>)
 8001772:	18d3      	adds	r3, r2, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <op_key+0x7c>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01b      	beq.n	80017b6 <op_key+0x6a>
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <op_key+0x78>)
 8001780:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001782:	f103 0302 	add.w	r3, r3, #2
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <op_key+0x78>)
 800178a:	869a      	strh	r2, [r3, #52]	; 0x34
	break;
 800178c:	e014      	b.n	80017b8 <op_key+0x6c>

	case 0x00A1:
		if(key[get_reg_value(opcode)] ==0) chip8_cpu.pc +=2;
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <op_key+0x78>)
 800179a:	18d3      	adds	r3, r2, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <op_key+0x7c>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d108      	bne.n	80017b8 <op_key+0x6c>
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <op_key+0x78>)
 80017a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80017aa:	f103 0302 	add.w	r3, r3, #2
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <op_key+0x78>)
 80017b2:	869a      	strh	r2, [r3, #52]	; 0x34
 80017b4:	e000      	b.n	80017b8 <op_key+0x6c>
}
static void op_key (word opcode) {
	switch(opcode & 0x00FF) {
	case 0x009E:
		if(key[get_reg_value(opcode)] !=0) chip8_cpu.pc +=2;
	break;
 80017b6:	bf00      	nop

	case 0x00A1:
		if(key[get_reg_value(opcode)] ==0) chip8_cpu.pc +=2;
	}

}
 80017b8:	f107 070c 	add.w	r7, r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200004b0 	.word	0x200004b0
 80017c8:	200014f0 	.word	0x200014f0

080017cc <op_misc>:
static void op_misc (word opcode)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 byte *reg,i,j;
 reg=get_reg_offset(opcode);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <op_misc+0x1fc>)
 80017e2:	18d3      	adds	r3, r2, r3
 80017e4:	60bb      	str	r3, [r7, #8]
 switch ((byte)opcode)
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b1e      	cmp	r3, #30
 80017ec:	d055      	beq.n	800189a <op_misc+0xce>
 80017ee:	2b1e      	cmp	r3, #30
 80017f0:	dc0b      	bgt.n	800180a <op_misc+0x3e>
 80017f2:	2b0a      	cmp	r3, #10
 80017f4:	d01d      	beq.n	8001832 <op_misc+0x66>
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	dc02      	bgt.n	8001800 <op_misc+0x34>
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d013      	beq.n	8001826 <op_misc+0x5a>
 80017fe:	e112      	b.n	8001a26 <op_misc+0x25a>
 8001800:	2b15      	cmp	r3, #21
 8001802:	d03e      	beq.n	8001882 <op_misc+0xb6>
 8001804:	2b18      	cmp	r3, #24
 8001806:	d042      	beq.n	800188e <op_misc+0xc2>
 8001808:	e10d      	b.n	8001a26 <op_misc+0x25a>
 800180a:	2b33      	cmp	r3, #51	; 0x33
 800180c:	d05b      	beq.n	80018c6 <op_misc+0xfa>
 800180e:	2b33      	cmp	r3, #51	; 0x33
 8001810:	dc02      	bgt.n	8001818 <op_misc+0x4c>
 8001812:	2b29      	cmp	r3, #41	; 0x29
 8001814:	d04a      	beq.n	80018ac <op_misc+0xe0>
 8001816:	e106      	b.n	8001a26 <op_misc+0x25a>
 8001818:	2b55      	cmp	r3, #85	; 0x55
 800181a:	f000 8095 	beq.w	8001948 <op_misc+0x17c>
 800181e:	2b65      	cmp	r3, #101	; 0x65
 8001820:	f000 80c5 	beq.w	80019ae <op_misc+0x1e2>
 8001824:	e0ff      	b.n	8001a26 <op_misc+0x25a>
 {
  case 0x07:
   *reg=chip8_cpu.delay;
 8001826:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <op_misc+0x1fc>)
 8001828:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	701a      	strb	r2, [r3, #0]
   break;
 8001830:	e0f9      	b.n	8001a26 <op_misc+0x25a>
  case 0x0a:
  	  {
	  bool chip8_key_pressed =false;
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	737b      	strb	r3, [r7, #13]
	  for(i = 0; i < 16; ++i) {
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e00e      	b.n	800185e <op_misc+0x92>
			if(key[i] != 0)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	4a62      	ldr	r2, [pc, #392]	; (80019cc <op_misc+0x200>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <op_misc+0x8a>
			{
				*reg = i;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	701a      	strb	r2, [r3, #0]
				chip8_key_pressed = true;
 8001850:	f04f 0301 	mov.w	r3, #1
 8001854:	737b      	strb	r3, [r7, #13]
   *reg=chip8_cpu.delay;
   break;
  case 0x0a:
  	  {
	  bool chip8_key_pressed =false;
	  for(i = 0; i < 16; ++i) {
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	f103 0301 	add.w	r3, r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d9ed      	bls.n	8001840 <op_misc+0x74>
			{
				*reg = i;
				chip8_key_pressed = true;
			}
	  }
	  if (!chip8_key_pressed)
 8001864:	7b7b      	ldrb	r3, [r7, #13]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80d9 	beq.w	8001a24 <op_misc+0x258>
		  chip8_cpu.pc-=2;
 8001872:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <op_misc+0x1fc>)
 8001874:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001876:	f1a3 0302 	sub.w	r3, r3, #2
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <op_misc+0x1fc>)
 800187e:	869a      	strh	r2, [r3, #52]	; 0x34
  	  }
  break;
 8001880:	e0d1      	b.n	8001a26 <op_misc+0x25a>
  case 0x15:
   chip8_cpu.delay=*reg;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <op_misc+0x1fc>)
 8001888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   break;
 800188c:	e0cb      	b.n	8001a26 <op_misc+0x25a>
  case 0x18:
  {
   chip8_cpu.sound=*reg;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <op_misc+0x1fc>)
 8001894:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   //if (chip8_cpu.sound) chip8_sound_on();
  }
   break;
 8001898:	e0c5      	b.n	8001a26 <op_misc+0x25a>
  case 0x1e:
	  chip8_cpu.i+=(*reg);
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <op_misc+0x1fc>)
 800189c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	18d3      	adds	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <op_misc+0x1fc>)
 80018a8:	865a      	strh	r2, [r3, #50]	; 0x32
   break;
 80018aa:	e0bc      	b.n	8001a26 <op_misc+0x25a>
  case 0x29:
   chip8_cpu.i=((word)(*reg&0x0f))*5;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80018bc:	18d3      	adds	r3, r2, r3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <op_misc+0x1fc>)
 80018c2:	865a      	strh	r2, [r3, #50]	; 0x32
   break;
 80018c4:	e0af      	b.n	8001a26 <op_misc+0x25a>
  case 0x33:
   i=*reg;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	73fb      	strb	r3, [r7, #15]
   for (j=0;i>=100;i-=100) j++;
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	e007      	b.n	80018e4 <op_misc+0x118>
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	f103 0301 	add.w	r3, r3, #1
 80018da:	73bb      	strb	r3, [r7, #14]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	f1a3 0364 	sub.w	r3, r3, #100	; 0x64
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b63      	cmp	r3, #99	; 0x63
 80018e8:	d8f4      	bhi.n	80018d4 <op_misc+0x108>
   write_mem (chip8_cpu.i,j);
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <op_misc+0x1fc>)
 80018ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018ee:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80018f2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80018f6:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <op_misc+0x204>)
 80018f8:	7bb9      	ldrb	r1, [r7, #14]
 80018fa:	54d1      	strb	r1, [r2, r3]
   for (j=0;i>=10;i-=10) j++;
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	73bb      	strb	r3, [r7, #14]
 8001902:	e007      	b.n	8001914 <op_misc+0x148>
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	f103 0301 	add.w	r3, r3, #1
 800190a:	73bb      	strb	r3, [r7, #14]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f1a3 030a 	sub.w	r3, r3, #10
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b09      	cmp	r3, #9
 8001918:	d8f4      	bhi.n	8001904 <op_misc+0x138>
   write_mem (chip8_cpu.i+1,j);
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <op_misc+0x1fc>)
 800191c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800191e:	f103 0301 	add.w	r3, r3, #1
 8001922:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001926:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800192a:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <op_misc+0x204>)
 800192c:	7bb9      	ldrb	r1, [r7, #14]
 800192e:	54d1      	strb	r1, [r2, r3]
   write_mem (chip8_cpu.i+2,i);
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <op_misc+0x1fc>)
 8001932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001934:	f103 0302 	add.w	r3, r3, #2
 8001938:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800193c:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001940:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <op_misc+0x204>)
 8001942:	7bf9      	ldrb	r1, [r7, #15]
 8001944:	54d1      	strb	r1, [r2, r3]
   break;
 8001946:	e06e      	b.n	8001a26 <op_misc+0x25a>
  case 0x55:
  {
   for (i=0,j=(opcode>>8)&0x0f;i<=j;++i)
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	73bb      	strb	r3, [r7, #14]
 800195e:	e011      	b.n	8001984 <op_misc+0x1b8>
    write_mem(chip8_cpu.i+i,chip8_cpu.V[i]);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <op_misc+0x1fc>)
 8001962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001964:	461a      	mov	r2, r3
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	18d3      	adds	r3, r2, r3
 800196a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800196e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	4914      	ldr	r1, [pc, #80]	; (80019c8 <op_misc+0x1fc>)
 8001976:	5c89      	ldrb	r1, [r1, r2]
 8001978:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <op_misc+0x204>)
 800197a:	54d1      	strb	r1, [r2, r3]
   write_mem (chip8_cpu.i+1,j);
   write_mem (chip8_cpu.i+2,i);
   break;
  case 0x55:
  {
   for (i=0,j=(opcode>>8)&0x0f;i<=j;++i)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	f103 0301 	add.w	r3, r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	429a      	cmp	r2, r3
 800198a:	d9e9      	bls.n	8001960 <op_misc+0x194>
    write_mem(chip8_cpu.i+i,chip8_cpu.V[i]);
   chip8_cpu.i += ((opcode>>8)&0x0f)+1; // ?
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <op_misc+0x1fc>)
 800198e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001996:	b29b      	uxth	r3, r3
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	b29b      	uxth	r3, r3
 800199e:	18d3      	adds	r3, r2, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f103 0301 	add.w	r3, r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <op_misc+0x1fc>)
 80019aa:	865a      	strh	r2, [r3, #50]	; 0x32
  }
   break;
 80019ac:	e03b      	b.n	8001a26 <op_misc+0x25a>
  case 0x65:
  {
   for (i=0,j=(opcode>>8)&0x0f;i<=j;++i)
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	73bb      	strb	r3, [r7, #14]
 80019c4:	e018      	b.n	80019f8 <op_misc+0x22c>
 80019c6:	bf00      	nop
 80019c8:	200004b0 	.word	0x200004b0
 80019cc:	200014f0 	.word	0x200014f0
 80019d0:	200004ec 	.word	0x200004ec
    chip8_cpu.V[i]=read_mem(chip8_cpu.i+i);
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <op_misc+0x264>)
 80019d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80019da:	4619      	mov	r1, r3
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	18cb      	adds	r3, r1, r3
 80019e0:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80019e4:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80019e8:	4912      	ldr	r1, [pc, #72]	; (8001a34 <op_misc+0x268>)
 80019ea:	5cc9      	ldrb	r1, [r1, r3]
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <op_misc+0x264>)
 80019ee:	5499      	strb	r1, [r3, r2]
   chip8_cpu.i += ((opcode>>8)&0x0f)+1; // ?
  }
   break;
  case 0x65:
  {
   for (i=0,j=(opcode>>8)&0x0f;i<=j;++i)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f103 0301 	add.w	r3, r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d9e9      	bls.n	80019d4 <op_misc+0x208>
    chip8_cpu.V[i]=read_mem(chip8_cpu.i+i);
   chip8_cpu.i += ((opcode>>8)&0x0f)+1; //?
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <op_misc+0x264>)
 8001a02:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	18d3      	adds	r3, r2, r3
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f103 0301 	add.w	r3, r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <op_misc+0x264>)
 8001a1e:	865a      	strh	r2, [r3, #50]	; 0x32
  }
   break;
 8001a20:	bf00      	nop
 8001a22:	e000      	b.n	8001a26 <op_misc+0x25a>
			}
	  }
	  if (!chip8_key_pressed)
		  chip8_cpu.pc-=2;
  	  }
  break;
 8001a24:	bf00      	nop
    chip8_cpu.V[i]=read_mem(chip8_cpu.i+i);
   chip8_cpu.i += ((opcode>>8)&0x0f)+1; //?
  }
   break;
 }
}
 8001a26:	f107 0714 	add.w	r7, r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	200004b0 	.word	0x200004b0
 8001a34:	200004ec 	.word	0x200004ec

08001a38 <math_mov>:

//Math function

static void math_mov (byte *reg1,byte reg2) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
	*reg1=reg2;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	701a      	strb	r2, [r3, #0]

}
 8001a4a:	f107 070c 	add.w	r7, r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <math_or>:
static void math_or (byte *reg1,byte reg2) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
	*reg1|=reg2;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	ea42 0303 	orr.w	r3, r2, r3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	701a      	strb	r2, [r3, #0]

}
 8001a70:	f107 070c 	add.w	r7, r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <math_and>:
static void math_and (byte *reg1,byte reg2) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
	*reg1&=reg2;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	ea02 0303 	and.w	r3, r2, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	701a      	strb	r2, [r3, #0]

}
 8001a98:	f107 070c 	add.w	r7, r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <math_xor>:
static void math_xor (byte *reg1,byte reg2) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
	*reg1^=reg2;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	ea82 0303 	eor.w	r3, r2, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	701a      	strb	r2, [r3, #0]

}
 8001ac0:	f107 070c 	add.w	r7, r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <math_add>:
static void math_add (byte *reg1,byte reg2) {
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
	word tmp;
	tmp=*reg1+reg2;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	18d3      	adds	r3, r2, r3
 8001ae4:	81fb      	strh	r3, [r7, #14]
	*reg1=(byte)tmp;
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	701a      	strb	r2, [r3, #0]
	chip8_cpu.V[15]=tmp>>8;
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <math_add+0x3c>)
 8001afa:	73da      	strb	r2, [r3, #15]

}
 8001afc:	f107 0714 	add.w	r7, r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200004b0 	.word	0x200004b0

08001b0c <math_sub>:
static void math_sub (byte *reg1,byte reg2) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
	word tmp;
	tmp=*reg1-reg2;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	81fb      	strh	r3, [r7, #14]
	*reg1=(byte)tmp;
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	701a      	strb	r2, [r3, #0]
	chip8_cpu.V[15]=((byte)(tmp>>8))+1;
 8001b2e:	89fb      	ldrh	r3, [r7, #14]
 8001b30:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f103 0301 	add.w	r3, r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <math_sub+0x40>)
 8001b40:	73da      	strb	r2, [r3, #15]

}
 8001b42:	f107 0714 	add.w	r7, r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	200004b0 	.word	0x200004b0

08001b50 <math_shr>:
static void math_shr (byte *reg1,byte reg2) {
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
	chip8_cpu.V[15]=*reg1&1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <math_shr+0x34>)
 8001b68:	73da      	strb	r2, [r3, #15]
	*reg1>>=1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	701a      	strb	r2, [r3, #0]
}
 8001b78:	f107 070c 	add.w	r7, r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200004b0 	.word	0x200004b0

08001b88 <math_rsb>:
static void math_rsb (byte *reg1,byte reg2) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
	word tmp;
	tmp=reg2-*reg1;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	81fb      	strh	r3, [r7, #14]
	*reg1=(byte)tmp;
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	701a      	strb	r2, [r3, #0]
	chip8_cpu.V[15]=((byte)(tmp>>8))+1;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f103 0301 	add.w	r3, r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <math_rsb+0x40>)
 8001bba:	73da      	strb	r2, [r3, #15]
}
 8001bbc:	f107 0714 	add.w	r7, r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200004b0 	.word	0x200004b0

08001bcc <math_nop>:
static void math_nop (byte *reg1,byte reg2) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]

}
 8001bd8:	f107 070c 	add.w	r7, r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <math_shl>:
static void math_shl (byte *reg1,byte reg2) {
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
	chip8_cpu.V[15]=*reg1>>7;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <math_shl+0x34>)
 8001bfc:	73da      	strb	r2, [r3, #15]
	*reg1<<=1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	701a      	strb	r2, [r3, #0]
}
 8001c0c:	f107 070c 	add.w	r7, r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	200004b0 	.word	0x200004b0

08001c1c <init8>:


void init8() {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
	word i = 0;
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	80fb      	strh	r3, [r7, #6]

	// Program counter starts at 0x200 (Start adress program)
	chip8_cpu.pc = 0x200;
 8001c28:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <init8+0x12c>)
 8001c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2e:	869a      	strh	r2, [r3, #52]	; 0x34
	chip8_cpu.sp = 0;
 8001c30:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <init8+0x12c>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	86da      	strh	r2, [r3, #54]	; 0x36
	chip8_cpu.i = 0;
 8001c38:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <init8+0x12c>)
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	865a      	strh	r2, [r3, #50]	; 0x32
	chip8_cpu.delay = 0;
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <init8+0x12c>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	chip8_cpu.sound =0;
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <init8+0x12c>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//Clear display
	for(i = 0; i < 2048; ++i)
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	80fb      	strh	r3, [r7, #6]
 8001c5a:	e008      	b.n	8001c6e <init8+0x52>
		gfx[i] = 0;
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <init8+0x130>)
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	54d1      	strb	r1, [r2, r3]
	chip8_cpu.i = 0;
	chip8_cpu.delay = 0;
	chip8_cpu.sound =0;

	//Clear display
	for(i = 0; i < 2048; ++i)
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f103 0301 	add.w	r3, r3, #1
 8001c6c:	80fb      	strh	r3, [r7, #6]
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d9f1      	bls.n	8001c5c <init8+0x40>
		gfx[i] = 0;

	//Clear registers
	for(i = 0; i < 16; ++i)
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	80fb      	strh	r3, [r7, #6]
 8001c7e:	e008      	b.n	8001c92 <init8+0x76>
		chip8_cpu.V[i] = 0;
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <init8+0x12c>)
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	54d1      	strb	r1, [r2, r3]
	//Clear display
	for(i = 0; i < 2048; ++i)
		gfx[i] = 0;

	//Clear registers
	for(i = 0; i < 16; ++i)
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f103 0301 	add.w	r3, r3, #1
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d9f3      	bls.n	8001c80 <init8+0x64>
		chip8_cpu.V[i] = 0;

	//Clear stack
	for(i = 0; i < 16; ++i)
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	e00b      	b.n	8001cb8 <init8+0x9c>
		chip8_cpu.stack[i] = 0;
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <init8+0x12c>)
 8001ca4:	f102 0208 	add.w	r2, r2, #8
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	//Clear registers
	for(i = 0; i < 16; ++i)
		chip8_cpu.V[i] = 0;

	//Clear stack
	for(i = 0; i < 16; ++i)
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	f103 0301 	add.w	r3, r3, #1
 8001cb6:	80fb      	strh	r3, [r7, #6]
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	d9f0      	bls.n	8001ca0 <init8+0x84>
		chip8_cpu.stack[i] = 0;

	//Clear memory
	for(i = 0; i < CHIP8_RAM; ++i)
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	e008      	b.n	8001cd8 <init8+0xbc>
		memory[i] = 0;
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <init8+0x134>)
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	54d1      	strb	r1, [r2, r3]
	//Clear stack
	for(i = 0; i < 16; ++i)
		chip8_cpu.stack[i] = 0;

	//Clear memory
	for(i = 0; i < CHIP8_RAM; ++i)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	f103 0301 	add.w	r3, r3, #1
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d9f1      	bls.n	8001cc6 <init8+0xaa>
		memory[i] = 0;

	//Clear status of key
	for(i = 0; i < 16; ++i)
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	80fb      	strh	r3, [r7, #6]
 8001ce8:	e008      	b.n	8001cfc <init8+0xe0>
		key[i] = 0;
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <init8+0x138>)
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	54d1      	strb	r1, [r2, r3]
	//Clear memory
	for(i = 0; i < CHIP8_RAM; ++i)
		memory[i] = 0;

	//Clear status of key
	for(i = 0; i < 16; ++i)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	f103 0301 	add.w	r3, r3, #1
 8001cfa:	80fb      	strh	r3, [r7, #6]
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d9f3      	bls.n	8001cea <init8+0xce>
		key[i] = 0;

	// Write font to memory
	for(i = 0; i < 80; ++i)
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	80fb      	strh	r3, [r7, #6]
 8001d08:	e00d      	b.n	8001d26 <init8+0x10a>
		write_mem(i,chip8_fontset[i]);
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001d10:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	4910      	ldr	r1, [pc, #64]	; (8001d58 <init8+0x13c>)
 8001d18:	5c89      	ldrb	r1, [r1, r2]
 8001d1a:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <init8+0x134>)
 8001d1c:	54d1      	strb	r1, [r2, r3]
	//Clear status of key
	for(i = 0; i < 16; ++i)
		key[i] = 0;

	// Write font to memory
	for(i = 0; i < 80; ++i)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f103 0301 	add.w	r3, r3, #1
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	2b4f      	cmp	r3, #79	; 0x4f
 8001d2a:	d9ee      	bls.n	8001d0a <init8+0xee>
		write_mem(i,chip8_fontset[i]);

	running=1;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <init8+0x140>)
 8001d2e:	f04f 0201 	mov.w	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
	drawFlag = true;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <init8+0x144>)
 8001d36:	f04f 0201 	mov.w	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]

	//while (running) emulateCycle();

}
 8001d3c:	f107 070c 	add.w	r7, r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200004b0 	.word	0x200004b0
 8001d4c:	20001504 	.word	0x20001504
 8001d50:	200004ec 	.word	0x200004ec
 8001d54:	200014f0 	.word	0x200014f0
 8001d58:	08005e0c 	.word	0x08005e0c
 8001d5c:	200004e8 	.word	0x200004e8
 8001d60:	200014ec 	.word	0x200014ec

08001d64 <op_math>:
 math_nop
};


static void op_math (word opcode)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
 (*(math_opcodes[opcode&0x0f]))
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	f003 020f 	and.w	r2, r3, #15
        (get_reg_offset(opcode),get_reg_value_2(opcode));
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <op_math+0x44>)
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	88fa      	ldrh	r2, [r7, #6]
 8001d7c:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001d80:	b292      	uxth	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <op_math+0x48>)
 8001d86:	1889      	adds	r1, r1, r2
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	f002 000f 	and.w	r0, r2, #15
 8001d94:	4a05      	ldr	r2, [pc, #20]	; (8001dac <op_math+0x48>)
 8001d96:	1882      	adds	r2, r0, r2
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4798      	blx	r3
}
 8001da0:	f107 0708 	add.w	r7, r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200000c0 	.word	0x200000c0
 8001dac:	200004b0 	.word	0x200004b0

08001db0 <emulateCycle>:
		 op_key,
		 op_misc
};


void emulateCycle() {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
	word opcode;
	byte i;
	for (i=30;i;--i) {
 8001db6:	f04f 031e 	mov.w	r3, #30
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	e031      	b.n	8001e22 <emulateCycle+0x72>
	opcode=(read_mem(chip8_cpu.pc)<<8)+read_mem(chip8_cpu.pc+1);
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <emulateCycle+0xcc>)
 8001dc0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001dc2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001dc6:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001dca:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <emulateCycle+0xd0>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <emulateCycle+0xcc>)
 8001dd6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001dd8:	f103 0301 	add.w	r3, r3, #1
 8001ddc:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001de0:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001de4:	4926      	ldr	r1, [pc, #152]	; (8001e80 <emulateCycle+0xd0>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	80bb      	strh	r3, [r7, #4]
	chip8_cpu.pc+=2;
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <emulateCycle+0xcc>)
 8001dee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001df0:	f103 0302 	add.w	r3, r3, #2
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <emulateCycle+0xcc>)
 8001df8:	869a      	strh	r2, [r3, #52]	; 0x34
	(*(main_opcodes[opcode>>12]))(opcode&0x0fff);
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <emulateCycle+0xd4>)
 8001e06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001e10:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	4790      	blx	r2


void emulateCycle() {
	word opcode;
	byte i;
	for (i=30;i;--i) {
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ca      	bne.n	8001dbe <emulateCycle+0xe>
	opcode=(read_mem(chip8_cpu.pc)<<8)+read_mem(chip8_cpu.pc+1);
	chip8_cpu.pc+=2;
	(*(main_opcodes[opcode>>12]))(opcode&0x0fff);

	}
	if(chip8_cpu.delay > 0)
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <emulateCycle+0xcc>)
 8001e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <emulateCycle+0x94>
		--chip8_cpu.delay;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <emulateCycle+0xcc>)
 8001e34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e38:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <emulateCycle+0xcc>)
 8001e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if(chip8_cpu.sound > 0)
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <emulateCycle+0xcc>)
 8001e46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d011      	beq.n	8001e72 <emulateCycle+0xc2>
	{
		if(chip8_cpu.sound == 1)
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <emulateCycle+0xcc>)
 8001e50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d103      	bne.n	8001e60 <emulateCycle+0xb0>
			beep = true;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <emulateCycle+0xd8>)
 8001e5a:	f04f 0201 	mov.w	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]

		--chip8_cpu.sound;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <emulateCycle+0xcc>)
 8001e62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <emulateCycle+0xcc>)
 8001e6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
}
 8001e72:	f107 0708 	add.w	r7, r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200004b0 	.word	0x200004b0
 8001e80:	200004ec 	.word	0x200004ec
 8001e84:	20000100 	.word	0x20000100
 8001e88:	20001500 	.word	0x20001500

08001e8c <loadApplication>:



void loadApplication(const byte *programData, word len) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
	//byte i;
	//FLASH_Unlock();
	memcpy(memory+512, programData, len);
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <loadApplication+0x24>)
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7fe f995 	bl	80001d0 <memcpy>
		write_mem(512+i,c);

	}*/


}
 8001ea6:	f107 0708 	add.w	r7, r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200006ec 	.word	0x200006ec

08001eb4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <EXTI_Init+0xf8>)
 8001ec4:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	799b      	ldrb	r3, [r3, #6]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d059      	beq.n	8001f82 <EXTI_Init+0xce>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <EXTI_Init+0xf8>)
 8001ed0:	4a36      	ldr	r2, [pc, #216]	; (8001fac <EXTI_Init+0xf8>)
 8001ed2:	6811      	ldr	r1, [r2, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	ea6f 0202 	mvn.w	r2, r2
 8001edc:	ea01 0202 	and.w	r2, r1, r2
 8001ee0:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001ee2:	4b32      	ldr	r3, [pc, #200]	; (8001fac <EXTI_Init+0xf8>)
 8001ee4:	4a31      	ldr	r2, [pc, #196]	; (8001fac <EXTI_Init+0xf8>)
 8001ee6:	6851      	ldr	r1, [r2, #4]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	ea6f 0202 	mvn.w	r2, r2
 8001ef0:	ea01 0202 	and.w	r2, r1, r2
 8001ef4:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	18d3      	adds	r3, r2, r3
 8001efe:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6811      	ldr	r1, [r2, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	ea41 0202 	orr.w	r2, r1, r2
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <EXTI_Init+0xf8>)
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <EXTI_Init+0xf8>)
 8001f14:	6891      	ldr	r1, [r2, #8]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	ea6f 0202 	mvn.w	r2, r2
 8001f1e:	ea01 0202 	and.w	r2, r1, r2
 8001f22:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <EXTI_Init+0xf8>)
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <EXTI_Init+0xf8>)
 8001f28:	68d1      	ldr	r1, [r2, #12]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	ea6f 0202 	mvn.w	r2, r2
 8001f32:	ea01 0202 	and.w	r2, r1, r2
 8001f36:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	795b      	ldrb	r3, [r3, #5]
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d110      	bne.n	8001f62 <EXTI_Init+0xae>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <EXTI_Init+0xf8>)
 8001f42:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <EXTI_Init+0xf8>)
 8001f44:	6891      	ldr	r1, [r2, #8]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	ea41 0202 	orr.w	r2, r1, r2
 8001f4e:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <EXTI_Init+0xf8>)
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <EXTI_Init+0xf8>)
 8001f54:	68d1      	ldr	r1, [r2, #12]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	ea41 0202 	orr.w	r2, r1, r2
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	e01e      	b.n	8001fa0 <EXTI_Init+0xec>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <EXTI_Init+0xf8>)
 8001f64:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	795b      	ldrb	r3, [r3, #5]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	6811      	ldr	r1, [r2, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	ea41 0202 	orr.w	r2, r1, r2
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e00e      	b.n	8001fa0 <EXTI_Init+0xec>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	791b      	ldrb	r3, [r3, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	18d3      	adds	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	6811      	ldr	r1, [r2, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	ea6f 0202 	mvn.w	r2, r2
 8001f9a:	ea01 0202 	and.w	r2, r1, r2
 8001f9e:	601a      	str	r2, [r3, #0]
  }
}
 8001fa0:	f107 0714 	add.w	r7, r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010400 	.word	0x40010400

08001fb0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <EXTI_GetITStatus+0x50>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	ea02 0303 	and.w	r3, r2, r3
 8001fce:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <EXTI_GetITStatus+0x50>)
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	ea02 0303 	and.w	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <EXTI_GetITStatus+0x3c>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
 8001fe4:	f04f 0301 	mov.w	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	e002      	b.n	8001ff2 <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f107 0714 	add.w	r7, r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40010400 	.word	0x40010400

08002004 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <EXTI_ClearITPendingBit+0x18>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	615a      	str	r2, [r3, #20]
}
 8002012:	f107 070c 	add.w	r7, r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	78db      	ldrb	r3, [r3, #3]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	789b      	ldrb	r3, [r3, #2]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	ea42 0303 	orr.w	r3, r2, r3
 800206e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8002078:	2b00      	cmp	r3, #0
 800207a:	d051      	beq.n	8002120 <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e044      	b.n	8002114 <GPIO_Init+0xf4>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f04f 0201 	mov.w	r2, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	ea02 0303 	and.w	r3, r2, r3
 80020a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d12f      	bne.n	800210c <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020b2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f04f 020f 	mov.w	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	ea6f 0303 	mvn.w	r3, r3
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	ea02 0303 	and.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	ea42 0303 	orr.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	2b28      	cmp	r3, #40	; 0x28
 80020e4:	d107      	bne.n	80020f6 <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f04f 0201 	mov.w	r2, #1
 80020ec:	fa02 f203 	lsl.w	r2, r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	e00a      	b.n	800210c <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	78db      	ldrb	r3, [r3, #3]
 80020fa:	2b48      	cmp	r3, #72	; 0x48
 80020fc:	d106      	bne.n	800210c <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f04f 0201 	mov.w	r2, #1
 8002104:	fa02 f203 	lsl.w	r2, r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f103 0301 	add.w	r3, r3, #1
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b07      	cmp	r3, #7
 8002118:	d9b7      	bls.n	800208a <GPIO_Init+0x6a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2bff      	cmp	r3, #255	; 0xff
 8002126:	d956      	bls.n	80021d6 <GPIO_Init+0x1b6>
  {
    tmpreg = GPIOx->CRH;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	e049      	b.n	80021ca <GPIO_Init+0x1aa>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f103 0308 	add.w	r3, r3, #8
 800213c:	f04f 0201 	mov.w	r2, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	ea02 0303 	and.w	r3, r2, r3
 8002152:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d132      	bne.n	80021c2 <GPIO_Init+0x1a2>
      {
        pos = pinpos << 2;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002162:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f04f 020f 	mov.w	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	ea6f 0303 	mvn.w	r3, r3
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	ea02 0303 	and.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	ea42 0303 	orr.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	78db      	ldrb	r3, [r3, #3]
 8002192:	2b28      	cmp	r3, #40	; 0x28
 8002194:	d108      	bne.n	80021a8 <GPIO_Init+0x188>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f103 0308 	add.w	r3, r3, #8
 800219c:	f04f 0201 	mov.w	r2, #1
 80021a0:	fa02 f203 	lsl.w	r2, r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	2b48      	cmp	r3, #72	; 0x48
 80021ae:	d108      	bne.n	80021c2 <GPIO_Init+0x1a2>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f103 0308 	add.w	r3, r3, #8
 80021b6:	f04f 0201 	mov.w	r2, #1
 80021ba:	fa02 f203 	lsl.w	r2, r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f103 0301 	add.w	r3, r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d9b2      	bls.n	8002136 <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	605a      	str	r2, [r3, #4]
  }
}
 80021d6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	ea02 0303 	and.w	r3, r2, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8002200:	f04f 0301 	mov.w	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e002      	b.n	800220e <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	f107 0714 	add.w	r7, r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002228:	887a      	ldrh	r2, [r7, #2]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]
}
 800222e:	f107 070c 	add.w	r7, r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	615a      	str	r2, [r3, #20]
}
 800224a:	f107 070c 	add.w	r7, r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da03      	bge.n	8002286 <GPIO_PinRemapConfig+0x32>
  {
    tmpreg = AFIO->MAPR2;
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <GPIO_PinRemapConfig+0x100>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e002      	b.n	800228c <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <GPIO_PinRemapConfig+0x100>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002292:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002296:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800229e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80022a2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022ae:	d10a      	bne.n	80022c6 <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80022b6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80022b8:	4b26      	ldr	r3, [pc, #152]	; (8002354 <GPIO_PinRemapConfig+0x100>)
 80022ba:	4a26      	ldr	r2, [pc, #152]	; (8002354 <GPIO_PinRemapConfig+0x100>)
 80022bc:	6852      	ldr	r2, [r2, #4]
 80022be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	e028      	b.n	8002318 <GPIO_PinRemapConfig+0xc4>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d011      	beq.n	80022f4 <GPIO_PinRemapConfig+0xa0>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f04f 0203 	mov.w	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	ea6f 0303 	mvn.w	r3, r3
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	ea02 0303 	and.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e011      	b.n	8002318 <GPIO_PinRemapConfig+0xc4>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80022fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	ea6f 0303 	mvn.w	r3, r3
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	ea02 0303 	and.w	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002316:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <GPIO_PinRemapConfig+0xe2>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8002324:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	ea42 0303 	orr.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da03      	bge.n	8002344 <GPIO_PinRemapConfig+0xf0>
  {
    AFIO->MAPR2 = tmpreg;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <GPIO_PinRemapConfig+0x100>)
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	61da      	str	r2, [r3, #28]
 8002342:	e002      	b.n	800234a <GPIO_PinRemapConfig+0xf6>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <GPIO_PinRemapConfig+0x100>)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	605a      	str	r2, [r3, #4]
  }  
}
 800234a:	f107 071c 	add.w	r7, r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40010000 	.word	0x40010000

08002358 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8002358:	b490      	push	{r4, r7}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	71fa      	strb	r2, [r7, #7]
 8002364:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002376:	f04f 020f 	mov.w	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <GPIO_EXTILineConfig+0x98>)
 8002382:	79ba      	ldrb	r2, [r7, #6]
 8002384:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4919      	ldr	r1, [pc, #100]	; (80023f0 <GPIO_EXTILineConfig+0x98>)
 800238c:	79b8      	ldrb	r0, [r7, #6]
 800238e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8002392:	b2c0      	uxtb	r0, r0
 8002394:	f100 0002 	add.w	r0, r0, #2
 8002398:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	ea6f 0101 	mvn.w	r1, r1
 80023a2:	ea00 0101 	and.w	r1, r0, r1
 80023a6:	f102 0202 	add.w	r2, r2, #2
 80023aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <GPIO_EXTILineConfig+0x98>)
 80023b0:	79ba      	ldrb	r2, [r7, #6]
 80023b2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	490d      	ldr	r1, [pc, #52]	; (80023f0 <GPIO_EXTILineConfig+0x98>)
 80023ba:	79b8      	ldrb	r0, [r7, #6]
 80023bc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80023c0:	b2c0      	uxtb	r0, r0
 80023c2:	f100 0002 	add.w	r0, r0, #2
 80023c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80023ca:	79fc      	ldrb	r4, [r7, #7]
 80023cc:	79b9      	ldrb	r1, [r7, #6]
 80023ce:	f001 0103 	and.w	r1, r1, #3
 80023d2:	ea4f 0181 	mov.w	r1, r1, lsl #2
 80023d6:	fa04 f101 	lsl.w	r1, r4, r1
 80023da:	ea40 0101 	orr.w	r1, r0, r1
 80023de:	f102 0202 	add.w	r2, r2, #2
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80023e6:	f107 0710 	add.w	r7, r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc90      	pop	{r4, r7}
 80023ee:	4770      	bx	lr
 80023f0:	40010000 	.word	0x40010000

080023f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <RCC_APB2PeriphClockCmd+0x40>)
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <RCC_APB2PeriphClockCmd+0x40>)
 800240a:	6991      	ldr	r1, [r2, #24]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	ea41 0202 	orr.w	r2, r1, r2
 8002412:	619a      	str	r2, [r3, #24]
 8002414:	e008      	b.n	8002428 <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <RCC_APB2PeriphClockCmd+0x40>)
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <RCC_APB2PeriphClockCmd+0x40>)
 800241a:	6991      	ldr	r1, [r2, #24]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	ea6f 0202 	mvn.w	r2, r2
 8002422:	ea01 0202 	and.w	r2, r1, r2
 8002426:	619a      	str	r2, [r3, #24]
  }
}
 8002428:	f107 070c 	add.w	r7, r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000

08002438 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <RCC_APB1PeriphClockCmd+0x40>)
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <RCC_APB1PeriphClockCmd+0x40>)
 800244e:	69d1      	ldr	r1, [r2, #28]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	ea41 0202 	orr.w	r2, r1, r2
 8002456:	61da      	str	r2, [r3, #28]
 8002458:	e008      	b.n	800246c <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <RCC_APB1PeriphClockCmd+0x40>)
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <RCC_APB1PeriphClockCmd+0x40>)
 800245e:	69d1      	ldr	r1, [r2, #28]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	ea6f 0202 	mvn.w	r2, r2
 8002466:	ea01 0202 	and.w	r2, r1, r2
 800246a:	61da      	str	r2, [r3, #28]
  }
}
 800246c:	f107 070c 	add.w	r7, r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800247c:	2100      	movs	r1, #0
  b     LoopCopyDataInit
 800247e:	e003      	b.n	8002488 <LoopCopyDataInit>

08002480 <CopyDataInit>:

CopyDataInit:
  ldr   r3, =_sidata
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <LoopFillZerobss+0x10>)
  ldr   r3, [r3, r1]
 8002482:	585b      	ldr	r3, [r3, r1]
  str   r3, [r0, r1]
 8002484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002486:	3104      	adds	r1, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr   r0, =_sdata
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <LoopFillZerobss+0x14>)
  ldr   r3, =_edata
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 800248c:	1842      	adds	r2, r0, r1
  cmp   r2, r3
 800248e:	429a      	cmp	r2, r3
  bcc   CopyDataInit
 8002490:	d3f6      	bcc.n	8002480 <CopyDataInit>
  ldr   r2, =_sbss
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <LoopFillZerobss+0x1c>)
  b     LoopFillZerobss
 8002494:	e002      	b.n	800249c <LoopFillZerobss>

08002496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002496:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8002498:	f842 3b04 	str.w	r3, [r2], #4

0800249c <LoopFillZerobss>:

LoopFillZerobss:
  ldr   r3, = _ebss
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <LoopFillZerobss+0x20>)
  cmp   r2, r3
 800249e:	429a      	cmp	r2, r3
  bcc   FillZerobss
 80024a0:	d3f9      	bcc.n	8002496 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024a2:	f000 f96f 	bl	8002784 <SystemInit>
/* Call the application's entry point.*/
  bl    main
 80024a6:	f7fe f90d 	bl	80006c4 <main>
  bx    lr
 80024aa:	4770      	bx	lr
 80024ac:	080064b6 	.word	0x080064b6
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000154 	.word	0x20000154
 80024b8:	20000154 	.word	0x20000154
 80024bc:	20001d04 	.word	0x20001d04

080024c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_IRQHandler>
	...

080024c4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
}
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80024d4:	e7fe      	b.n	80024d4 <HardFault_Handler+0x4>
 80024d6:	bf00      	nop

080024d8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>
 80024de:	bf00      	nop

080024e0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80024e4:	e7fe      	b.n	80024e4 <BusFault_Handler+0x4>
 80024e6:	bf00      	nop

080024e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80024ec:	e7fe      	b.n	80024ec <UsageFault_Handler+0x4>
 80024ee:	bf00      	nop

080024f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
}
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop

080024fc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
}
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
}
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	SysTick_Worker();
 8002518:	f7fe fb92 	bl	8000c40 <SysTick_Worker>
}
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop

08002520 <EXTI2_IRQHandler>:
  * @brief  This function handles External line0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(EXTI_Line2) != RESET)
 8002524:	f04f 0004 	mov.w	r0, #4
 8002528:	f7ff fd42 	bl	8001fb0 <EXTI_GetITStatus>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <EXTI2_IRQHandler+0x2a>
  {
    /* Toggle LED3 */
     //STM32vldiscovery_LEDToggle(LED3);
	  //disp_string = "PD2 B4    ";
	  btn_state[B4] ++;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <EXTI2_IRQHandler+0x34>)
 8002534:	79db      	ldrb	r3, [r3, #7]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f103 0301 	add.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <EXTI2_IRQHandler+0x34>)
 8002540:	71da      	strb	r2, [r3, #7]

    /* Clear the User Button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line2);
 8002542:	f04f 0004 	mov.w	r0, #4
 8002546:	f7ff fd5d 	bl	8002004 <EXTI_ClearITPendingBit>
  }
  update_lcd = 1;
 800254a:	4b03      	ldr	r3, [pc, #12]	; (8002558 <EXTI2_IRQHandler+0x38>)
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
}
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000047c 	.word	0x2000047c
 8002558:	2000046c 	.word	0x2000046c

0800255c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(EXTI_Line3) != RESET)
 8002560:	f04f 0008 	mov.w	r0, #8
 8002564:	f7ff fd24 	bl	8001fb0 <EXTI_GetITStatus>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <EXTI3_IRQHandler+0x30>
  {
    /* Toggle LED3 */
     //STM32vldiscovery_LEDToggle(LED3);
	  disp_string = "PB3 B5    ";
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <EXTI3_IRQHandler+0x3c>)
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <EXTI3_IRQHandler+0x40>)
 8002572:	601a      	str	r2, [r3, #0]
	  btn_state[B5] ++;
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <EXTI3_IRQHandler+0x44>)
 8002576:	7a1b      	ldrb	r3, [r3, #8]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f103 0301 	add.w	r3, r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <EXTI3_IRQHandler+0x44>)
 8002582:	721a      	strb	r2, [r3, #8]
    /* Clear the User Button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line3);
 8002584:	f04f 0008 	mov.w	r0, #8
 8002588:	f7ff fd3c 	bl	8002004 <EXTI_ClearITPendingBit>
  }
  update_lcd = 1;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <EXTI3_IRQHandler+0x48>)
 800258e:	f04f 0201 	mov.w	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
}
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000478 	.word	0x20000478
 800259c:	08002a7c 	.word	0x08002a7c
 80025a0:	2000047c 	.word	0x2000047c
 80025a4:	2000046c 	.word	0x2000046c

080025a8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(EXTI_Line4) != RESET)
 80025ac:	f04f 0010 	mov.w	r0, #16
 80025b0:	f7ff fcfe 	bl	8001fb0 <EXTI_GetITStatus>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <EXTI4_IRQHandler+0x30>
  {
    /* Toggle LED3 */
     //STM32vldiscovery_LEDToggle(LED3);
	  disp_string = "PB4 B6    ";
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <EXTI4_IRQHandler+0x3c>)
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <EXTI4_IRQHandler+0x40>)
 80025be:	601a      	str	r2, [r3, #0]
	  btn_state[B6] ++;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <EXTI4_IRQHandler+0x44>)
 80025c2:	7a5b      	ldrb	r3, [r3, #9]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f103 0301 	add.w	r3, r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <EXTI4_IRQHandler+0x44>)
 80025ce:	725a      	strb	r2, [r3, #9]
    /* Clear the User Button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line4);
 80025d0:	f04f 0010 	mov.w	r0, #16
 80025d4:	f7ff fd16 	bl	8002004 <EXTI_ClearITPendingBit>
  }
  update_lcd = 1;
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <EXTI4_IRQHandler+0x48>)
 80025da:	f04f 0201 	mov.w	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
}
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000478 	.word	0x20000478
 80025e8:	08002a88 	.word	0x08002a88
 80025ec:	2000047c 	.word	0x2000047c
 80025f0:	2000046c 	.word	0x2000046c

080025f4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	  if(EXTI_GetITStatus(EXTI_Line5) != RESET)
 80025f8:	f04f 0020 	mov.w	r0, #32
 80025fc:	f7ff fcd8 	bl	8001fb0 <EXTI_GetITStatus>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00f      	beq.n	8002626 <EXTI9_5_IRQHandler+0x32>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PB5 B3    ";
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <EXTI9_5_IRQHandler+0xf4>)
 8002608:	4a38      	ldr	r2, [pc, #224]	; (80026ec <EXTI9_5_IRQHandler+0xf8>)
 800260a:	601a      	str	r2, [r3, #0]
		  btn_state[B3] ++;
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 800260e:	799b      	ldrb	r3, [r3, #6]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f103 0301 	add.w	r3, r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 800261a:	719a      	strb	r2, [r3, #6]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line5);
 800261c:	f04f 0020 	mov.w	r0, #32
 8002620:	f7ff fcf0 	bl	8002004 <EXTI_ClearITPendingBit>
 8002624:	e05a      	b.n	80026dc <EXTI9_5_IRQHandler+0xe8>
	  }
	  else if(EXTI_GetITStatus(EXTI_Line6) != RESET)
 8002626:	f04f 0040 	mov.w	r0, #64	; 0x40
 800262a:	f7ff fcc1 	bl	8001fb0 <EXTI_GetITStatus>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00f      	beq.n	8002654 <EXTI9_5_IRQHandler+0x60>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PB6 B2    ";
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <EXTI9_5_IRQHandler+0xf4>)
 8002636:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <EXTI9_5_IRQHandler+0x100>)
 8002638:	601a      	str	r2, [r3, #0]
		  btn_state[B2] ++;
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 800263c:	795b      	ldrb	r3, [r3, #5]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f103 0301 	add.w	r3, r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 8002648:	715a      	strb	r2, [r3, #5]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line6);
 800264a:	f04f 0040 	mov.w	r0, #64	; 0x40
 800264e:	f7ff fcd9 	bl	8002004 <EXTI_ClearITPendingBit>
 8002652:	e043      	b.n	80026dc <EXTI9_5_IRQHandler+0xe8>
	  }
	  else if(EXTI_GetITStatus(EXTI_Line7) != RESET)
 8002654:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002658:	f7ff fcaa 	bl	8001fb0 <EXTI_GetITStatus>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00f      	beq.n	8002682 <EXTI9_5_IRQHandler+0x8e>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PB7 B1    ";
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <EXTI9_5_IRQHandler+0xf4>)
 8002664:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <EXTI9_5_IRQHandler+0x104>)
 8002666:	601a      	str	r2, [r3, #0]
		  btn_state[B1] ++;
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f103 0301 	add.w	r3, r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 8002676:	711a      	strb	r2, [r3, #4]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line7);
 8002678:	f04f 0080 	mov.w	r0, #128	; 0x80
 800267c:	f7ff fcc2 	bl	8002004 <EXTI_ClearITPendingBit>
 8002680:	e02c      	b.n	80026dc <EXTI9_5_IRQHandler+0xe8>
	  }
	  else if(EXTI_GetITStatus(EXTI_Line8) != RESET)
 8002682:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002686:	f7ff fc93 	bl	8001fb0 <EXTI_GetITStatus>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00f      	beq.n	80026b0 <EXTI9_5_IRQHandler+0xbc>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PA8 UP    ";
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <EXTI9_5_IRQHandler+0xf4>)
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <EXTI9_5_IRQHandler+0x108>)
 8002694:	601a      	str	r2, [r3, #0]
		  btn_state[UP] ++;
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f103 0301 	add.w	r3, r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 80026a4:	701a      	strb	r2, [r3, #0]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line8);
 80026a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026aa:	f7ff fcab 	bl	8002004 <EXTI_ClearITPendingBit>
 80026ae:	e015      	b.n	80026dc <EXTI9_5_IRQHandler+0xe8>
	  }
	  else if(EXTI_GetITStatus(EXTI_Line9) != RESET)
 80026b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026b4:	f7ff fc7c 	bl	8001fb0 <EXTI_GetITStatus>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <EXTI9_5_IRQHandler+0xe8>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PC9 RIGHT";
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <EXTI9_5_IRQHandler+0xf4>)
 80026c0:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <EXTI9_5_IRQHandler+0x10c>)
 80026c2:	601a      	str	r2, [r3, #0]
		  btn_state[RIGHT] ++;
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 80026c6:	785b      	ldrb	r3, [r3, #1]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f103 0301 	add.w	r3, r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <EXTI9_5_IRQHandler+0xfc>)
 80026d2:	705a      	strb	r2, [r3, #1]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line9);
 80026d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026d8:	f7ff fc94 	bl	8002004 <EXTI_ClearITPendingBit>
	  }
	  update_lcd = 1;
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <EXTI9_5_IRQHandler+0x110>)
 80026de:	f04f 0201 	mov.w	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
}
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000478 	.word	0x20000478
 80026ec:	08002a94 	.word	0x08002a94
 80026f0:	2000047c 	.word	0x2000047c
 80026f4:	08002aa0 	.word	0x08002aa0
 80026f8:	08002aac 	.word	0x08002aac
 80026fc:	08002ab8 	.word	0x08002ab8
 8002700:	08002ac4 	.word	0x08002ac4
 8002704:	2000046c 	.word	0x2000046c

08002708 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	  if(EXTI_GetITStatus(EXTI_Line12) != RESET)
 800270c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002710:	f7ff fc4e 	bl	8001fb0 <EXTI_GetITStatus>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00f      	beq.n	800273a <EXTI15_10_IRQHandler+0x32>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PC12 DOWN";
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <EXTI15_10_IRQHandler+0x68>)
 800271c:	4a15      	ldr	r2, [pc, #84]	; (8002774 <EXTI15_10_IRQHandler+0x6c>)
 800271e:	601a      	str	r2, [r3, #0]
		  btn_state[DOWN] ++;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <EXTI15_10_IRQHandler+0x70>)
 8002722:	789b      	ldrb	r3, [r3, #2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f103 0301 	add.w	r3, r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <EXTI15_10_IRQHandler+0x70>)
 800272e:	709a      	strb	r2, [r3, #2]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line12);
 8002730:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002734:	f7ff fc66 	bl	8002004 <EXTI_ClearITPendingBit>
 8002738:	e015      	b.n	8002766 <EXTI15_10_IRQHandler+0x5e>
	  }
	  else if(EXTI_GetITStatus(EXTI_Line11) != RESET)
 800273a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800273e:	f7ff fc37 	bl	8001fb0 <EXTI_GetITStatus>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <EXTI15_10_IRQHandler+0x5e>
	  {
	    /* Toggle LED3 */
	     //STM32vldiscovery_LEDToggle(LED3);
		  disp_string = "PC11 LEFT";
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <EXTI15_10_IRQHandler+0x68>)
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <EXTI15_10_IRQHandler+0x74>)
 800274c:	601a      	str	r2, [r3, #0]
		  btn_state[LEFT] ++;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <EXTI15_10_IRQHandler+0x70>)
 8002750:	78db      	ldrb	r3, [r3, #3]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 0301 	add.w	r3, r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <EXTI15_10_IRQHandler+0x70>)
 800275c:	70da      	strb	r2, [r3, #3]
	    /* Clear the User Button EXTI line pending bit */
	    EXTI_ClearITPendingBit(EXTI_Line11);
 800275e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002762:	f7ff fc4f 	bl	8002004 <EXTI_ClearITPendingBit>
	  }
	  update_lcd = 1;
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <EXTI15_10_IRQHandler+0x78>)
 8002768:	f04f 0201 	mov.w	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000478 	.word	0x20000478
 8002774:	08002ad0 	.word	0x08002ad0
 8002778:	2000047c 	.word	0x2000047c
 800277c:	08002adc 	.word	0x08002adc
 8002780:	2000046c 	.word	0x2000046c

08002784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <SystemInit+0x64>)
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <SystemInit+0x64>)
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <SystemInit+0x64>)
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <SystemInit+0x64>)
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <SystemInit+0x68>)
 800279c:	ea01 0303 	and.w	r3, r1, r3
 80027a0:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <SystemInit+0x64>)
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <SystemInit+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <SystemInit+0x64>)
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <SystemInit+0x64>)
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <SystemInit+0x64>)
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <SystemInit+0x64>)
 80027c2:	6852      	ldr	r2, [r2, #4]
 80027c4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80027c8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <SystemInit+0x64>)
 80027cc:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027d0:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SystemInit+0x64>)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80027da:	f000 f80b 	bl	80027f4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SystemInit+0x6c>)
 80027e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e4:	609a      	str	r2, [r3, #8]
#endif 
}
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	f8ff0000 	.word	0xf8ff0000
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 80027f8:	f000 f802 	bl	8002800 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop

08002800 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800281c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 0301 	add.w	r3, r3, #1
 800282e:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <SetSysClockTo24+0x3e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800283c:	d1ef      	bne.n	800281e <SetSysClockTo24+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <SetSysClockTo24+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 800284a:	f04f 0301 	mov.w	r3, #1
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	e002      	b.n	8002858 <SetSysClockTo24+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d137      	bne.n	80028ce <SetSysClockTo24+0xce>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002860:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002862:	6852      	ldr	r2, [r2, #4]
 8002864:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <SetSysClockTo24+0xd8>)
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002872:	6852      	ldr	r2, [r2, #4]
 8002874:	605a      	str	r2, [r3, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <SetSysClockTo24+0xd8>)
 800287a:	6852      	ldr	r2, [r2, #4]
 800287c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002880:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002886:	6852      	ldr	r2, [r2, #4]
 8002888:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 800288c:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002890:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <SetSysClockTo24+0xd8>)
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002898:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800289a:	bf00      	nop
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <SetSysClockTo24+0xd8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f9      	beq.n	800289c <SetSysClockTo24+0x9c>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <SetSysClockTo24+0xd8>)
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <SetSysClockTo24+0xd8>)
 80028ac:	6852      	ldr	r2, [r2, #4]
 80028ae:	f022 0203 	bic.w	r2, r2, #3
 80028b2:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SetSysClockTo24+0xd8>)
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <SetSysClockTo24+0xd8>)
 80028b8:	6852      	ldr	r2, [r2, #4]
 80028ba:	f042 0202 	orr.w	r2, r2, #2
 80028be:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80028c0:	bf00      	nop
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <SetSysClockTo24+0xd8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d1f9      	bne.n	80028c2 <SetSysClockTo24+0xc2>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80028ce:	f107 070c 	add.w	r7, r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	52544554 	.word	0x52544554
 80028e0:	00005349 	.word	0x00005349
 80028e4:	53524556 	.word	0x53524556
 80028e8:	00000000 	.word	0x00000000
 80028ec:	53455547 	.word	0x53455547
 80028f0:	00000053 	.word	0x00000053
 80028f4:	4c4c4157 	.word	0x4c4c4157
 80028f8:	00000000 	.word	0x00000000
 80028fc:	44444948 	.word	0x44444948
 8002900:	00004e45 	.word	0x00004e45
 8002904:	455a414d 	.word	0x455a414d
 8002908:	00000000 	.word	0x00000000
 800290c:	58495242 	.word	0x58495242
 8002910:	00000000 	.word	0x00000000
 8002914:	45504957 	.word	0x45504957
 8002918:	0046464f 	.word	0x0046464f
 800291c:	49524256 	.word	0x49524256
 8002920:	00000058 	.word	0x00000058
 8002924:	41564e49 	.word	0x41564e49
 8002928:	53524544 	.word	0x53524544
 800292c:	00000000 	.word	0x00000000
 8002930:	474e4f50 	.word	0x474e4f50
 8002934:	00000032 	.word	0x00000032
 8002938:	54434954 	.word	0x54434954
 800293c:	00004341 	.word	0x00004341
 8002940:	4c52454d 	.word	0x4c52454d
 8002944:	00004e49 	.word	0x00004e49
 8002948:	4e494c42 	.word	0x4e494c42
 800294c:	0000594b 	.word	0x0000594b
 8002950:	54494c42 	.word	0x54494c42
 8002954:	0000005a 	.word	0x0000005a
 8002958:	5a5a5550 	.word	0x5a5a5550
 800295c:	3531454c 	.word	0x3531454c
 8002960:	00000000 	.word	0x00000000
 8002964:	4b4e4154 	.word	0x4b4e4154
 8002968:	00000000 	.word	0x00000000
 800296c:	5a5a5550 	.word	0x5a5a5550
 8002970:	0000454c 	.word	0x0000454c
 8002974:	4e4e4f43 	.word	0x4e4e4f43
 8002978:	34544345 	.word	0x34544345
 800297c:	00000000 	.word	0x00000000
 8002980:	41455242 	.word	0x41455242
 8002984:	54554f4b 	.word	0x54554f4b
 8002988:	00000000 	.word	0x00000000
 800298c:	595a5953 	.word	0x595a5953
 8002990:	00005947 	.word	0x00005947
 8002994:	454c414b 	.word	0x454c414b
 8002998:	00004449 	.word	0x00004449
 800299c:	41555153 	.word	0x41555153
 80029a0:	00004853 	.word	0x00004853
 80029a4:	70696863 	.word	0x70696863
 80029a8:	6d652038 	.word	0x6d652038
 80029ac:	74616c75 	.word	0x74616c75
 80029b0:	0000726f 	.word	0x0000726f
 80029b4:	52544554 	.word	0x52544554
 80029b8:	00005349 	.word	0x00005349
 80029bc:	53524556 	.word	0x53524556
 80029c0:	00000000 	.word	0x00000000
 80029c4:	53455547 	.word	0x53455547
 80029c8:	00000053 	.word	0x00000053
 80029cc:	4c4c4157 	.word	0x4c4c4157
 80029d0:	00000000 	.word	0x00000000
 80029d4:	44444948 	.word	0x44444948
 80029d8:	00004e45 	.word	0x00004e45
 80029dc:	455a414d 	.word	0x455a414d
 80029e0:	00000000 	.word	0x00000000
 80029e4:	58495242 	.word	0x58495242
 80029e8:	00000000 	.word	0x00000000
 80029ec:	45504957 	.word	0x45504957
 80029f0:	0046464f 	.word	0x0046464f
 80029f4:	49524256 	.word	0x49524256
 80029f8:	00000058 	.word	0x00000058
 80029fc:	41564e49 	.word	0x41564e49
 8002a00:	53524544 	.word	0x53524544
 8002a04:	00000000 	.word	0x00000000
 8002a08:	474e4f50 	.word	0x474e4f50
 8002a0c:	00000032 	.word	0x00000032
 8002a10:	54434954 	.word	0x54434954
 8002a14:	00004341 	.word	0x00004341
 8002a18:	4c52454d 	.word	0x4c52454d
 8002a1c:	00004e49 	.word	0x00004e49
 8002a20:	4e494c42 	.word	0x4e494c42
 8002a24:	0000594b 	.word	0x0000594b
 8002a28:	54494c42 	.word	0x54494c42
 8002a2c:	0000005a 	.word	0x0000005a
 8002a30:	5a5a5550 	.word	0x5a5a5550
 8002a34:	3531454c 	.word	0x3531454c
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	4b4e4154 	.word	0x4b4e4154
 8002a40:	00000000 	.word	0x00000000
 8002a44:	5a5a5550 	.word	0x5a5a5550
 8002a48:	0000454c 	.word	0x0000454c
 8002a4c:	4e4e4f43 	.word	0x4e4e4f43
 8002a50:	34544345 	.word	0x34544345
 8002a54:	00000000 	.word	0x00000000
 8002a58:	41455242 	.word	0x41455242
 8002a5c:	54554f4b 	.word	0x54554f4b
 8002a60:	00000000 	.word	0x00000000
 8002a64:	595a5953 	.word	0x595a5953
 8002a68:	00005947 	.word	0x00005947
 8002a6c:	454c414b 	.word	0x454c414b
 8002a70:	00004449 	.word	0x00004449
 8002a74:	41555153 	.word	0x41555153
 8002a78:	00004853 	.word	0x00004853
 8002a7c:	20334250 	.word	0x20334250
 8002a80:	20203542 	.word	0x20203542
 8002a84:	00002020 	.word	0x00002020
 8002a88:	20344250 	.word	0x20344250
 8002a8c:	20203642 	.word	0x20203642
 8002a90:	00002020 	.word	0x00002020
 8002a94:	20354250 	.word	0x20354250
 8002a98:	20203342 	.word	0x20203342
 8002a9c:	00002020 	.word	0x00002020
 8002aa0:	20364250 	.word	0x20364250
 8002aa4:	20203242 	.word	0x20203242
 8002aa8:	00002020 	.word	0x00002020
 8002aac:	20374250 	.word	0x20374250
 8002ab0:	20203142 	.word	0x20203142
 8002ab4:	00002020 	.word	0x00002020
 8002ab8:	20384150 	.word	0x20384150
 8002abc:	20205055 	.word	0x20205055
 8002ac0:	00002020 	.word	0x00002020
 8002ac4:	20394350 	.word	0x20394350
 8002ac8:	48474952 	.word	0x48474952
 8002acc:	00000054 	.word	0x00000054
 8002ad0:	32314350 	.word	0x32314350
 8002ad4:	574f4420 	.word	0x574f4420
 8002ad8:	0000004e 	.word	0x0000004e
 8002adc:	31314350 	.word	0x31314350
 8002ae0:	46454c20 	.word	0x46454c20
 8002ae4:	00000054 	.word	0x00000054

08002ae8 <CHIP8>:
	...
 8002bac:	e0c0c080 e0e0e0e0 c0c0e0e0 00008080     ................
 8002bbc:	00000000 e0c0c080 e0e0e0e0 e0e0e0e0     ................
 8002bcc:	00e0e0e0 00000000 e0e0e000 000000e0     ................
 8002bdc:	e0000000 00e0e0e0 00000000 00000000     ................
 8002bec:	e0e0e000 000000e0 c0c08000 e0e0e0e0     ................
 8002bfc:	c0c0e0e0 00008080 00000000 7f1c0000     ................
 8002c0c:	c7ffffff 83838383 ffc78383 007fffff     ................
 8002c1c:	fffc0000 078fffff 01010303 ffff0101     ................
 8002c2c:	00ffffff 00000000 ffffff00 000000ff     ................
 8002c3c:	ff000000 80ffffff 80808080 80808080     ................
 8002c4c:	ffffff80 000000ff 07070f00 03030303     ................
 8002c5c:	07030303 feff3f0f 00c0f8fc f8e00000     .....?..........
 8002c6c:	1ffffffc 07070f0f ff1f0f0f 00f0fcfd     ................
 8002c7c:	0f030000 3e3f1f1f 3c3c3c3c ffff3c3c     ......?><<<<<<..
 8002c8c:	00ffffff 00000000 ffffff00 000000ff     ................
 8002c9c:	ff000000 0fffffff 07070707 07070707     ................
 8002cac:	ffffff0f 000000ff 00000000 00000000     ................
 8002cbc:	00000000 ffffc000 003fffff 0f030000     ..........?.....
 8002ccc:	3e3f1f1f 7c7c7c7c 3f3e7c7c 00070f1f     ..?>||||||>?....
	...
 8002ce8:	7f7f0000 007f7f7f 00000000 7f7f7f00     ................
 8002cf8:	0000007f 7f000000 007f7f7f 00000000     ................
 8002d08:	00000000 7f7f7f00 0000007f 3e3e1f00     ..............>>
 8002d18:	7c7c7c7c 3e3c7c7c 070f1f1f 00000103     ||||||<>........
	...

08002de8 <TETRIS>:
 8002de8:	e623b4a2 0170b622 253011d0 ff710612     ..#.".p...0%..q.
 8002df8:	1a6011d0 256011d0 0e120031 704470c4     ..`...`%1....pDp
 8002e08:	03c31c12 03611e60 15f55c22 013f14d0     ....`.a."\....?.
 8002e18:	14d03c12 14d0ff71 1c124023 7222a1e7     .<..q...#@...."r
 8002e28:	8422a1e8 9622a1e9 50129ee2 15f60066     .."..."....Pf...
 8002e38:	003607f6 14d03c12 2a120171 1ef4c4a2     ..6..<..q..*....
 8002e48:	01430066 02430466 03430866 1ef60c66     f.C.f.C.f.C.f...
 8002e58:	14d0ee00 3423ff70 ee00013f 017014d0     ....p.#4?.....p.
 8002e68:	ee003423 017014d0 013f3423 14d0ee00     #4....p.#4?.....
 8002e78:	3423ff70 14d0ee00 04430173 5c220063     p.#4....s.C.c."\
 8002e88:	013f3423 14d0ee00 ff43ff73 5c220363     #4?.....s.C.c."\
 8002e98:	ee003423 05670080 04690668 10651f61     #4....g.h.i.a.e.
 8002ea8:	ee000762 0000e040 0040c040 0040e000     b...@...@.@...@.
 8002eb8:	00406040 00604040 0000e020 004040c0     @`@.@@`. ....@@.
 8002ec8:	0080e000 00c04040 0020e000 00404060     ....@@.... .`@@.
 8002ed8:	0000e080 0080c040 000060c0 0080c040     ....@....`..@...
 8002ee8:	000060c0 0040c080 00c06000 0040c080     .`....@..`....@.
 8002ef8:	00c06000 0000c0c0 0000c0c0 0000c0c0     .`..............
 8002f08:	0000c0c0 40404040 0000f000 40404040     ....@@@@....@@@@
 8002f18:	0000f000 356614d0 0036ff76 ee003813     ......f5v.6..8..
 8002f28:	108cb4a2 017c1e3c 017c1e3c 017c1e3c     ....<.|.<.|.<.|.
 8002f38:	0a4b5e23 c0917223 0171ee00 1b605013     #^K.#r....q..P`.
 8002f48:	11d0006b 017b003f 017011d0 62132530     k...?.{...p.0%.b
 8002f58:	1b60ee00 017011d0 74132530 e08d108e     ..`...p.0%.t....
 8002f68:	1b60ff7e e1d0006b 9013003f 9413e1d0     ~.`.k...?.......
 8002f78:	017bd1d0 25300170 004b8613 ff7da613     ..{.p.0%..K...}.
 8002f88:	013dff7e c0238213 c023013f c023017a     ~.=...#.?.#.z.#.
 8002f98:	076da080 0440d280 0245fe75 ee000465     ..m...@.u.E.e...
 8002fa8:	55f200a7 33fa04a8 29f065f2 006e326d     ...U...3.e.)m2n.
 8002fb8:	057de5dd e5dd29f1 29f2057d 00a7e5dd     ..}..)..}..)....
 8002fc8:	b4a265f2 006aee00 ee001960 00002337     .e....j.`...7#..

08002fd8 <VERS>:
 8002fd8:	4d4a1a12 3931204e 53203139 5754464f     ..JMN 1991 SOFTW
 8002fe8:	53455241 ff808020 00630000 e0000067     ARES .....c.g...
 8002ff8:	006017a2 11d00061 11d0ff71 08700171     ..`.a...q...q.p.
 8003008:	26124030 15a20171 ff7012d0 017012d0     0@.&q.....p...p.
 8003018:	1f310271 08603812 04621061 0f653764     q.1..8`.a.b.d7e.
 8003028:	11d00266 016851d4 0262a1e8 a1e80268     f....Qh...b.h...
 8003038:	07680462 0162a1e8 a1e80a68 0b680362     b.h...b.h...b.h.
 8003048:	0266a1e8 a1e80f68 0c680466 0166a1e8     ..f.h...f.h...f.
 8003058:	a1e80d68 01420366 0242ff71 0342ff70     h...f.B.q.B.p.B.
 8003068:	04420171 01460170 0246ff75 0346ff74     q.B.p.F.u.F.t.F.
 8003078:	04460175 11d00174 b412003f 003f51d4     u.F.t...?....Q?.
 8003088:	5612b812 ba120177 00680173 00380178     ...Vw...s.h.x.8.
 8003098:	e000bc12 04610860 15d029f3 29f73460     ....`.a..)..`4.)
 80030a8:	006815d0 00380178 0843d412 0847e412     ..h.x.8...C...G.
 80030b8:	1e12e412 0000e412                       ........

080030c0 <GUESS>:
 80030c0:	016e0069 016de000 016b016a e28cd08c     i.n...m.j.k.....
 80030d0:	2212004c 4022d088 2212403a 067b016a     L..".."@:@."j.{.
 80030e0:	017d3f3c 0c123f3d 05400af0 e48ee489     <?}.=?....@.....
 80030f0:	0412403e 0d6b1c6a e0009088 3e124022     >@..j.k....."@.>
 8003100:	33f896a2 562265f2 047ab5da 56222081     ...3.e"V..z.. "V
 8003110:	057ab5da 1083ee00 34833483 64a21483     ..z......4.4...d
 8003120:	ee001ef3 a0a0a0e0 404040e0 20e04040     .........@@@@@. 
 8003130:	e0e080e0 e020e020 20e0a0a0 e080e020     .... . ....  ...
 8003140:	80e0e020 e0e0a0e0 20202020 a0e0a0e0      .......    ....
 8003150:	e0a0e0e0 0000e020                       .... ...

08003158 <WALL>:
 8003158:	57201812 204c4c41 44207962 64697661     .. WALL by David
 8003168:	4e495720 20524554 0060e4a2 1e620061      WINTER ..`.a.b.
 8003178:	21d011d0 40300870 dfa22012 01613e60     ...!p.0@. ..`>a.
 8003188:	057115d0 30121a31 006314d0 08740fc4     ..q.1..0..c...t.
 8003198:	51840165 02660365 40880167 01690278     e..Qe.f.g..@x.i.
 80031a8:	006b046a 45d3daa2 0afc81d7 016cc422     j.k....E....".l.
 80031b8:	07fc15fc 6212003c 708cdaa2 9ee9808d     ....<..b...p....
 80031c8:	01447c12 45d37c12 45d3fe74 8a129eea     .|D..|.Et..E....
 80031d8:	8a121944 027445d3 548745d3 01476488     D....Et..E.T.dG.
 80031e8:	3d470365 0148fd65 1d480266 d1dcfe66     e.G=e.H.f.H.f...
 80031f8:	013781d7 808c5e12 006d458c be12d09c     ..7..^...Em.....
 8003208:	053d017d 0afcac12 006bc422 c4225c12     }.=.....".k..\".
 8003218:	5c12017b 33fbe5a2 026d346c 29f165f2     {..\...3l4m..e.)
 8003228:	057cd5dc d5dc29f2 8080ee00 e0808080     ..|..)..........
 8003238:	e0e0e0e0 000000ff                       ........

08003240 <HIDDEN>:
 8003240:	49481d12 4e454444 2e312021 79422030     ..HIDDEN! 1.0 By
 8003250:	76614420 57206469 45544e49 603fa452      David WINTER.?`
 8003260:	f1406100 603fa455 0055f000 607ea4e0     .a@.U.?`..U...~`
 8003270:	6208610c 701fd00f 301ef208 f0351234     .a.b...p...04.5.
 8003280:	a4e0000a 611360c9 d004620d f2087014     .....`.a.b...p..
 8003290:	122b301e ff1fa44b ff2fa465 66406355     .0+.K...e./.Uc@f
 80032a0:	c20fc108 f12fa40f 8465f01e f22fa400     ....../...e.../.
 80032b0:	8565f01e f0408000 f12fa455 f050801e     ..e...@.U./...P.
 80032c0:	33ff7355 00611200 610060e0 d077a400     Us.3..a..`.a..w.
 80032d0:	30087017 608f1220 31087100 6c8f1220     .p.0 ..`.q.1 ..l
 80032e0:	6e006d00 f03fa400 f0017065 6ab92355     .m.n..?.ep..U#.j
 80032f0:	235d2310 87908acd 23e088d0 23cd235d     .#]#.......#]#.#
 8003300:	f92fa4b9 8165f01e fa2fa400 5065f01e     ../...e.../...eP
 8003310:	232b1310 242060df 60df2301 f92fa400     ..+#.` $.#.`../.
 8003320:	a455f01e f01efa2f 36ff7655 a4a51200     ..U./...Uv.6....
 8003330:	8265f13f 3f158000 80011300 f1208120     ?.e....?.... . .
 8003340:	a5e00055 61106019 d00e6207 f208701f     U....`.a.b...p..
 8003350:	1330301e f13fa40b 83108465 24096600     .00...?.e....f.$
 8003360:	830f660b f00b2440 2325120a 248060db     .f..@$....%#.`.$
 8003370:	a4db2301 f01efa2f 23ff7065 f041a4f3     .#../...ep.#..A.
 8003380:	a487d71e a487d777 f01ef92f 23ff7065     ....w.../...ep.#
 8003390:	f041a4f3 a4e7dd1e 12e7dd77 dd71a4a5     ..A.....w.....q.
 80033a0:	dd0afbe7 13043be7 13004d71 7cf87d5d     .....;..qM..]}.|
 80033b0:	13063bff 13184d7d 7c087d5d 13023b01     .;..}M..]}.|.;..
 80033c0:	13004e89 7cf87e5d 13083bfc 13184e95     .N..]~.|.;...N..
 80033d0:	7c087e5d 13053b04 fc2fa45d 4065f01e     ]~.|.;..]./...e@
 80033e0:	895d1300 13a099c0 a4ff705d a4e7dd77     ..].....]p..w...
 80033f0:	f0f32341 00e7dd1e 60d5a4ee 620a6124     A#.........`$a.b
 8003400:	701bd00b 301ef208 00c1133c 613460ee     ...p...0<....`4a
 8003410:	d0f1a410 d0f6a415 a4ee0015 a5e113fb     ................
 8003420:	6124600a d005620d f2087015 133c301e     .`$a.b...p...0<.
 8003430:	81ee00e7 80148100 80048004 00158004     ................
 8003440:	f015f0ee 14003007 a4ee0003 f233f32f     .....0....../.3.
 8003450:	f1236565 6565d529 d529f228 01ee0065     ee#.).ee(.).e...
 8003460:	08040302 05050607 04080706 01010203     ................
 8003470:	08040302 05050607 04080706 00010203     ................
 8003480:	c6eefe00 feeec682 c6c6c6fe aac6fefe     ................
 8003490:	fec6aa82 828282c6 d6bafec6 febad6ee     ................
 80034a0:	ee82eeee fe82feee fe82fe82 aaaaaaaa     ................
 80034b0:	fefefeaa fefefefe d6aad6aa 888bfeaa     ................
 80034c0:	008b88f8 00000000 484848f0 8484eff2     .........HHH....
 80034d0:	0800ef84 8a000a08 52aaaa8a 9292923c     ...........R<...
 80034e0:	a3e2003c c88b00e3 fa8898a8 fa82e283     <...............
 80034f0:	90b82800 8e88ef00 21218f88 002160a1     .(........!!.`!.
 8003500:	00000000 283c22bc ab8a89a4 d1519752     ....."<(....R.Q.
 8003510:	0000c051 8e8a6a15 64006a8a 6a8a8e8a     Q....j...j.d...j
 8003520:	aaaaaa44 aacc0044 6eacaaca ce284c88     D...D......n.L(.
 8003530:	040c0400 120c0e04 631e0804 63949494     ...........c...c
 8003540:	a0b8a538 c101e121 8a89c120 cf212252     8...!... ...R"!.
 8003550:	c8282f28 00028202 8f80ff02 9e818e90     (/(.............
 8003560:	9f919180 ff809191 40403c00 7c003c40     .........<@@@<.|
 8003570:	7c101010 0000ff00 00800080 00800000     ...|............
 8003580:	ff000080 01010101 01010101 01010101     ................
 8003590:	0000ff01                                ....

08003594 <MAZE>:
 8003594:	00610060 01c222a2 1ea20132 047014d0     `.a.."..2.....p.
 80035a4:	04124030 04710060 04122031 40801c12     0@..`.q.1 .....@
 80035b4:	40201020 00001080                        . @....

080035bc <BRIX>:
 80035bc:	0065056e 006a066b b1da0ca3 403a047a     n.e.k.j.....z.:@
 80035cc:	027b0812 0612123b 1f6d206c d1dc10a3     ..{.;...l m.....
 80035dc:	0060f622 12a30061 087011d0 11d00ea3     ".`.a.....p.....
 80035ec:	15f04060 003007f0 0fc63412 01681e67     `@....0..4..g.h.
 80035fc:	0ea3ff69 10a371d6 0460d1dc fe7ca1e0     i....q....`...|.
 800360c:	a1e00660 3f60027c d1dc028c 71d60ea3     `...|.`?.......q
 800361c:	94878486 02863f60 12871f61 ac121f47     ....`?..a...G...
 800362c:	01680046 ff683f46 01690047 013f71d6     F.h.F?h.G.i..q?.
 800363c:	1f47aa12 0560aa12 003f7580 0160aa12     ..G...`..u?...`.
 800364c:	608018f0 1280fc61 71d00ca3 0389fe60     ...`a......q`...
 800365c:	0175f622 6045f622 4612de12 6080ff69     ".u.".E`...Fi..`
 800366c:	013fc580 0261ca12 013f1580 1580e012     ..?...a...?.....
 800367c:	ee12013f 013f1580 2060e812 0ea318f0     ?.....?...` ....
 800368c:	e080ff7e 00610480 003e11d0 de123012     ~.....a...>..0..
 800369c:	fe48ff78 ee12ff68 02480178 04600168     x.H.h...x.H.h.`.
 80036ac:	ff6918f0 14a37012 65f233f5 376329f1     ..i..p...3.e.)c7
 80036bc:	45d30064 29f20573 ee0045d3 008000e0     d..Es..).E......
 80036cc:	00aa00fc 00000000                       ........

080036d4 <WIPEOFF>:
 80036d4:	076acca2 086b0061 11d00060 ff7b0870     ..j.a.k.`...p.{.
 80036e4:	0a12003b ff7a0471 0612003a 10670066     ;...q.z.:...f.g.
 80036f4:	2060cda2 11d01e61 3f621d63 ff770282     ..` a...c.b?..w.
 8003704:	aa120047 cba20aff ff6531d2 013401c4     G........1e...4.
 8003714:	cda2ff64 046e006c ff6ca1ee a1ee066e     d...l.n...l.n...
 8003724:	11d0016c 11d0c480 9812014f 01640042     l.......O...B.d.
 8003734:	ff643f42 01650043 a4121f43 31d2cba2     B?d.C.e.C......1
 8003744:	54834482 013f31d2 1e434212 026a9812     .D.T.1?..BC...j.
 8003754:	017618fa aa127046 01c431d2 ff640134     ..v.Fp...1..4.d.
 8003764:	013501c5 4212ff65 18fa036a 31d2cba2     ..5.e..Bj......1
 8003774:	3612ff73 31d2cba2 cda22812 f0a211d0     s..6...1.(......
 8003784:	65f233f6 1b641863 45d329f0 29f10573     .3.ec.d..).Es..)
 8003794:	057345d3 45d329f2 8001c812 0000ff44     .Es..).E....D...

080037a4 <VBRIX>:
 80037a4:	b623e000 9ee00760 00680412 46230367     ..#.`.....h.g.#F
 80037b4:	c0224a22 8a236623 0af0ac23 5a225a22     "J".#f#.#..."Z"Z
 80037c4:	8822d022 1c12003a ac23016c ac23ff77     ".".:...l.#.w.#.
 80037d4:	15f07860 003007f0 00373412 ac231c12     `x....0..47...#.
 80037e4:	9ee00760 0a124212 1069fd00 54a20260     `....B....i.`..T
 80037f4:	ee0095d0 80808080 01600080 6812a1e0     ..........`....h
 8003804:	a1e00460 ee007212 ff709080 ee000040     `....r....p.@...
 8003814:	90807c12 1b400170 7c12ee00 54a20261     .|..p.@....|a..T
 8003824:	05d195d1 ee000089 fe70a080 ee000030     ..........p.0...
 8003834:	9580b080 ee00004f 05620081 003f2581     ....O.....b..%?.
 8003844:	baa2ee00 65f01ef0 014b008d 1e4b016d     .......e..K.m.K.
 8003854:	016cff6d 18f00a60 ffffee00 00010100     m.l.`...........
 8003864:	017b20cb 016c046a 64a3016d ee00b1da     . {.j.l.m..d....
 8003874:	b081a080 d48bc48a 014b64a3 1e4b016d     .........dK.m.K.
 8003884:	3e4aff6d 004aff6c 11d0016c 004fb1da     m.J>l.J.l.....O.
 8003894:	a080ee00 15802161 ee00004f b081a080     ....a!..O.......
 80038a4:	ff71de70 ff63ff62 01720364 003f4580     p.q.b.c.d.r..E?.
 80038b4:	01730a13 003f4581 20801213 24803081     ..s..E?.... .0.$
 80038c4:	34812480 22703481 86a30171 ff7e13d0     .$.4.4p"q.....~.
 80038d4:	078c0060 18f00260 01788a23 003e8a23     `...`...#.x.#.>.
 80038e4:	6623ee00 e000ee00 00610060 64a31f62     ..#f....`.a.b..d
 80038f4:	21d011d0 3f300170 11d05013 20310171     ...!p.0?.P..q.1 
 8003904:	ee005a13 01610080 86a30a63 07622260     .Z....a.c...`"b.
 8003914:	037013d0 0032ff72 03717013 0033ff73     ..p.r.2..pq.s.3.
 8003924:	466e6c13 a0e0ee00 a6a300e0 65f233f8     .lnF.........3.e
 8003934:	02640363 45d329f0 29f10573 057345d3     c.d..).Es..).Es.
 8003944:	45d329f2 0000ee00 00000000 02611460     .).E........`.a.
 8003954:	15d029f7 0a60ee00 09620c61 cea30563     .)....`.a.b.c...
 8003964:	1ef315d0 ff720570 c0130032 9090ee00     ....p.r.2.......
 8003974:	e0609090 e090e090 90e090e0 20202090     ..`..........   
 8003984:	90902020 00909060 00006000 80f090f0       ..`....`......
 8003994:	f080f080 90e0f010 009090e0              ............

080039a0 <INVADERS>:
 80039a0:	50532512 20454341 41564e49 53524544     .%SPACE INVADERS
 80039b0:	392e3020 79422031 76614420 57206469      0.91 By David W
 80039c0:	45544e49 61006052 a3086200 7118d0dd     INTER`.a.b.....q
 80039d0:	311ef208 702d1220 30006108 692d1240     ...1 .-p.a.0@.-i
 80039e0:	6e156c05 60912300 f015f00a 12003007     .l.n.#.`.....0..
 80039f0:	7e91234b 66451201 691c6800 6b046a00     K#.~..Ef.h.i.j.k
 8003a00:	6d046c0a 000f6e3c 237523e0 6015fd51     .l.m<n...#u#Q..`
 8003a10:	129ee004 3875237d 23ff7800 e0066075     ....}#u8.x.#u`..
 8003a20:	238b129e 78393875 36752301 609f1200     ...#u89x.#u6...`
 8003a30:	129ee005 650166e9 a380841b a351d4d9     .....f.e......Q.
 8003a40:	7551d4d9 12ff35ff 120066ad 3f51d4e9     ..Qu.5...f....Q?
 8003a50:	d4e91201 83006651 83037340 83f862b5     ....Qf..@s...b..
 8003a60:	33086222 23c91200 4306827d 33d31208     "b.3...#}..C...3
 8003a70:	23d51210 3306827d 23dd1218 4306827d     ...#}..3...#}..C
 8003a80:	33e71220 23e91228 13003e7d 49067907      ..3(..#}>...y.I
 8003a90:	6a006918 6c0a6b04 6ef47d04 23e0000f     .i.j.k.l.}.n...#
 8003aa0:	fd752351 f76f1215 12003707 2315fd6f     Q#u...o..7..o..#
 8003ab0:	3ba48b51 7c1b1312 3bfc6a02 7c231302     Q..;...|.j.;..#|
 8003ac0:	23046a02 12183c51 a4e0006f 611460dd     .j.#Q<..o....`.a
 8003ad0:	d00f6208 f208701f 132c301e f0ff6033     .b...p...0,.3`..
 8003ae0:	3007f015 f0411300 a7e0000a 1265fe06     ...0..A.......e.
 8003af0:	f9c1a325 2308611e 23068169 23068169     %....a.#i..#i..#
 8003b00:	23068169 00d07b69 80e080ee db003012     i..#i{.......0..
 8003b10:	000c7bc6 60d9a3ee 0004d81c 8e5123ee     .{.....`.....#Q.
 8003b20:	60512323 f018f005 3007f015 00891300     ##Q`.......0....
 8003b30:	8d006aee e9046be0 a65712a1 f01efd0c     .j...k....W.....
 8003b40:	13ff3065 6b006aaf 6e016d04 a5971301     e0...j.k.m.n....
 8003b50:	db1ef00a 7d087bc6 3a017a01 00971307     .....{.}.z.:....
 8003b60:	ff7e3cee 7e9999ff 2424ffff 3cff7ee7     .<~....~..$$.~.<
 8003b70:	81db7e3c ff7e3c42 7c3810db 7f0000fe     <~..B<~...8|....
 8003b80:	7f003f00 01000000 03030101 00000303     .?..............
 8003b90:	2020203f 20202020 08083f20 fe0000ff     ?        ?......
 8003ba0:	fe00fc00 7e000000 62624242 00006262     .......~BBbbbb..
 8003bb0:	000000ff 00000000 0000ff00 007d00ff     ..............}.
 8003bc0:	7d057d41 c200007d 6c44c6c2 00003828     A}.}}.....Dl(8..
 8003bd0:	000000ff 00000000 0000ff00 10f700ff     ................
 8003be0:	04f7f714 7c000004 c2c2fe44 0000c2c2     .......|D.......
 8003bf0:	000000ff 00000000 0000ff00 20ef00ff     ............... 
 8003c00:	2fe8e828 f900002f c5c5c585 0000f9c5     (..//...........
 8003c10:	000000ff 00000000 0000ff00 00be00ff     ................
 8003c20:	be203020 f70000be 8585e704 0000f484      0 .............
 8003c30:	000000ff 00000000 0000ff00 7f0000ff     ................
 8003c40:	7f003f00 ef000000 e000ef28 00006f60     .?......(...`o..
 8003c50:	000000ff 00000000 0000ff00 fe0000ff     ................
 8003c60:	fe00fc00 c0000000 c0c0c000 0000c0c0     ................
 8003c70:	040404fc 04040404 1010fc04 b981f9ff     ................
 8003c80:	fa9a9a8b 9a8afa00 f8999b9a f42525e6     .............%%.
 8003c90:	00343434 37341417 dfc72636 d85c5050     444...476&..PP\.
 8003ca0:	df00dfd8 1b121f11 447cd919 868686fe     ..........|D....
 8003cb0:	82fe84fc 80fefe82 fec0c0c0 c2c282fc     ................
 8003cc0:	80fefcc2 fec0c0f8 c0f080fe 80fec0c0     ................
 8003cd0:	fe8686be 86fe8686 10108686 10101010     ................
 8003ce0:	48181818 909c7848 9cb0c0b0 c0c08080     ...HHx..........
 8003cf0:	92eefec0 86868692 868682fe 827c8686     ..............|.
 8003d00:	7c868686 c0fe82fe 827cc0c0 7ac4cac2     ...|......|....z
 8003d10:	90fe86fe c0fe849c fe0202fe 303010fe     ..............00
 8003d20:	82823030 fec2c2c2 ee828282 86861038     00..........8...
 8003d30:	ee929296 38384482 82828244 303030fe     .....D88D....000
 8003d40:	f01e02fe 0000fe80 06060000 60000000     ...............`
 8003d50:	0000c060 00000000 18181818 c67c1800     `.............|.
 8003d60:	1800180c fefe0000 82fe0000 fe868686     ................
 8003d70:	18080808 02fe1818 fec0c0fe 061e02fe     ................
 8003d80:	c484fe06 0404fec4 06fe80fe c0c0fe06     ................
 8003d90:	fe82fec0 060202fe 447c0606 fe8686fe     ..........|D....
 8003da0:	06fe82fe fe440606 44fe4444 a8a8a8a8     ......D.DD.D....
 8003db0:	6ca8a8a8 180c005a 7e4e30a8 66181200     ...lZ....0N~...f
 8003dc0:	665aa86c 00662454 12184848 a89006a8     l.ZfT$f.HH......
 8003dd0:	307e0012 3084a812 6618724e a8a8a8a8     ..~0...0Nr.f....
 8003de0:	5490a8a8 7848a878 12a8726c 66726c18     ...Tx.Hxlr...lrf
 8003df0:	72a89054 30a8182a 12007e4e a86c6618     T..r*..0N~...fl.
 8003e00:	5aa85472 187e1866 72a8724e 6630182a     rT.Zf.~.Nr.r*.0f
 8003e10:	7e4e30a8 54306c00 a8a89c4e a8a8a8a8     .0N~.l0TN.......
 8003e20:	7e5448a8 5490a818 6ca86678 a85a302a     .HT~...Txf.l*0Z.
 8003e30:	2a723084 00a8d8a8 e4a8124e 4e00a8a2     .0r*....N......N
 8003e40:	2a6ca812 a8725454 2a723084 a89cdea8     ..l*TTr..0r*....
 8003e50:	a8182a72 5a48540c 66187278 5a1866a8     r*...THZxr.f.f.Z
 8003e60:	6c726654 002a72a8 2a72a872 4e30a818     Tfrl.r*.r.r*..0N
 8003e70:	1812007e 00a86c66 30a81866 18660c4e     ~...fl..f..0N.f.
 8003e80:	4e306c00 2a72a824 a8663018 0c66541e     .l0N$.r*.0f..Tf.
 8003e90:	24a89c18 a8125454 3c0c7842 a8a8aea8     ...$TT..Bx.<....
 8003ea0:	a8a8a8a8 0000ffa8 00000000 00000000     ................
	...

08003eb8 <PONG2>:
 8003eb8:	0c6bfc22 0c6d3f6c b6daeaa2 006ed6dc     ".k.l?m.......n.
 8003ec8:	0366d422 60600268 07f015f0 1a120030     ".f.h.``....0...
 8003ed8:	087717c7 f0a2ff69 eaa271d6 d6dcb6da     ..w.i....q......
 8003ee8:	a1e00160 0460fe7b 027ba1e0 028b1f60     `...{.`...{.`...
 8003ef8:	0c60b6da fe7da1e0 a1e00d60 1f60027d     ..`...}.`...}.`.
 8003f08:	d6dc028d 71d6f0a2 94878486 02863f60     .......q....`?..
 8003f18:	12871f61 78120046 82123f46 ff691f47     a...F..xF?..G.i.
 8003f28:	01690047 2a1271d6 01630268 b5807080     G.i..q.*h.c..p..
 8003f38:	fe688a12 70800a63 013fd580 0261a212     ..h.c..p..?...a.
 8003f48:	013f1580 1580ba12 c812013f 013f1580     ..?.....?.....?.
 8003f58:	2060c212 d42218f0 d422348e 01333e66     ..` .."..4".f>3.
 8003f68:	fe680366 02680133 ff791612 ff69fe49     f.h.3.h...y.I.i.
 8003f78:	0179c812 01690249 18f00460 40460176     ..y.I.i.`...v.F@
 8003f88:	6c12fe76 33fef2a2 29f165f2 02651464     v..l...3.e.)d.e.
 8003f98:	157455d4 55d429f2 8080ee00 80808080     .Ut..).U........
 8003fa8:	00000080 c0c00000 00ff00c0 006c206b     ............k l.
 8003fb8:	c4dbf6a2 203c047c 006a0213 1f6c006b     ....|.< ..j.k.l.
 8003fc8:	b1dafaa2 087ac1da 1213403a 006af6a2     ......z.:@....j.
 8003fd8:	a1db206b 0000ee00                       k ......

08003fe0 <TICTAC>:
 8003fe0:	49541812 43415443 20796220 69766144     ..TICTAC by Davi
 8003ff0:	49572064 5245544e 006c006b c081b080     d WINTERk.l.....
 8004000:	55f1e6a3 65ffc4a3 55ffb4a3 65f1e6a3     ...U...e...U...e
 8004010:	108c008b 016ee000 03611360 11d09aa3     ......n.`.a.....
 8004020:	2b300870 13603e12 23310871 13603e12     p.0+.>`.q.1#.>`.
 8004030:	9ba30361 08701fd0 54123330 0f711360     a.....p.03.T`.q.
 8004040:	08701ad0 60123330 0af06623 b4a30081     ..p.03.`#f......
 8004050:	65f01ef0 8a120040 6a127c22 18f01060     ...e@..."|.j`...
 8004060:	07f015f0 82120030 0260ee00 e080038e     ....0.....`.....
 8004070:	d4a355f0 ff701080 1ef00480 aaa365f1     .U....p......e..
 8004080:	afa3033e c82215d0 1c12003a 0061b4a3     >.....".:.....a.
 8004090:	01630062 003065f0 1ef30171 10320172     b.c..e0.q...r.2.
 80040a0:	1031b412 1c126a12 b4a3006a 1ef00160     ..1..j..j...`...
 80040b0:	006965f8 44230489 44231489 4a232489     .ei...#D..#D.$#J
 80040c0:	34890069 44894423 54894423 00694a23     i..4#D.D#D.T#Ji.
 80040d0:	44236489 44237489 4a238489 64890069     .d#D.t#D..#Ji..d
 80040e0:	34894423 04894423 00694a23 44237489     #D.4#D..#Ji..t#D
 80040f0:	44234489 4a231489 84890069 54894423     .D#D..#Ji...#D.T
 8004100:	24894423 00694a23 44238489 44234489     #D.$#Ji...#D.D#D
 8004110:	4a230489 64890069 44894423 24894423     ..#Ji..d#D.D#D.$
 8004120:	ee004a23 0e890e89 1549ee00 3f495413     #J........I..TI?
 8004130:	ee005a13 017b6623 66235e13 6623017c     .Z..#f{..^#f|.#f
 8004140:	0af0016a 0563ee00 afa30a64 026345d3     j.....c.d....Ec.
 8004150:	e6a30674 882333fb 0a643263 45d3aaa3     t....3#.c2d....E
 8004160:	06742f63 33fce6a3 29f065f2 29f19423     c/t....3.e.)#..)
 8004170:	29f29423 057345d3 807fee00 80808080     #..).Es.........
 8004180:	80808080 80808080 221c8080 221c2222     ..........."""."
 8004190:	22140814 00000001 00000000 01010000     ..."............
 80041a0:	01010101 00000001 00000000 01010000     ................
 80041b0:	01010101 051b0513 0d130523 0d230d1b     ........#.....#.
 80041c0:	151b1513 00001523                       ....#...

080041c8 <MERLIN>:
 80041c8:	4d201912 494c5245 7942204e 76614420     .. MERLIN By Dav
 80041d8:	57206469 45544e49 a3f92252 6110601d     id WINTER"...`.a
 80041e8:	a3cb2200 610b6031 64cb221b 65df2204     ."..1`.a.".d.".e
 80041f8:	22286200 8003c2c1 f559a320 6055f01e     .b(".... .Y...U`
 8004208:	63086117 33228301 630a7000 33228302     .a.c.."3.p.c.."3
 8004218:	a30a7100 6216d017 d0c12214 22056216     .q.....b."...b."
 8004228:	540175c1 65351250 61176000 f317a308     .u.TP.5e.`.a....
 8004238:	1204330a 12006379 12053397 630a7083     .3..yc...3...p.c
 8004248:	33971201 718d1207 1202630a 12083397     ...3...q.c...3..
 8004258:	710a7069 d003630a 22146216 a316d0c1     ip.q.c...b."....
 8004268:	f01ef559 50017565 55b51230 22691240     Y...eu.P0..U@.i"
 8004278:	120174df a3f9222d 61106045 12cb220e     .t..-"..E`.a."..
 8004288:	f215f2bf 12003207 83ee00c3 d0056200     .....2.......b..
 8004298:	701ef215 75308508 12505020 a3ee00cf     ...p..0u PP.....
 80042a8:	73408359 f233f3fd 6029f165 d01b632b     Y.@s..3.e.)`+c..
 80042b8:	f2057035 0035d029 600fa3ee d0076117     5p..).5....`.a..
 80042c8:	d00a7018 d00a7118 d0f67018 ffee0018     .p...q...p......
 80042d8:	81818181 7eff8181 7e7e7e7e 8baadb7e     .......~~~~~~...
 80042e8:	08efcbcb a0ec0d8f be30b0a0 d951515f     ..........0._QQ.
 80042f8:	838283d9 08e8fb82 bee20588 3e20b8a0     .............. >
 8004308:	80808080 b785f7f8 5476f595 3a565456     ..........vTVTV:
 8004318:	392a2a2a a5b6a5b6 00000035              ***9....5...

08004324 <BLINKY>:
 8004324:	2e321a12 43203030 6745202e 72656265     ..2.00 C. Egeber
 8004334:	38312067 272d382f 03803139 c8a81381     g 18/8-'91......
 8004344:	056055f1 55f0cca8 63867387 e0007227     .U`....U.s.c'r..
 8004354:	406e9427 276ee287 1a68e187 386a0c69     '.n@..n'..h.i.j8
 8004364:	026c006b 50271a6d b4daeda8 d023d4dc     k.l.m.'P......#.
 8004374:	7c12003e 65f0cca8 ffc40085 f6245284     >..|...e.....R$.
 8004384:	5284ffc4 01601e26 d627a1e0 4e12f736     ...R&.`...'.6..N
 8004394:	7a28608e 7a28646e 2a12d627 004007f0     .`(znd(z'..*..@.
 80043a4:	80801013 a0810680 15800681 9a120040     ............@...
 80043b4:	9a120140 9a12ff40 9080c812 b0810680     @...@...........
 80043c4:	15800681 b2120040 b2120140 b212ff40     ....@...@...@...
 80043d4:	eda8c812 386ab4da b4da006b e287f36e     ......j8k...n...
 80043e4:	e187046e 7a28326e 06808080 0681c081     n...n2(z........
 80043f4:	00401580 0140e012 ff40e012 5412e012     ..@...@...@....T
 8004404:	06809080 0681d081 00401580 0140f812     ..........@...@.
 8004414:	ff40f812 5412f812 d4dceda8 1a6d026c     ..@....T....l.m.
 8004424:	cf6ed4dc 206ee287 196ee187 54127a28     ..n...n ..n.(z.T
 8004434:	a8283f60 eda85027 d4dcb4da e387406e     `?(.'P......n@..
 8004444:	e2807080 32120030 7a28608e e0008a28     .p..0..2.`(z(...
 8004454:	0a671166 e627caa8 10671166 e627c8a8     f.g...'.f.g...'.
 8004464:	08650064 0f670066 69d419ab 69d522ab     d.e.f.g....i.".i
 8004474:	a8280360 c613003e 69d419ab 69d522ab     `.(.>......i.".i
 8004484:	02750274 48133034 69d419ab 69d522ab     t.u.40.H...i.".i
 8004494:	a8280360 c613003e 69d419ab 69d522ab     `.(.>......i.".i
 80044a4:	16360276 19ab6813 22ab69d4 036069d5     v.6..h...i.".i`.
 80044b4:	003ea828 19abc613 22ab69d4 fe7469d5     (.>......i.".it.
 80044c4:	0034fe75 19ab8613 22ab69d4 036069d5     u.4......i.".i`.
 80044d4:	003ea828 19abc613 22ab69d4 fe7669d5     (.>......i.".iv.
 80044e4:	a6130036 22ab4813 2bab69d5 1a1269d5     6....H.".i.+.i..
 80044f4:	036e7083 8084e283 066e9085 3214a1ee     .pn.......n....2
 8004504:	a1ee036e 086e4a14 6214a1ee a1ee076e     n....Jn....bn...
 8004514:	03437a14 00430275 0243fe75 01430274     .zC.u.C.u.C.t.C.
 8004524:	4080fe74 ba275081 086e0082 0030e280     t..@.P'...n...0.
 8004534:	076e9214 e2822080 9a140542 b2140642     ..n.. ..B...B...
 8004544:	ec140742 fc6e5027 3187e287 50894088     B...'Pn....1.@.P
 8004554:	40805017 02715081 0082ba27 e280086e     .P.@.Pq.'...n...
 8004564:	f2130030 02750363 40800e14 fe715081     0...c.u....@.Pq.
 8004574:	0082ba27 e280086e f2130030 fe750063     '...n...0...c.u.
 8004584:	40800e14 02705081 0082ba27 e280086e     ...@.Pp.'...n...
 8004594:	f2130030 02740263 40800e14 fe705081     0...c.t....@.Pp.
 80045a4:	0082ba27 e280086e f2130030 fe740163     '...n...0...c.t.
 80045b4:	50270e14 f08e94d8 f06eee00 3180e280     ..'P......n....1
 80045c4:	f1a855f0 017654d4 07f00561 18f10040     .U...Tv.a...@...
 80045d4:	f06e2414 3180e280 f5a855f0 047654d4     .$n....1.U...Tv.
 80045e4:	b081a080 f06eba27 0030e280 0c6ed214     ....'.n...0...n.
 80045f4:	c080e387 ba27d081 e280f06e e4140030     ......'.n...0...
 8004604:	e387306e 18f0ff60 241415f0 3a640143     n0..`......$C.d:
 8004614:	00640243 70822414 0c6e7083 a080e282     C.d..$.p.pn.....
 8004624:	ba27b081 f06eeda8 0030e280 b4da2415     ..'...n...0..$..
 8004634:	027b0c42 fe7b0042 027a0842 fe7a0442     B.{.B.{.B.z.B.z.
 8004644:	ee00b4da 07f1806e d4150031 d4150034     ....n...1...4...
 8004654:	0e830081 5615003f b5839083 8c15004f     ....?..V....O...
 8004664:	74150033 8083e387 004fa583 0033bc15     3..t......O...3.
 8004674:	e387a415 8083d415 004fa583 0033bc15     ..........O...3.
 8004684:	e387a415 b5839083 8c15004f 74150033     ........O...3..t
 8004694:	d415e387 32814063 d4150041 027bb4da     ....c@.2A.....{.
 80046a4:	f36eb4da 0c62e287 ee002187 32811063     ..n...b..!..c..2
 80046b4:	d4150041 fe7bb4da f36eb4da 0062e287     A.....{...n...b.
 80046c4:	ee002187 32812063 d4150041 027ab4da     .!..c .2A.....z.
 80046d4:	f36eb4da 0862e287 ee002187 32818063     ..n...b..!..c..2
 80046e4:	d4150041 fe7ab4da f36eb4da 0462e287     A.....z...n...b.
 80046f4:	ee002187 1280f0c1 e4150030 e3870c6e     .!......0...n...
 8004704:	0e15e382 0e80b4da f215004f fe7a0462     ........O...b.z.
 8004714:	0e801416 fe15004f 027b0c62 0e801416     ....O...b.{.....
 8004724:	0a16004f 027a0862 0e801416 dc15004f     O...b.z.....O...
 8004734:	fe7b0062 f36eb4da 2187e287 7082ee00     b.{...n....!...p
 8004744:	306e7083 c080e282 ba27d081 f06eeda8     .pn0......'...n.
 8004754:	0030e280 d4dc4c16 027d3042 fe7d0042     ..0..L..B0}.B.}.
 8004764:	027c2042 fe7c1042 ee00d4dc 07f1806e     B |.B.|.....n...
 8004774:	04170031 04170034 0e830081 7e16004f     1...4.......O..~
 8004784:	d5839083 b616004f 9c160033 8083e387     ....O...3.......
 8004794:	004fc583 0033ea16 e387d016 80830417     ..O...3.........
 80047a4:	004fc583 0033ea16 e387d016 d5839083     ..O...3.........
 80047b4:	b616004f 9c160033 0417e387 32814063     O...3.......c@.2
 80047c4:	04170041 027dd4dc e387d4dc e287cf6e     A.....}.....n...
 80047d4:	21873062 1063ee00 00413281 d4dc0417     b0.!..c..2A.....
 80047e4:	d4dcfe7d cf6ee387 0062e287 ee002187     }.....n...b..!..
 80047f4:	32812063 04170041 027cd4dc e387d4dc     c .2A.....|.....
 8004804:	e287cf6e 21872062 8063ee00 00413281     n...b .!..c..2A.
 8004814:	d4dc0417 d4dcfe7c cf6ee387 1062e287     ....|.....n...b.
 8004824:	ee002187 1280f0c1 16170030 306ee387     .!......0.....n0
 8004834:	e382e387 d4dc3616 004f0e80 90622417     .....6....O..$b.
 8004844:	4617fe7c 004f0e80 30623017 4617027d     |..F..O..0b0}..F
 8004854:	004f0e80 a0623c17 4617027c 004f0e80     ..O..<b.|..F..O.
 8004864:	00620c17 d4dcfe7d e2874f6e ee002187     ..b.}...nO...!..
 8004874:	036e7080 0e80e280 94818081 e281026e     .pn.........n...
 8004884:	01700041 0e800e80 1ef0cda8 f08e94d8     A.p.............
 8004894:	006eee00 1efe19a9 1efe1efe 65f31efe     ..n............e
 80048a4:	1efe34ab 1efe1efe 55f31efe 803e017e     .4.........U~.>.
 80048b4:	ee007417 33832382 20800f6e be273081     .t...#.3n.. .0'.
 80048c4:	0e80e280 1ef0f9a8 027232d2 9a174032     .........2r.2@..
 80048d4:	02732382 ee002043 02709a17 06800271     .#s.C ....p.q...
 80048e4:	0e810681 0e810e81 34ab0e81 1ef11ef1     ...........4....
 80048f4:	65f01ef0 cca8ee00 068065f0 016055f0     ...e.....e...U`.
 8004904:	e017a1e0 65f1ee00 4384016e 10830082     .......en..C....
 8004914:	55831065 e582004f 0c18004f 55822765     e..UO...O...e'.U
 8004924:	0c18004f 30812080 f017e484 75d629f4     O.... .0.....).u
 8004934:	43840676 10830082 5583e865 e582004f     v..C....e..UO...
 8004944:	3418004f 55820365 3418004f 30812080     O..4e..UO..4. .0
 8004954:	1818e484 75d629f4 43840676 10830082     .....).uv..C....
 8004964:	55836465 e582004f 5418004f 30812080     ed.UO...O..T. .0
 8004974:	4018e484 75d629f4 43840676 10830082     ...@.).uv..C....
 8004984:	55830a65 6e18004f e4843081 29f46018     e..UO..n.0...`.)
 8004994:	067675d6 75d629f1 c8a8ee00 e48165f1     .uv..).u.....e..
 80049a4:	0170003f 55f1c8a8 c8a8ee00 008e65f3     ?.p....U.....e..
 80049b4:	004f258e 003eee00 108ea218 004f358e     .%O...>......5O.
 80049c4:	caa8ee00 ee0055f1 0f62e38e 1061ff63     .....U....b.c.a.
 80049d4:	c418a1e2 00313481 1061b018 00303480     .....41...a..40.
 80049e4:	ee00b018 ee00016e 00000000 70500005     ....n.........Pp
 80049f4:	70500020 30600020 30600060 60300060      .Pp .`0`.`0`.0`
 8004a04:	60300030 70200030 70200050 70200050     0.0`0. pP. pP. p
 8004a14:	20000070 00000000 00000000 00000000     p.. ............
 8004a24:	80000000 00000000 0000c000 00808000     ................
 8004a34:	8080c000 8000c080 08080c00 08080808     ................
 8004a44:	08080808 08080808 08080c0d 08080808     ................
 8004a54:	08080808 08080808 05650a0d e5050505     ..........e.....
 8004a64:	05e50505 c5050505 05650a0a e5050505     ..........e.....
 8004a74:	05e50505 c5050505 0c050a0a 050f0808     ................
 8004a84:	08050d0c 050d0808 0c050f0e 050f0808     ................
 8004a94:	08050d0c 050d0808 0a050a0a 95050665     ............e...
 8004aa4:	05350a0a 350ac505 0a950505 95050565     ..5....5....e...
 8004ab4:	05350a0a 050ac506 0f050a0a 08080805     ..5.............
 8004ac4:	080c0808 0808050f 0f080808 0c080805     ................
 8004ad4:	08080808 050f050f 05750a0a 050505b5     ..........u.....
 8004ae4:	650ac505 e505b505 05e50505 0ac505b5     ...e............
 8004af4:	05050565 d505b505 0c050a0a 08080808     e...............
 8004b04:	050f050d 050f080c 08050f08 0f050d08     ................
 8004b14:	08080c05 050d0808 0f050f0a c5050565     ............e...
 8004b24:	95e5350a b005650a 05b50505 e5350ac5     .5...e........5.
 8004b34:	05650a95 050fc505 0574070f 050f08d5     ..e.......t.....
 8004b44:	08050f0e 080c050f 0d080808 050f0805     ................
 8004b54:	08050f08 d405750f 0a050a07 f5050535     .....u......5...
 8004b64:	05b50505 0808d505 0f080c0d b5050575     ............u...
 8004b74:	05f50505 050a9505 08050a0a 050d0808     ................
 8004b84:	0808080c c505350d 05650a0a 08080c95     .....5....e.....
 8004b94:	0c050d08 050f0808 05750a0a 050ac506     ..........u.....
 8004ba4:	08080808 050f0808 08050f08 08080808     ................
 8004bb4:	0a050f08 d5050665 0c050a0a 350a050d     ....e..........5
 8004bc4:	05050505 f50505e5 05f50505 0505e505     ................
 8004bd4:	0a950505 050d0c05 08050a0a 0808050f     ................
 8004be4:	0f080808 050d0c05 0c050f08 0808050d     ................
 8004bf4:	0f080808 050f0805 05350a0a 0505b505     ..........5.....
 8004c04:	05050505 350a0a95 0a950505 0505350a     .......5.....5..
 8004c14:	05050505 950505b5 0808080a 08080808     ................
 8004c24:	08080808 08080f08 0f080808 08080808     ................
 8004c34:	08080808 08080808 99423c0f 013c4299     .........<B..B<.
 8004c44:	84780f10 78843232 78e01000 84fefefc     ..x.22.x...x....
 8004c54:	e0100078                                x...

08004c58 <BLITZ>:
 8004c58:	4c421712 205a5449 44207942 64697661     ..BLITZ By David
 8004c68:	4e495720 a3524554 61046041 670e6209      WINTER.A`.a.b.g
 8004c78:	f21ed004 300c701e f0211240 22e0000a     .....p.0@.!...."
 8004c88:	000af0d9 a3708ee0 cc1f6b1e dcc48c1f     ......p..k......
 8004c98:	12013fb2 12b2dc49 7a07ca39 dcfe7b01     .?..I...9..z.{..
 8004ca8:	3aff7ab2 7e4d1200 12003eff 8c006b39     .z.:..M~.>..9k..
 8004cb8:	6e006d70 dd1ba300 12003fe3 12003bc1     pm.n.....?...;..
 8004cc8:	e0056081 6b87129e 78d08801 79e08902     .`.....k...x...y
 8004cd8:	d81ea303 60f08191 f015f005 12003007     .......`.....0..
 8004ce8:	12013b8b 311ea3ab 7991d801 12203901     .;.....1...y.9 .
 8004cf8:	31006bab 4cff7c00 a3bb1200 7de3dd1b     .k.1.|.L.......}
 8004d08:	12403d02 7e006db9 00651201 120277e0     .=@..m.~..e..w..
 8004d18:	dd1ba32d 611460e3 a30b6202 f21bd020     -....`.a.b.. ...
 8004d28:	3008701e 12cd122c 610a60d7 a305620d     .p.0,....`.a.b..
 8004d38:	f215d007 3008701e 80e1122a 80fe7070     .....p.0*...pp..
 8004d48:	f087a306 6065f233 6129f12d 7015d00d     ....3.e`-.)a...p
 8004d58:	d029f205 83ee0015 fb828382 058808e8     ..).............
 8004d68:	b8a0bee2 80803e20 80f88080 c0c0fcf8     .... >..........
 8004d78:	cbdb81f9 8afa00fb eff8999a 2929e82a     ............*.))
 8004d88:	2e686f00 a0be8f4c 00beb0b8 343e22be     .oh.L........">4
 8004d98:	00d8d8b2 d800c3c3 c3c300d8 c0d8d800     ................
 8004da8:	c0c000c0 00c0c000 db00c0c0 00dbdbdb     ................
 8004db8:	18001818 18180018 dbdbdb00 181800db     ................
 8004dc8:	00181800 18001818 00dbdb18 18000303     ................
 8004dd8:	c0c00018 00dbdb00                       ........

08004de0 <PUZZLE15>:
 8004de0:	006ce000 0f6e004c 206003a2 e00055f0     ..l.L.n...` .U..
 8004df0:	7622be22 5e228e22 10124622 17620061     "."v"."^"F..a.b.
 8004e00:	10410463 e8a2ee00 65f01ef1 34120040     c.A........e@..4
 8004e10:	35d229f0 05720171 12840364 22120034     .).5q.r.d...4.."
 8004e20:	06731762 03642212 0365e284 5094d285     b.s.."d...e....P
 8004e30:	0344ee00 0164ee00 a622e484 03644612     ..D...d..."..Fd.
 8004e40:	0365e284 5094d285 0044ee00 ff64ee00     ..e....P..D...d.
 8004e50:	a622e484 0c645e12 0c65e284 5094d285     .."..^d...e....P
 8004e60:	0044ee00 fc64ee00 a622e484 0c647612     ..D...d..."..vd.
 8004e70:	0c65e284 5094d285 0c44ee00 0464ee00     ..e....P..D...d.
 8004e80:	a622e484 e8a28e12 65f01ef4 1efee8a2     .."........e....
 8004e90:	006055f0 1ef4e8a2 408e55f0 003cee00     .U`......U.@..<.
 8004ea0:	1c22d212 1c22d822 1efdf8a2 008d65f0     .."."."......e..
 8004eb0:	ff7cee00 ee000fcd 0f60017d 9eed028d     ..|.....}.`.....
 8004ec0:	a1edd812 ee00e212 04030201 08070605     ................
 8004ed0:	0c0b0a09 000f0e0d 0201000d 08060504     ................
 8004ee0:	0e0c0a09 0f0b0703                       ........

08004ee8 <TANK>:
 8004ee8:	fb763012 65802060 0066004f ff008413     .0v.` .eO.f.....
 8004ef8:	01000000 000a0c00 06040219 03020208     ................
 8004f08:	000f002c 082e0502 05020000 00000000     ,...............
 8004f18:	a06d006e 0669086a 02670468 10641966     n.m.j.i.h.g.f.d.
 8004f28:	00620c63 12a20661 d42355fa 15f04060     c.b.a....U#.`@..
 8004f38:	003007f0 d4235012 62230a23 65f512a2     ..0..P#.#.#b...e
 8004f48:	c622ae22 013fec22 013f1423 013fec22     ".".".?.#.?.".?.
 8004f58:	013fec22 014f7c22 62126613 65f512a2     ".?."|O..f.b...e
 8004f68:	00350046 8c138812 0962a1e7 0462a1e8     F.5.......b...b.
 8004f78:	0662a1e9 0162a1ea ee000042 2081ae22     ..b...b.B...".. 
 8004f88:	ac239a23 0062016c 12a2006f ffa355f5     #.#.l.b.o....U..
 8004f98:	00600141 13600441 0d600641 06600941     A.`.A.`.A.`.A.`.
 8004fa8:	47d31ef0 0560ee00 ee009ee0 ee000f45     ...G..`.....E...
 8004fb8:	ff760f65 55f512a2 03730374 9a239a23     e.v....Ut.s.#.#.
 8004fc8:	23a29a23 19a455f5 ee0041d3 65f523a2     #..#.U...A...#.e
 8004fd8:	ee000045 41d319a4 026c9a23 bb4bbe23     E......A#.l.#.K.
 8004fe8:	41d30a13 55f523a2 0065ee00 17a20060     ...A.#.U..e.`...
 8004ff8:	041355f0 65f51da2 44130f35 45d31aa4     .U.....e5..D...E
 8005008:	32130032 19a203c1 65f01ef1 0fc20081     2..2.......e....
 8005018:	9a230172 036c1aa4 006fff72 1da245d3     r.#...l.r.o..E..
 8005028:	ee0055f5 1fa407c4 65f01ef4 27a40083     .U.........e...'
 8005038:	65f01ef4 1aa40084 206045d3 0f6518f0     ...e.....E` ..e.
 8005048:	00653e13 014c3e13 024c0212 23a28213     .>e..>L...L....#
 8005058:	004565f5 19a40212 006f41d3 013f41d3     .eE......Ao..A?.
 8005068:	0a7e0212 18f04060 4a12e000 d423e000     ..~.`@.....J..#.
 8005078:	18f06060 006e9413 01418413 0441ff74     ``....n...A.t.A.
 8005088:	0641ff73 09410173 ee000174 01740044     s.A.s.A.t...D.t.
 8005098:	01730043 ff733843 ff741844 006bee00     C.s.C8s.D.t...k.
 80050a8:	ce130044 ce130043 ce133f43 bb6b1f44     D...C...C?..D.k.
 80050b8:	ee00006f 08640863 33fe29a2 ec2365f2     o...c.d..).3.e#.
 80050c8:	29a22863 65f233f6 ee00f223 45d329f0     c(.).3.e#....).E
 80050d8:	29f10673 067345d3 45d329f2 1001ee00     s..).Es..).E....
 80050e8:	7c6c7c54 7c7c447c 10547c6c 6e78fc00     T|l||D||l|T...xn
 80050f8:	3f00fc78 3f1e761e 70a88000 0ba870f8     x..?.v.?...p.p..
 8005108:	3038281b 00001020 1b080000 04181b1b     .(80 ...........

08005118 <PUZZLE>:
 8005118:	016b126a 00621061 b0a20060 29f027d1     j.k.a.b.`....'.)
 8005128:	b5da0030 087a0871 24123031 08721061     0...q.z.10.$a.r.
 8005138:	087b126a 1ef000a3 017055f0 0a121030     j.{......Up.0...
 8005148:	016b126a ff62006c 027006c0 ff725222     j.k.l.b...p."Rr.
 8005158:	38120032 006e006e 52220af0 017e017e     2..8n.n..."R~.~.
 8005168:	a0844812 c086b085 64120230 64120145     .H......0..dE..d
 8005178:	fc76f875 70120830 70121945 04760875     u.v.0..pE..pu.v.
 8005188:	7c120630 7c121244 ff76f874 88120430     0..|D..|t.v.0...
 8005198:	88122a44 01760874 1ef600a3 008165f0     D*..t.v......e..
 80051a8:	00a30060 55f01ef6 1efc00a3 55f01080     `......U.......U
 80051b8:	55d429f1 408ab5da 608c508b 5eeeee00     .).U...@.P.`...^
 80051c8:	fefefefe fefefefe                       ........

080051d0 <CONNECT4>:
 80051d0:	4f431a12 43454e4e 62203454 61442079     ..CONNECT4 by Da
 80051e0:	20646976 544e4957 bba25245 b4a265f6     vid WINTER...e..
 80051f0:	006955f6 006b0168 1f6e0f6d 0d60a5a2     .Ui.h.k.m.n...`.
 8005200:	00623261 2fd12fd0 1e320f72 21d03412     a2b.././r.2..4.!
 8005210:	017221d1 9fa20a60 21d121d0 e1dd9fa2     .!r.`....!.!....
 8005220:	e1dd0afc 7e12054c 6a12043c fb7dff7b     ....L..~<..j{.}.
 8005230:	7a120a3d 2d6d066b 063c7a12 017b9812     =..zk.m-.z<...{.
 8005240:	323d057d 006b7a12 e1dd0f6d b4a25012     }.=2.zk.m....P..
 8005250:	65f01efb 9812fc40 fb70008a 838955f0     ...e@.....p..U..
 8005260:	00399ea2 a4dda1a2 e1dd9fa2 f0605012     ..9..........P`.
 8005270:	909060f0 80808060 80808080 80808080     .`..`...........
 8005280:	80808080 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
 8005290:	00001a1a                                ....

08005294 <BREAKOUT>:
 8005294:	0065056e 006a066b b1da0ca3 403a047a     n.e.k.j.....z.:@
 80052a4:	027b0812 0612123b 1f6d206c d1dc10a3     ..{.;...l m.....
 80052b4:	0060f622 12a30061 087011d0 11d00ea3     ".`.a.....p.....
 80052c4:	15f04060 003007f0 0fc63412 01681e67     `@....0..4..g.h.
 80052d4:	0ea3ff69 10a371d6 0460d1dc fe7ca1e0     i....q....`...|.
 80052e4:	a1e00660 3f60027c d1dc028c 71d60ea3     `...|.`?.......q
 80052f4:	94878486 02863f60 12871f61 ac121f47     ....`?..a...G...
 8005304:	01680046 ff683f46 01690047 013f71d6     F.h.F?h.G.i..q?.
 8005314:	1f47aa12 0560aa12 003f7580 0160aa12     ..G...`..u?...`.
 8005324:	608018f0 1280fc61 71d00ca3 0389fe60     ...`a......q`...
 8005334:	0175f622 6045f622 4612de12 6080ff69     ".u.".E`...Fi..`
 8005344:	013fc580 0261ca12 013f1580 1580e012     ..?...a...?.....
 8005354:	ee12013f 013f1580 2060e812 0ea318f0     ?.....?...` ....
 8005364:	e080ff7e 00610480 003e11d0 de123012     ~.....a...>..0..
 8005374:	fe48ff78 ee12ff68 02480178 04600168     x.H.h...x.H.h.`.
 8005384:	ff6918f0 14a37012 65f233f5 376329f1     ..i..p...3.e.)c7
 8005394:	45d30064 29f20573 ee0045d3 008000f0     d..Es..).E......
 80053a4:	00aa00fc 00000000                       ........

080053ac <SYZYGY>:
 80053ac:	8d8d1212 3931a920 52203039 8e205454     .... .1990 RTT .
 80053bc:	b624008e 0f60da24 2412a1e0 a1e00e60     ..$.$.`....$`...
 80053cc:	16122812 2c12da24 2c12e000 10711fc1     .(..$..,...,..q.
 80053dc:	08720fc2 308503c3 20871086 00483088     ..r....0... .0H.
 80053ec:	01480177 0248ff77 03480176 4ca5ff76     w.H.w.H.v.H.v..L
 80053fc:	71d621d1 f169f064 1ef400a8 55f03080     .!.qd.i......0.U
 800540c:	00a80174 01601ef4 222555f0 007a006a     t.....`..U%"j.z.
 800541c:	003007f0 003d9c12 00609412 c5db29f0     ..0...=...`..)..
 800542c:	8c12013f 2225c5db 9c1215f0 016d15fe     ?.....%"......m.
 800543c:	9c12006e 29f0e080 2225c5db a1e00360     n......)..%"`...
 800544c:	06600063 0163a1e0 a1e00760 08600263     c.`...c.`...c.`.
 800545c:	0363a1e0 ff720043 01720143 ff710243     ..c.C.r.C.r.C.q.
 800546c:	01710343 21d14ca5 2413013f 8813013d     C.q..L.!?..$=...
 800547c:	02813f60 02821f60 1780b080 8813013f     `?..`.......?...
 800548c:	0370b080 013f1580 c0808813 013f2780     ..p...?......'?.
 800549c:	c0808813 25800470 8813013f 18f00460     ....p..%?...`...
 80054ac:	027e07ce 4ca5e48a 006021d1 c5db29f0     ..~....L.!`..)..
 80054bc:	29f0e080 3060c5db 07f015f0 1a130030     ...)..`0....0...
 80054cc:	21d14ca5 3e135093 00a80174 30801ef4     .L.!.P.>t......0
 80054dc:	017455f0 1ef400a8 55f00060 00a83085     .Ut.....`..U.0..
 80054ec:	65f01ef4 55f00170 5813004a ff700c60     ...ep..UJ..X`.p.
 80054fc:	4e130030 7012ff7a 71d64ca5 ff770048     0..Nz..p.L.qH.w.
 800550c:	01770148 ff760248 01760348 1ef900a8     H.w.H.v.H.v.....
 800551c:	ff7065f0 003055f0 01797012 1ef900a8     .ep..U0..py.....
 800552c:	008865f0 70120179 18f00d60 9ee00b60     .e..y..p`...`...
 800553c:	016b8e13 006d006c 0a3b017b 006baa13     ..k.l.m.{.;...k.
 800554c:	0a3c017c 006caa13 4ca5017d 004871d6     |.<...l.}..L.qH.
 800555c:	0148ff77 02480177 0348ff76 00a80176     w.H.w.H.v.H.v...
 800556c:	65f01ef9 55f0ff70 98130030 de134099     ...ep..U0....@..
 800557c:	00a80179 65f01ef9 01790088 e0009813     y......e..y.....
 800558c:	09671166 17692f68 7ed652a5 ff777ed8     f.g.h/i..R.~.~w.
 800559c:	71d64ea5 087691d6 91d671d6 71d60876     .N.q..v..q..v..q
 80055ac:	087691d6 71d650a5 9ea591d6 11671366     ..v..P.q....f.g.
 80055bc:	aea59a24 d09365f3 30802414 013fd580     $....e...$.0..?.
 80055cc:	44143a14 3214c092 c5802080 3a14013f     .:.D...2. ..?..:
 80055dc:	10804414 003fb580 aea54414 c082d083     .D....?..D......
 80055ec:	55f3b081 65f3aea5 f9771366 208c308d     ...U...ef.w..0. 
 80055fc:	a4a5108b 3fc19a24 0d601fc2 003f1580     ....$..?..`...?.
 800560c:	30607c14 003f1780 03607c14 003f2580     .|`0..?..|`..%?.
 800561c:	18607c14 003f2780 82147c14 29f30fc3     .|`..'?..|.....)
 800562c:	0f6025d1 9014a1e0 a1e00e60 56149614     .%`.....`......V
 800563c:	b624e000 e0002c12 75d62c12 0276aaa5     ..$..,...,.u..v.
 800564c:	29fd74d6 75d60a76 057629fc 29fb75d6     .t.)v..u.)v..u.)
 800565c:	75d60576 4ea5ee00 00620061 21d11f66     v..u...Na.b.f..!
 800566c:	087161d1 be144031 016252a5 2fd13f65     .aq.1@...Rb.e?./
 800567c:	0f722fd5 2fd52fd1 0c61ee00 62a50762     ./r.././..a.b..b
 800568c:	6ca52ad1 2ad10671 067176a5 6ca52ad1     .*.lq..*.vq..*.l
 800569c:	2ad10671 067180a5 6ca52ad1 2ad10671     q..*..q..*.lq..*
 80056ac:	18620e61 23d18aa5 08718ea5 24d1ff72     a.b....#..q.r..$
 80056bc:	fe720971 26d192a5 01720671 25d198a5     q.r....&q.r....%
 80056cc:	c56dee00 b08e3fcb 014fd48e 017b2415     ..m..?....O..${.
 80056dc:	1fcce66d d48ec08e 3215014f 006d017c     m.......O..2|.m.
 80056ec:	407e3fce 3fce15fe ee00407e 00ff0080     .?~@...?~@......
 80056fc:	808000fe 80808080 80808080 80808080     ................
 800570c:	101f8080 011f1010 1f010101 11111111     ................
 800571c:	0404041f 011f0404 04040202 1f100808     ................
 800572c:	1010111f 11111310 05051f11 51710002     ..............qQ
 800573c:	120c7551 0912141e 15153e14 4477002a     Qu.......>..*.wD
 800574c:	00771424 52725257 01000057 00000100     $.w.WRrRW.......
 800575c:	00000000                                ....

08005760 <KALEID>:
 8005760:	80630060 0f621f61 00a23222 0af01ef3     `.c.a.b."2......
 8005770:	004055f0 01731c12 08120033 00a28063     .U@...s.3...c...
 8005780:	65f01ef3 1c120040 00430173 32221c12     ...e@...s.C..."2
 8005790:	02401e12 0440ff72 0640ff71 08400171     ..@.r.@.q.@.q.@.
 80057a0:	77a20172 128ae06a b2811f6b 0172003a     r..wj...k...:.r.
 80057b0:	228af06a b2820f6b 0171003a b2811f6b     j.."k...:.q.k...
 80057c0:	108a21d1 258b1f6b 3f6ab1da b1da158a     .!..k..%..j?....
 80057d0:	b1da208b 8001ee00                       . ......

080057d8 <SQUASH>:
 80057d8:	0060d2a2 1e620061 21d011d0 40300870     ..`.a.b....!p.0@
 80057e8:	cda20812 01613e60 057115d0 18121a31     ....`>a...q.1...
 80057f8:	006314d0 08740fc4 51840165 02660365     ..c...t.e..Qe.f.
 8005808:	40880167 01690278 056b046a c8a2b822     g..@x.i.j.k."...
 8005818:	81d745d3 ae22016c 708cc8a2 9ee9808d     .E..l."....p....
 8005828:	01445c12 45d35c12 45d3ff74 6a129eea     .\D..\.Et..E...j
 8005838:	6a121944 017445d3 548745d3 01476488     D..j.Et..E.T.dG.
 8005848:	3d470365 0148fd65 1d480266 d1dcfe66     e.G=e.H.f.H.f...
 8005858:	013781d7 808c4412 006d458c 4412d09c     ..7..D...Em....D
 8005868:	053d017d 0afc8c12 ff7bb822 ff3bb822     }.=.....".{.".;.
 8005878:	b8224412 b822006b ae221e6c 15fca612     .D".k.".l.".....
 8005888:	003c07fc ee00b012 33fbd3a2 29f265f2     ..<........3.e.)
 8005898:	02613960 ee0015d0 80808080 e0e0e080     `9a.............
 80058a8:	00ffe0e0                                ....

080058ac <menu_cursor>:
 80058ac:	7f3e1c08                                ..>.

080058b0 <prog_size>:
 80058b0:	000001ee 000000e6 00000096 000000e5     ................
 80058c0:	00000352 00000026 00000118 000000ce     R...&...........
 80058d0:	000001fb 00000515 00000126 000001e6     ........&.......
 80058e0:	00000159 00000934 00000187 00000108     Y...4...........
 80058f0:	00000230 000000b8 000000c2 00000118     0...............
 8005900:	000003b2 00000078 000000d3              ....x.......

0800590c <font5x8>:
 800590c:	00000000 20261000 6b3e1026 1c3e6b5f     ......& &.>k_k>.
 800591c:	1c3e7c3e 3c7e3c18 7f440418 5e0c0444     >|>..<~<..D.D..^
 800592c:	1c0c5e7f 1c3e3e3e e7c3e7ff 2a0808ff     .^..>>>........*
 800593c:	1c08081c 300f083e 03314c48 29792906     ....>..0HL1..)y)
 800594c:	3e1c0806 3f300808 087c6201 081c361c     ...>..0?.b|..6..
 800595c:	1c3e7f00 3e1c0808 3614007f 0014367f     ..>....>...6.6..
 800596c:	005f005f 017f0f06 554a407f 7c7c0129     _._......@JU).||
 800597c:	947c7c7c 94b6ffb6 067f0604 7f301004     |||...........0.
 800598c:	00001030 08000000 08082a1c 0808080e     0........*......
 800599c:	081c0808 1c18081c 18181c1e 18387838     ............8x8.
 80059ac:	00000000 5f000000 07000000 14000700     ......._........
 80059bc:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 80059cc:	00502255 00000305 41221c00 22410000     U"P......."A..A"
 80059dc:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
 80059ec:	08080800 60000808 20000060 02040810     .......``.. ....
 80059fc:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
 8005a0c:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
 8005a1c:	01304949 03050971 49494936 49490636     II0.q...6III6.II
 8005a2c:	36001e29 00000036 00003656 22140800     )..66...V6....."
 8005a3c:	14141441 22411414 02000814 06095101     A.....A".....Q..
 8005a4c:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
 8005a5c:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
 8005a6c:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
 8005a7c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 8005a8c:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 8005a9c:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
 8005aac:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
 8005abc:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
 8005acc:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
 8005adc:	7f414120 02040000 40040201 40404040      AA........@@@@@
 8005aec:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
 8005afc:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
 8005b0c:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
 8005b1c:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
 8005b2c:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
 8005b3c:	1414147c 14140808 087c7c18 48080404     |........||....H
 8005b4c:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
 8005b5c:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
 8005b6c:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
 8005b7c:	36410000 02040008 7f040804 7f414141     ..A6........AAA.
 8005b8c:	44097f01 467c4438 00000c05 00003050     ...D8D|F....P0..
 8005b9c:	00090a78 50003050 40004030 02024000     x...P0.P0@.@.@..
 8005bac:	2202027f 22227f22 41553e14 64081322     ...""."".>UA"..d
 8005bbc:	017e6102 0030487f 00050600 487f087f     .a~..H0........H
 8005bcc:	12107e30 7f014629 3f700811 3f206020     0~..)F....p? ` ?
 8005bdc:	480a3f02 06000030 05000005 06000003     .?.H0...........
 8005bec:	05060005 05000305 3e3e1c03 08001c3e     ..........>>>...
 8005bfc:	08000808 08080808 09510102 27117906     ..........Q..y.'
 8005c0c:	04787911 0020507c 00000605 507c107c     .yx.|P .....|.|P
 8005c1c:	2a107c20 7f020041 3c700812 3c206020      |.*A.....p< ` <
 8005c2c:	00000000 22518c00 52880c11 30081224     ......Q"...R$..0
 8005c3c:	013f4170 18241824 427e4224 00000302     pA?.$.$.$B~B....
 8005c4c:	00000077 0029554a 4b4a4b7e a5997e42     w...JU).~KJKB~..
 8005c5c:	453e7ea5 08324145 14082214 08080808     .~>EEA2.."......
 8005c6c:	08080818 bd7e0808 427ea995 42437e43     ......~...~BC~CB
 8005c7c:	07050700 2e240000 41000024 0000417f     ......$.$..A.A..
 8005c8c:	00407d44 0c087808 10087c00 09061c08     D}@..x...|......
 8005c9c:	007f017f 00000800 55545538 20107c18     ........8UTU.|. 
 8005cac:	5438037b 14204454 08142208 023c4420     {.8TTD ..".. D<.
 8005cbc:	49494600 54483149 00205454 00417c45     .FIII1HTTT .E|A.
 8005ccc:	1111117e 49497f7e 497f3049 7f364949     ~...~.III0.III6.
 8005cdc:	01010101 3f213e60 49497f60 18674149     ....`>!?`.IIIAg.
 8005cec:	2267187f 36494941 0408107f 09107f7f     ..g"AII6........
 8005cfc:	087f7f04 40412214 7e01013e 0204027f     ....."A@>..~....
 8005d0c:	08087f7f 413e7f08 7f3e4141 7f010101     ......>AAA>.....
 8005d1c:	0909097f 41413e06 01012241 2701017f     .....>AAA".....'
 8005d2c:	3f484848 217f211e 0814631e 203f6314     HHH?.!.!.c...c? 
 8005d3c:	1f403f20 7f101010 407f407f 3f203f7f      ?@......@.@.? ?
 8005d4c:	7f017f20 7f384444 7f007c44 4444447f      ...DD8.D|...DDD
 8005d5c:	49412238 087f3e49 467f417f 7f091929     8"AII>...A.F)...
 8005d6c:	54545420 4a4a3c78 547c304b 7c205854      TTTx<JJK0|TTX |
 8005d7c:	04040404 3c243860 54543860 08741854     ....`8$<`8TTT.t.
 8005d8c:	2874087c 28545444 0810207c 12217c7c     |.t(DTT(| ..||!.
 8005d9c:	107c7c09 40442810 7c040478 0810087c     .||..(D@x..||...
 8005dac:	10107c7c 44387c10 7c384444 7c040404     ||...|8DDD8|...|
 8005dbc:	1414147c 44443808 04042844 0c04047c     |....8DDD(..|...
 8005dcc:	3c505050 247c2418 10284418 203c4428     PPP<.$|$.D(.(D< 
 8005ddc:	1c403c20 7c202020 407c407c 3c203c7c      <@.   ||@|@|< <
 8005dec:	7c047c20 7c304848 7c304848 4848487c      |.|HH0|HH0||HHH
 8005dfc:	54442830 387c3854 48384444 7c141434     0(DTT8|8DD8H4..|

08005e0c <chip8_fontset>:
 8005e0c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
 8005e1c:	f010f010 10f09090 f080f010 80f0f010     ................
 8005e2c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
 8005e3c:	90f0f010 e09090f0 e090e090 808080f0     ................
 8005e4c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
