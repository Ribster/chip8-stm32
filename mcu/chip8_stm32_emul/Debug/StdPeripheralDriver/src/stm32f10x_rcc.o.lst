   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_rcc.c"
  23              	.Ltext0:
  24              		.file 1 "../StdPeripheralDriver/src/stm32f10x_rcc.c"
 17711              		.align	2
 17714              	APBAHBPrescTable:
 17715 0000 00       		.byte	0
 17716 0001 00       		.byte	0
 17717 0002 00       		.byte	0
 17718 0003 00       		.byte	0
 17719 0004 01       		.byte	1
 17720 0005 02       		.byte	2
 17721 0006 03       		.byte	3
 17722 0007 04       		.byte	4
 17723 0008 01       		.byte	1
 17724 0009 02       		.byte	2
 17725 000a 03       		.byte	3
 17726 000b 04       		.byte	4
 17727 000c 06       		.byte	6
 17728 000d 07       		.byte	7
 17729 000e 08       		.byte	8
 17730 000f 09       		.byte	9
 17731              		.section	.data.ADCPrescTable,"aw",%progbits
 17732              		.align	2
 17735              	ADCPrescTable:
 17736 0000 02       		.byte	2
 17737 0001 04       		.byte	4
 17738 0002 06       		.byte	6
 17739 0003 08       		.byte	8
 17740              		.section	.text.RCC_DeInit,"ax",%progbits
 17741              		.align	2
 17742              		.global	RCC_DeInit
 17743              		.thumb
 17744              		.thumb_func
 17746              	RCC_DeInit:
 17747              	.LFB29:
   1:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  25:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  27:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  28:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  29:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  32:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
  33:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  34:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  36:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  37:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  38:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
  39:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
  40:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  41:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  42:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  44:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  45:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  46:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  49:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  51:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  56:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  60:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  70:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  74:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  76:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
  83:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  87:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  89:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  94:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  98:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 100:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 105:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 108:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 118:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 120:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 134:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 148:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 151:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 156:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 165:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 171:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 177:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 180:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 181:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 184:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 186:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 188:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 189:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 192:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 193:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 196:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 198:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 203:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 204:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 207:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 208:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 211:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 212:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 216:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17748              		.loc 1 218 0
 17749              		.cfi_startproc
 17750              		@ args = 0, pretend = 0, frame = 0
 17751              		@ frame_needed = 1, uses_anonymous_args = 0
 17752              		@ link register save eliminated.
 17753 0000 80B4     		push	{r7}
 17754              	.LCFI0:
 17755              		.cfi_def_cfa_offset 4
 17756 0002 00AF     		add	r7, sp, #0
 17757              		.cfi_offset 7, -4
 17758              	.LCFI1:
 17759              		.cfi_def_cfa_register 7
 219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
 17760              		.loc 1 220 0
 17761 0004 154B     		ldr	r3, .L2
 17762 0006 154A     		ldr	r2, .L2
 17763 0008 1268     		ldr	r2, [r2, #0]
 17764 000a 42F00102 		orr	r2, r2, #1
 17765 000e 1A60     		str	r2, [r3, #0]
 221:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 17766              		.loc 1 224 0
 17767 0010 124A     		ldr	r2, .L2
 17768 0012 124B     		ldr	r3, .L2
 17769 0014 5968     		ldr	r1, [r3, #4]
 17770 0016 124B     		ldr	r3, .L2+4
 17771 0018 01EA0303 		and	r3, r1, r3
 17772 001c 5360     		str	r3, [r2, #4]
 225:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 229:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 17773              		.loc 1 230 0
 17774 001e 0F4A     		ldr	r2, .L2
 17775 0020 0E4B     		ldr	r3, .L2
 17776 0022 1B68     		ldr	r3, [r3, #0]
 17777 0024 23F08473 		bic	r3, r3, #17301504
 17778 0028 23F48033 		bic	r3, r3, #65536
 17779 002c 1360     		str	r3, [r2, #0]
 231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 17780              		.loc 1 233 0
 17781 002e 0B4B     		ldr	r3, .L2
 17782 0030 0A4A     		ldr	r2, .L2
 17783 0032 1268     		ldr	r2, [r2, #0]
 17784 0034 22F48022 		bic	r2, r2, #262144
 17785 0038 1A60     		str	r2, [r3, #0]
 234:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 17786              		.loc 1 236 0
 17787 003a 084B     		ldr	r3, .L2
 17788 003c 074A     		ldr	r2, .L2
 17789 003e 5268     		ldr	r2, [r2, #4]
 17790 0040 22F4FE02 		bic	r2, r2, #8323072
 17791 0044 5A60     		str	r2, [r3, #4]
 237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 242:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 17792              		.loc 1 249 0
 17793 0046 054B     		ldr	r3, .L2
 17794 0048 4FF41F02 		mov	r2, #10420224
 17795 004c 9A60     		str	r2, [r3, #8]
 250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 251:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 17796              		.loc 1 252 0
 17797 004e 034B     		ldr	r3, .L2
 17798 0050 4FF00002 		mov	r2, #0
 17799 0054 DA62     		str	r2, [r3, #44]
 253:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 258:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17800              		.loc 1 258 0
 17801 0056 BD46     		mov	sp, r7
 17802 0058 80BC     		pop	{r7}
 17803 005a 7047     		bx	lr
 17804              	.L3:
 17805              		.align	2
 17806              	.L2:
 17807 005c 00100240 		.word	1073876992
 17808 0060 0000FFF8 		.word	-117506048
 17809              		.cfi_endproc
 17810              	.LFE29:
 17812              		.section	.text.RCC_HSEConfig,"ax",%progbits
 17813              		.align	2
 17814              		.global	RCC_HSEConfig
 17815              		.thumb
 17816              		.thumb_func
 17818              	RCC_HSEConfig:
 17819              	.LFB30:
 259:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 260:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 270:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17820              		.loc 1 271 0
 17821              		.cfi_startproc
 17822              		@ args = 0, pretend = 0, frame = 8
 17823              		@ frame_needed = 1, uses_anonymous_args = 0
 17824              		@ link register save eliminated.
 17825 0000 80B4     		push	{r7}
 17826              	.LCFI2:
 17827              		.cfi_def_cfa_offset 4
 17828 0002 83B0     		sub	sp, sp, #12
 17829              	.LCFI3:
 17830              		.cfi_def_cfa_offset 16
 17831 0004 00AF     		add	r7, sp, #0
 17832              		.cfi_offset 7, -4
 17833              	.LCFI4:
 17834              		.cfi_def_cfa_register 7
 17835 0006 7860     		str	r0, [r7, #4]
 272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 17836              		.loc 1 276 0
 17837 0008 134B     		ldr	r3, .L9
 17838 000a 134A     		ldr	r2, .L9
 17839 000c 1268     		ldr	r2, [r2, #0]
 17840 000e 22F48032 		bic	r2, r2, #65536
 17841 0012 1A60     		str	r2, [r3, #0]
 277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 17842              		.loc 1 278 0
 17843 0014 104B     		ldr	r3, .L9
 17844 0016 104A     		ldr	r2, .L9
 17845 0018 1268     		ldr	r2, [r2, #0]
 17846 001a 22F48022 		bic	r2, r2, #262144
 17847 001e 1A60     		str	r2, [r3, #0]
 279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 17848              		.loc 1 280 0
 17849 0020 7B68     		ldr	r3, [r7, #4]
 17850 0022 B3F5803F 		cmp	r3, #65536
 17851 0026 03D0     		beq	.L6
 17852 0028 B3F5802F 		cmp	r3, #262144
 17853 002c 07D0     		beq	.L7
 281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 282:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 286:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 291:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17854              		.loc 1 293 0
 17855 002e 0DE0     		b	.L4
 17856              	.L6:
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 17857              		.loc 1 284 0
 17858 0030 094B     		ldr	r3, .L9
 17859 0032 094A     		ldr	r2, .L9
 17860 0034 1268     		ldr	r2, [r2, #0]
 17861 0036 42F48032 		orr	r2, r2, #65536
 17862 003a 1A60     		str	r2, [r3, #0]
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17863              		.loc 1 285 0
 17864 003c 06E0     		b	.L4
 17865              	.L7:
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 17866              		.loc 1 289 0
 17867 003e 064B     		ldr	r3, .L9
 17868 0040 054A     		ldr	r2, .L9
 17869 0042 1268     		ldr	r2, [r2, #0]
 17870 0044 42F4A022 		orr	r2, r2, #327680
 17871 0048 1A60     		str	r2, [r3, #0]
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17872              		.loc 1 290 0
 17873 004a 00BF     		nop
 17874              	.L4:
 294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 295:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17875              		.loc 1 295 0
 17876 004c 07F10C07 		add	r7, r7, #12
 17877 0050 BD46     		mov	sp, r7
 17878 0052 80BC     		pop	{r7}
 17879 0054 7047     		bx	lr
 17880              	.L10:
 17881 0056 00BF     		.align	2
 17882              	.L9:
 17883 0058 00100240 		.word	1073876992
 17884              		.cfi_endproc
 17885              	.LFE30:
 17887              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 17888              		.align	2
 17889              		.global	RCC_WaitForHSEStartUp
 17890              		.thumb
 17891              		.thumb_func
 17893              	RCC_WaitForHSEStartUp:
 17894              	.LFB31:
 296:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 297:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 304:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17895              		.loc 1 305 0
 17896              		.cfi_startproc
 17897              		@ args = 0, pretend = 0, frame = 8
 17898              		@ frame_needed = 1, uses_anonymous_args = 0
 17899 0000 80B5     		push	{r7, lr}
 17900              	.LCFI5:
 17901              		.cfi_def_cfa_offset 8
 17902 0002 82B0     		sub	sp, sp, #8
 17903              	.LCFI6:
 17904              		.cfi_def_cfa_offset 16
 17905 0004 00AF     		add	r7, sp, #0
 17906              		.cfi_offset 14, -4
 17907              		.cfi_offset 7, -8
 17908              	.LCFI7:
 17909              		.cfi_def_cfa_register 7
 306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 17910              		.loc 1 306 0
 17911 0006 4FF00003 		mov	r3, #0
 17912 000a 3B60     		str	r3, [r7, #0]
 307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 17913              		.loc 1 307 0
 17914 000c 4FF00003 		mov	r3, #0
 17915 0010 FB71     		strb	r3, [r7, #7]
 308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 17916              		.loc 1 308 0
 17917 0012 4FF00003 		mov	r3, #0
 17918 0016 BB71     		strb	r3, [r7, #6]
 17919              	.L13:
 309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   do
 312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 17920              		.loc 1 313 0 discriminator 1
 17921 0018 4FF03100 		mov	r0, #49
 17922 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 17923 0020 0346     		mov	r3, r0
 17924 0022 BB71     		strb	r3, [r7, #6]
 314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 17925              		.loc 1 314 0 discriminator 1
 17926 0024 3B68     		ldr	r3, [r7, #0]
 17927 0026 03F10103 		add	r3, r3, #1
 17928 002a 3B60     		str	r3, [r7, #0]
 315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 17929              		.loc 1 315 0 discriminator 1
 17930 002c 3B68     		ldr	r3, [r7, #0]
 17931 002e B3F5A06F 		cmp	r3, #1280
 17932 0032 02D0     		beq	.L12
 17933 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 17934 0036 002B     		cmp	r3, #0
 17935 0038 EED0     		beq	.L13
 17936              	.L12:
 316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 17937              		.loc 1 317 0
 17938 003a 4FF03100 		mov	r0, #49
 17939 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 17940 0042 0346     		mov	r3, r0
 17941 0044 002B     		cmp	r3, #0
 17942 0046 03D0     		beq	.L14
 318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = SUCCESS;
 17943              		.loc 1 319 0
 17944 0048 4FF00103 		mov	r3, #1
 17945 004c FB71     		strb	r3, [r7, #7]
 17946 004e 02E0     		b	.L15
 17947              	.L14:
 320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = ERROR;
 17948              		.loc 1 323 0
 17949 0050 4FF00003 		mov	r3, #0
 17950 0054 FB71     		strb	r3, [r7, #7]
 17951              	.L15:
 324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }  
 325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return (status);
 17952              		.loc 1 325 0
 17953 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17954              		.loc 1 326 0
 17955 0058 1846     		mov	r0, r3
 17956 005a 07F10807 		add	r7, r7, #8
 17957 005e BD46     		mov	sp, r7
 17958 0060 80BD     		pop	{r7, pc}
 17959              		.cfi_endproc
 17960              	.LFE31:
 17962 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 17963              		.align	2
 17964              		.global	RCC_AdjustHSICalibrationValue
 17965              		.thumb
 17966              		.thumb_func
 17968              	RCC_AdjustHSICalibrationValue:
 17969              	.LFB32:
 327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 328:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 333:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 334:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17970              		.loc 1 335 0
 17971              		.cfi_startproc
 17972              		@ args = 0, pretend = 0, frame = 16
 17973              		@ frame_needed = 1, uses_anonymous_args = 0
 17974              		@ link register save eliminated.
 17975 0000 80B4     		push	{r7}
 17976              	.LCFI8:
 17977              		.cfi_def_cfa_offset 4
 17978 0002 85B0     		sub	sp, sp, #20
 17979              	.LCFI9:
 17980              		.cfi_def_cfa_offset 24
 17981 0004 00AF     		add	r7, sp, #0
 17982              		.cfi_offset 7, -4
 17983              	.LCFI10:
 17984              		.cfi_def_cfa_register 7
 17985 0006 0346     		mov	r3, r0
 17986 0008 FB71     		strb	r3, [r7, #7]
 336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17987              		.loc 1 336 0
 17988 000a 4FF00003 		mov	r3, #0
 17989 000e FB60     		str	r3, [r7, #12]
 337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 17990              		.loc 1 339 0
 17991 0010 0A4B     		ldr	r3, .L17
 17992 0012 1B68     		ldr	r3, [r3, #0]
 17993 0014 FB60     		str	r3, [r7, #12]
 340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 17994              		.loc 1 341 0
 17995 0016 FB68     		ldr	r3, [r7, #12]
 17996 0018 23F0F803 		bic	r3, r3, #248
 17997 001c FB60     		str	r3, [r7, #12]
 342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 17998              		.loc 1 343 0
 17999 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 18000 0020 4FEAC303 		lsl	r3, r3, #3
 18001 0024 FA68     		ldr	r2, [r7, #12]
 18002 0026 42EA0303 		orr	r3, r2, r3
 18003 002a FB60     		str	r3, [r7, #12]
 344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 18004              		.loc 1 345 0
 18005 002c 034B     		ldr	r3, .L17
 18006 002e FA68     		ldr	r2, [r7, #12]
 18007 0030 1A60     		str	r2, [r3, #0]
 346:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18008              		.loc 1 346 0
 18009 0032 07F11407 		add	r7, r7, #20
 18010 0036 BD46     		mov	sp, r7
 18011 0038 80BC     		pop	{r7}
 18012 003a 7047     		bx	lr
 18013              	.L18:
 18014              		.align	2
 18015              	.L17:
 18016 003c 00100240 		.word	1073876992
 18017              		.cfi_endproc
 18018              	.LFE32:
 18020              		.section	.text.RCC_HSICmd,"ax",%progbits
 18021              		.align	2
 18022              		.global	RCC_HSICmd
 18023              		.thumb
 18024              		.thumb_func
 18026              	RCC_HSICmd:
 18027              	.LFB33:
 347:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 354:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18028              		.loc 1 355 0
 18029              		.cfi_startproc
 18030              		@ args = 0, pretend = 0, frame = 8
 18031              		@ frame_needed = 1, uses_anonymous_args = 0
 18032              		@ link register save eliminated.
 18033 0000 80B4     		push	{r7}
 18034              	.LCFI11:
 18035              		.cfi_def_cfa_offset 4
 18036 0002 83B0     		sub	sp, sp, #12
 18037              	.LCFI12:
 18038              		.cfi_def_cfa_offset 16
 18039 0004 00AF     		add	r7, sp, #0
 18040              		.cfi_offset 7, -4
 18041              	.LCFI13:
 18042              		.cfi_def_cfa_register 7
 18043 0006 0346     		mov	r3, r0
 18044 0008 FB71     		strb	r3, [r7, #7]
 356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 18045              		.loc 1 358 0
 18046 000a 044B     		ldr	r3, .L20
 18047 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18048 000e 1A60     		str	r2, [r3, #0]
 359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18049              		.loc 1 359 0
 18050 0010 07F10C07 		add	r7, r7, #12
 18051 0014 BD46     		mov	sp, r7
 18052 0016 80BC     		pop	{r7}
 18053 0018 7047     		bx	lr
 18054              	.L21:
 18055 001a 00BF     		.align	2
 18056              	.L20:
 18057 001c 00004242 		.word	1111621632
 18058              		.cfi_endproc
 18059              	.LFE33:
 18061              		.section	.text.RCC_PLLConfig,"ax",%progbits
 18062              		.align	2
 18063              		.global	RCC_PLLConfig
 18064              		.thumb
 18065              		.thumb_func
 18067              	RCC_PLLConfig:
 18068              	.LFB34:
 360:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 361:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 362:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 377:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 378:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18069              		.loc 1 379 0
 18070              		.cfi_startproc
 18071              		@ args = 0, pretend = 0, frame = 16
 18072              		@ frame_needed = 1, uses_anonymous_args = 0
 18073              		@ link register save eliminated.
 18074 0000 80B4     		push	{r7}
 18075              	.LCFI14:
 18076              		.cfi_def_cfa_offset 4
 18077 0002 85B0     		sub	sp, sp, #20
 18078              	.LCFI15:
 18079              		.cfi_def_cfa_offset 24
 18080 0004 00AF     		add	r7, sp, #0
 18081              		.cfi_offset 7, -4
 18082              	.LCFI16:
 18083              		.cfi_def_cfa_register 7
 18084 0006 7860     		str	r0, [r7, #4]
 18085 0008 3960     		str	r1, [r7, #0]
 380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18086              		.loc 1 380 0
 18087 000a 4FF00003 		mov	r3, #0
 18088 000e FB60     		str	r3, [r7, #12]
 381:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18089              		.loc 1 386 0
 18090 0010 0B4B     		ldr	r3, .L23
 18091 0012 5B68     		ldr	r3, [r3, #4]
 18092 0014 FB60     		str	r3, [r7, #12]
 387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 18093              		.loc 1 388 0
 18094 0016 FB68     		ldr	r3, [r7, #12]
 18095 0018 23F47413 		bic	r3, r3, #3997696
 18096 001c FB60     		str	r3, [r7, #12]
 389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 18097              		.loc 1 390 0
 18098 001e 7A68     		ldr	r2, [r7, #4]
 18099 0020 3B68     		ldr	r3, [r7, #0]
 18100 0022 42EA0303 		orr	r3, r2, r3
 18101 0026 FA68     		ldr	r2, [r7, #12]
 18102 0028 42EA0303 		orr	r3, r2, r3
 18103 002c FB60     		str	r3, [r7, #12]
 391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18104              		.loc 1 392 0
 18105 002e 044B     		ldr	r3, .L23
 18106 0030 FA68     		ldr	r2, [r7, #12]
 18107 0032 5A60     		str	r2, [r3, #4]
 393:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18108              		.loc 1 393 0
 18109 0034 07F11407 		add	r7, r7, #20
 18110 0038 BD46     		mov	sp, r7
 18111 003a 80BC     		pop	{r7}
 18112 003c 7047     		bx	lr
 18113              	.L24:
 18114 003e 00BF     		.align	2
 18115              	.L23:
 18116 0040 00100240 		.word	1073876992
 18117              		.cfi_endproc
 18118              	.LFE34:
 18120              		.section	.text.RCC_PLLCmd,"ax",%progbits
 18121              		.align	2
 18122              		.global	RCC_PLLCmd
 18123              		.thumb
 18124              		.thumb_func
 18126              	RCC_PLLCmd:
 18127              	.LFB35:
 394:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 395:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 401:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18128              		.loc 1 402 0
 18129              		.cfi_startproc
 18130              		@ args = 0, pretend = 0, frame = 8
 18131              		@ frame_needed = 1, uses_anonymous_args = 0
 18132              		@ link register save eliminated.
 18133 0000 80B4     		push	{r7}
 18134              	.LCFI17:
 18135              		.cfi_def_cfa_offset 4
 18136 0002 83B0     		sub	sp, sp, #12
 18137              	.LCFI18:
 18138              		.cfi_def_cfa_offset 16
 18139 0004 00AF     		add	r7, sp, #0
 18140              		.cfi_offset 7, -4
 18141              	.LCFI19:
 18142              		.cfi_def_cfa_register 7
 18143 0006 0346     		mov	r3, r0
 18144 0008 FB71     		strb	r3, [r7, #7]
 403:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 18145              		.loc 1 406 0
 18146 000a 044B     		ldr	r3, .L26
 18147 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18148 000e 1A60     		str	r2, [r3, #0]
 407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18149              		.loc 1 407 0
 18150 0010 07F10C07 		add	r7, r7, #12
 18151 0014 BD46     		mov	sp, r7
 18152 0016 80BC     		pop	{r7}
 18153 0018 7047     		bx	lr
 18154              	.L27:
 18155 001a 00BF     		.align	2
 18156              	.L26:
 18157 001c 60004242 		.word	1111621728
 18158              		.cfi_endproc
 18159              	.LFE35:
 18161              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 18162              		.align	2
 18163              		.global	RCC_PREDIV1Config
 18164              		.thumb
 18165              		.thumb_func
 18167              	RCC_PREDIV1Config:
 18168              	.LFB36:
 408:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 409:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     devices.
 416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 421:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 426:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18169              		.loc 1 427 0
 18170              		.cfi_startproc
 18171              		@ args = 0, pretend = 0, frame = 16
 18172              		@ frame_needed = 1, uses_anonymous_args = 0
 18173              		@ link register save eliminated.
 18174 0000 80B4     		push	{r7}
 18175              	.LCFI20:
 18176              		.cfi_def_cfa_offset 4
 18177 0002 85B0     		sub	sp, sp, #20
 18178              	.LCFI21:
 18179              		.cfi_def_cfa_offset 24
 18180 0004 00AF     		add	r7, sp, #0
 18181              		.cfi_offset 7, -4
 18182              	.LCFI22:
 18183              		.cfi_def_cfa_register 7
 18184 0006 7860     		str	r0, [r7, #4]
 18185 0008 3960     		str	r1, [r7, #0]
 428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18186              		.loc 1 428 0
 18187 000a 4FF00003 		mov	r3, #0
 18188 000e FB60     		str	r3, [r7, #12]
 429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 18189              		.loc 1 434 0
 18190 0010 0C4B     		ldr	r3, .L29
 18191 0012 DB6A     		ldr	r3, [r3, #44]
 18192 0014 FB60     		str	r3, [r7, #12]
 435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 18193              		.loc 1 436 0
 18194 0016 FB68     		ldr	r3, [r7, #12]
 18195 0018 23F48033 		bic	r3, r3, #65536
 18196 001c 23F00F03 		bic	r3, r3, #15
 18197 0020 FB60     		str	r3, [r7, #12]
 437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 18198              		.loc 1 438 0
 18199 0022 7A68     		ldr	r2, [r7, #4]
 18200 0024 3B68     		ldr	r3, [r7, #0]
 18201 0026 42EA0303 		orr	r3, r2, r3
 18202 002a FA68     		ldr	r2, [r7, #12]
 18203 002c 42EA0303 		orr	r3, r2, r3
 18204 0030 FB60     		str	r3, [r7, #12]
 439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 18205              		.loc 1 440 0
 18206 0032 044B     		ldr	r3, .L29
 18207 0034 FA68     		ldr	r2, [r7, #12]
 18208 0036 DA62     		str	r2, [r3, #44]
 441:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18209              		.loc 1 441 0
 18210 0038 07F11407 		add	r7, r7, #20
 18211 003c BD46     		mov	sp, r7
 18212 003e 80BC     		pop	{r7}
 18213 0040 7047     		bx	lr
 18214              	.L30:
 18215 0042 00BF     		.align	2
 18216              	.L29:
 18217 0044 00100240 		.word	1073876992
 18218              		.cfi_endproc
 18219              	.LFE36:
 18221              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 18222              		.align	2
 18223              		.global	RCC_SYSCLKConfig
 18224              		.thumb
 18225              		.thumb_func
 18227              	RCC_SYSCLKConfig:
 18228              	.LFB37:
 442:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 443:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 444:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 448:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 454:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 456:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 458:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 461:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 469:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 470:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 471:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 473:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 478:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 479:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 481:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 483:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 486:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 494:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 495:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 496:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 497:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 499:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 504:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 505:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 507:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 510:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 512:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 513:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 514:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 515:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 517:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 522:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 523:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 525:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 530:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 538:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 539:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 540:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 541:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 545:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 546:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 548:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 550:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 553:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 555:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 556:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 563:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 564:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18229              		.loc 1 565 0
 18230              		.cfi_startproc
 18231              		@ args = 0, pretend = 0, frame = 16
 18232              		@ frame_needed = 1, uses_anonymous_args = 0
 18233              		@ link register save eliminated.
 18234 0000 80B4     		push	{r7}
 18235              	.LCFI23:
 18236              		.cfi_def_cfa_offset 4
 18237 0002 85B0     		sub	sp, sp, #20
 18238              	.LCFI24:
 18239              		.cfi_def_cfa_offset 24
 18240 0004 00AF     		add	r7, sp, #0
 18241              		.cfi_offset 7, -4
 18242              	.LCFI25:
 18243              		.cfi_def_cfa_register 7
 18244 0006 7860     		str	r0, [r7, #4]
 566:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18245              		.loc 1 566 0
 18246 0008 4FF00003 		mov	r3, #0
 18247 000c FB60     		str	r3, [r7, #12]
 567:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18248              		.loc 1 569 0
 18249 000e 0A4B     		ldr	r3, .L32
 18250 0010 5B68     		ldr	r3, [r3, #4]
 18251 0012 FB60     		str	r3, [r7, #12]
 570:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 18252              		.loc 1 571 0
 18253 0014 FB68     		ldr	r3, [r7, #12]
 18254 0016 23F00303 		bic	r3, r3, #3
 18255 001a FB60     		str	r3, [r7, #12]
 572:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 18256              		.loc 1 573 0
 18257 001c FA68     		ldr	r2, [r7, #12]
 18258 001e 7B68     		ldr	r3, [r7, #4]
 18259 0020 42EA0303 		orr	r3, r2, r3
 18260 0024 FB60     		str	r3, [r7, #12]
 574:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18261              		.loc 1 575 0
 18262 0026 044B     		ldr	r3, .L32
 18263 0028 FA68     		ldr	r2, [r7, #12]
 18264 002a 5A60     		str	r2, [r3, #4]
 576:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18265              		.loc 1 576 0
 18266 002c 07F11407 		add	r7, r7, #20
 18267 0030 BD46     		mov	sp, r7
 18268 0032 80BC     		pop	{r7}
 18269 0034 7047     		bx	lr
 18270              	.L33:
 18271 0036 00BF     		.align	2
 18272              	.L32:
 18273 0038 00100240 		.word	1073876992
 18274              		.cfi_endproc
 18275              	.LFE37:
 18277              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 18278              		.align	2
 18279              		.global	RCC_GetSYSCLKSource
 18280              		.thumb
 18281              		.thumb_func
 18283              	RCC_GetSYSCLKSource:
 18284              	.LFB38:
 577:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 578:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 579:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 581:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 587:../StdPeripheralDriver/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18285              		.loc 1 588 0
 18286              		.cfi_startproc
 18287              		@ args = 0, pretend = 0, frame = 0
 18288              		@ frame_needed = 1, uses_anonymous_args = 0
 18289              		@ link register save eliminated.
 18290 0000 80B4     		push	{r7}
 18291              	.LCFI26:
 18292              		.cfi_def_cfa_offset 4
 18293 0002 00AF     		add	r7, sp, #0
 18294              		.cfi_offset 7, -4
 18295              	.LCFI27:
 18296              		.cfi_def_cfa_register 7
 589:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 18297              		.loc 1 589 0
 18298 0004 044B     		ldr	r3, .L35
 18299 0006 5B68     		ldr	r3, [r3, #4]
 18300 0008 DBB2     		uxtb	r3, r3
 18301 000a 03F00C03 		and	r3, r3, #12
 18302 000e DBB2     		uxtb	r3, r3
 590:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18303              		.loc 1 590 0
 18304 0010 1846     		mov	r0, r3
 18305 0012 BD46     		mov	sp, r7
 18306 0014 80BC     		pop	{r7}
 18307 0016 7047     		bx	lr
 18308              	.L36:
 18309              		.align	2
 18310              	.L35:
 18311 0018 00100240 		.word	1073876992
 18312              		.cfi_endproc
 18313              	.LFE38:
 18315              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 18316              		.align	2
 18317              		.global	RCC_HCLKConfig
 18318              		.thumb
 18319              		.thumb_func
 18321              	RCC_HCLKConfig:
 18322              	.LFB39:
 591:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 592:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 593:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 607:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 608:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18323              		.loc 1 609 0
 18324              		.cfi_startproc
 18325              		@ args = 0, pretend = 0, frame = 16
 18326              		@ frame_needed = 1, uses_anonymous_args = 0
 18327              		@ link register save eliminated.
 18328 0000 80B4     		push	{r7}
 18329              	.LCFI28:
 18330              		.cfi_def_cfa_offset 4
 18331 0002 85B0     		sub	sp, sp, #20
 18332              	.LCFI29:
 18333              		.cfi_def_cfa_offset 24
 18334 0004 00AF     		add	r7, sp, #0
 18335              		.cfi_offset 7, -4
 18336              	.LCFI30:
 18337              		.cfi_def_cfa_register 7
 18338 0006 7860     		str	r0, [r7, #4]
 610:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18339              		.loc 1 610 0
 18340 0008 4FF00003 		mov	r3, #0
 18341 000c FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18342              		.loc 1 613 0
 18343 000e 0A4B     		ldr	r3, .L38
 18344 0010 5B68     		ldr	r3, [r3, #4]
 18345 0012 FB60     		str	r3, [r7, #12]
 614:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 18346              		.loc 1 615 0
 18347 0014 FB68     		ldr	r3, [r7, #12]
 18348 0016 23F0F003 		bic	r3, r3, #240
 18349 001a FB60     		str	r3, [r7, #12]
 616:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 18350              		.loc 1 617 0
 18351 001c FA68     		ldr	r2, [r7, #12]
 18352 001e 7B68     		ldr	r3, [r7, #4]
 18353 0020 42EA0303 		orr	r3, r2, r3
 18354 0024 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18355              		.loc 1 619 0
 18356 0026 044B     		ldr	r3, .L38
 18357 0028 FA68     		ldr	r2, [r7, #12]
 18358 002a 5A60     		str	r2, [r3, #4]
 620:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18359              		.loc 1 620 0
 18360 002c 07F11407 		add	r7, r7, #20
 18361 0030 BD46     		mov	sp, r7
 18362 0032 80BC     		pop	{r7}
 18363 0034 7047     		bx	lr
 18364              	.L39:
 18365 0036 00BF     		.align	2
 18366              	.L38:
 18367 0038 00100240 		.word	1073876992
 18368              		.cfi_endproc
 18369              	.LFE39:
 18371              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 18372              		.align	2
 18373              		.global	RCC_PCLK1Config
 18374              		.thumb
 18375              		.thumb_func
 18377              	RCC_PCLK1Config:
 18378              	.LFB40:
 621:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 622:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 623:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 633:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 634:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18379              		.loc 1 635 0
 18380              		.cfi_startproc
 18381              		@ args = 0, pretend = 0, frame = 16
 18382              		@ frame_needed = 1, uses_anonymous_args = 0
 18383              		@ link register save eliminated.
 18384 0000 80B4     		push	{r7}
 18385              	.LCFI31:
 18386              		.cfi_def_cfa_offset 4
 18387 0002 85B0     		sub	sp, sp, #20
 18388              	.LCFI32:
 18389              		.cfi_def_cfa_offset 24
 18390 0004 00AF     		add	r7, sp, #0
 18391              		.cfi_offset 7, -4
 18392              	.LCFI33:
 18393              		.cfi_def_cfa_register 7
 18394 0006 7860     		str	r0, [r7, #4]
 636:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18395              		.loc 1 636 0
 18396 0008 4FF00003 		mov	r3, #0
 18397 000c FB60     		str	r3, [r7, #12]
 637:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18398              		.loc 1 639 0
 18399 000e 0A4B     		ldr	r3, .L41
 18400 0010 5B68     		ldr	r3, [r3, #4]
 18401 0012 FB60     		str	r3, [r7, #12]
 640:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 18402              		.loc 1 641 0
 18403 0014 FB68     		ldr	r3, [r7, #12]
 18404 0016 23F4E063 		bic	r3, r3, #1792
 18405 001a FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 18406              		.loc 1 643 0
 18407 001c FA68     		ldr	r2, [r7, #12]
 18408 001e 7B68     		ldr	r3, [r7, #4]
 18409 0020 42EA0303 		orr	r3, r2, r3
 18410 0024 FB60     		str	r3, [r7, #12]
 644:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18411              		.loc 1 645 0
 18412 0026 044B     		ldr	r3, .L41
 18413 0028 FA68     		ldr	r2, [r7, #12]
 18414 002a 5A60     		str	r2, [r3, #4]
 646:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18415              		.loc 1 646 0
 18416 002c 07F11407 		add	r7, r7, #20
 18417 0030 BD46     		mov	sp, r7
 18418 0032 80BC     		pop	{r7}
 18419 0034 7047     		bx	lr
 18420              	.L42:
 18421 0036 00BF     		.align	2
 18422              	.L41:
 18423 0038 00100240 		.word	1073876992
 18424              		.cfi_endproc
 18425              	.LFE40:
 18427              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 18428              		.align	2
 18429              		.global	RCC_PCLK2Config
 18430              		.thumb
 18431              		.thumb_func
 18433              	RCC_PCLK2Config:
 18434              	.LFB41:
 647:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 648:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 649:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 659:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 660:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18435              		.loc 1 661 0
 18436              		.cfi_startproc
 18437              		@ args = 0, pretend = 0, frame = 16
 18438              		@ frame_needed = 1, uses_anonymous_args = 0
 18439              		@ link register save eliminated.
 18440 0000 80B4     		push	{r7}
 18441              	.LCFI34:
 18442              		.cfi_def_cfa_offset 4
 18443 0002 85B0     		sub	sp, sp, #20
 18444              	.LCFI35:
 18445              		.cfi_def_cfa_offset 24
 18446 0004 00AF     		add	r7, sp, #0
 18447              		.cfi_offset 7, -4
 18448              	.LCFI36:
 18449              		.cfi_def_cfa_register 7
 18450 0006 7860     		str	r0, [r7, #4]
 662:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18451              		.loc 1 662 0
 18452 0008 4FF00003 		mov	r3, #0
 18453 000c FB60     		str	r3, [r7, #12]
 663:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18454              		.loc 1 665 0
 18455 000e 0B4B     		ldr	r3, .L44
 18456 0010 5B68     		ldr	r3, [r3, #4]
 18457 0012 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 18458              		.loc 1 667 0
 18459 0014 FB68     		ldr	r3, [r7, #12]
 18460 0016 23F46053 		bic	r3, r3, #14336
 18461 001a FB60     		str	r3, [r7, #12]
 668:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 18462              		.loc 1 669 0
 18463 001c 7B68     		ldr	r3, [r7, #4]
 18464 001e 4FEAC303 		lsl	r3, r3, #3
 18465 0022 FA68     		ldr	r2, [r7, #12]
 18466 0024 42EA0303 		orr	r3, r2, r3
 18467 0028 FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18468              		.loc 1 671 0
 18469 002a 044B     		ldr	r3, .L44
 18470 002c FA68     		ldr	r2, [r7, #12]
 18471 002e 5A60     		str	r2, [r3, #4]
 672:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18472              		.loc 1 672 0
 18473 0030 07F11407 		add	r7, r7, #20
 18474 0034 BD46     		mov	sp, r7
 18475 0036 80BC     		pop	{r7}
 18476 0038 7047     		bx	lr
 18477              	.L45:
 18478 003a 00BF     		.align	2
 18479              	.L44:
 18480 003c 00100240 		.word	1073876992
 18481              		.cfi_endproc
 18482              	.LFE41:
 18484              		.section	.text.RCC_ITConfig,"ax",%progbits
 18485              		.align	2
 18486              		.global	RCC_ITConfig
 18487              		.thumb
 18488              		.thumb_func
 18490              	RCC_ITConfig:
 18491              	.LFB42:
 673:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 674:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 675:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 678:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values        
 680:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 688:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values        
 690:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *       
 696:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 699:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 700:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18492              		.loc 1 701 0
 18493              		.cfi_startproc
 18494              		@ args = 0, pretend = 0, frame = 8
 18495              		@ frame_needed = 1, uses_anonymous_args = 0
 18496              		@ link register save eliminated.
 18497 0000 80B4     		push	{r7}
 18498              	.LCFI37:
 18499              		.cfi_def_cfa_offset 4
 18500 0002 83B0     		sub	sp, sp, #12
 18501              	.LCFI38:
 18502              		.cfi_def_cfa_offset 16
 18503 0004 00AF     		add	r7, sp, #0
 18504              		.cfi_offset 7, -4
 18505              	.LCFI39:
 18506              		.cfi_def_cfa_register 7
 18507 0006 0246     		mov	r2, r0
 18508 0008 0B46     		mov	r3, r1
 18509 000a FA71     		strb	r2, [r7, #7]
 18510 000c BB71     		strb	r3, [r7, #6]
 702:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18511              		.loc 1 705 0
 18512 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 18513 0010 002B     		cmp	r3, #0
 18514 0012 09D0     		beq	.L47
 706:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 707:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 18515              		.loc 1 708 0
 18516 0014 0D4B     		ldr	r3, .L49
 18517 0016 0D4A     		ldr	r2, .L49
 18518 0018 1278     		ldrb	r2, [r2, #0]
 18519 001a D1B2     		uxtb	r1, r2
 18520 001c FA79     		ldrb	r2, [r7, #7]
 18521 001e 41EA0202 		orr	r2, r1, r2
 18522 0022 D2B2     		uxtb	r2, r2
 18523 0024 1A70     		strb	r2, [r3, #0]
 18524 0026 0BE0     		b	.L46
 18525              	.L47:
 709:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 710:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 711:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 712:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 18526              		.loc 1 713 0
 18527 0028 084B     		ldr	r3, .L49
 18528 002a 084A     		ldr	r2, .L49
 18529 002c 1278     		ldrb	r2, [r2, #0]
 18530 002e D1B2     		uxtb	r1, r2
 18531 0030 FA79     		ldrb	r2, [r7, #7]
 18532 0032 6FEA0202 		mvn	r2, r2
 18533 0036 D2B2     		uxtb	r2, r2
 18534 0038 01EA0202 		and	r2, r1, r2
 18535 003c D2B2     		uxtb	r2, r2
 18536 003e 1A70     		strb	r2, [r3, #0]
 18537              	.L46:
 714:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 715:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18538              		.loc 1 715 0
 18539 0040 07F10C07 		add	r7, r7, #12
 18540 0044 BD46     		mov	sp, r7
 18541 0046 80BC     		pop	{r7}
 18542 0048 7047     		bx	lr
 18543              	.L50:
 18544 004a 00BF     		.align	2
 18545              	.L49:
 18546 004c 09100240 		.word	1073877001
 18547              		.cfi_endproc
 18548              	.LFE42:
 18550              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 18551              		.align	2
 18552              		.global	RCC_USBCLKConfig
 18553              		.thumb
 18554              		.thumb_func
 18556              	RCC_USBCLKConfig:
 18557              	.LFB43:
 716:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 717:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 719:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *                                     clock source
 725:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 727:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 728:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18558              		.loc 1 729 0
 18559              		.cfi_startproc
 18560              		@ args = 0, pretend = 0, frame = 8
 18561              		@ frame_needed = 1, uses_anonymous_args = 0
 18562              		@ link register save eliminated.
 18563 0000 80B4     		push	{r7}
 18564              	.LCFI40:
 18565              		.cfi_def_cfa_offset 4
 18566 0002 83B0     		sub	sp, sp, #12
 18567              	.LCFI41:
 18568              		.cfi_def_cfa_offset 16
 18569 0004 00AF     		add	r7, sp, #0
 18570              		.cfi_offset 7, -4
 18571              	.LCFI42:
 18572              		.cfi_def_cfa_register 7
 18573 0006 7860     		str	r0, [r7, #4]
 730:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 733:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 18574              		.loc 1 733 0
 18575 0008 034B     		ldr	r3, .L52
 18576 000a 7A68     		ldr	r2, [r7, #4]
 18577 000c 1A60     		str	r2, [r3, #0]
 734:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18578              		.loc 1 734 0
 18579 000e 07F10C07 		add	r7, r7, #12
 18580 0012 BD46     		mov	sp, r7
 18581 0014 80BC     		pop	{r7}
 18582 0016 7047     		bx	lr
 18583              	.L53:
 18584              		.align	2
 18585              	.L52:
 18586 0018 D8004242 		.word	1111621848
 18587              		.cfi_endproc
 18588              	.LFE43:
 18590              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 18591              		.align	2
 18592              		.global	RCC_ADCCLKConfig
 18593              		.thumb
 18594              		.thumb_func
 18596              	RCC_ADCCLKConfig:
 18597              	.LFB44:
 735:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 736:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 737:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 745:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 746:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 748:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 753:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 755:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 756:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 765:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 766:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18598              		.loc 1 767 0
 18599              		.cfi_startproc
 18600              		@ args = 0, pretend = 0, frame = 16
 18601              		@ frame_needed = 1, uses_anonymous_args = 0
 18602              		@ link register save eliminated.
 18603 0000 80B4     		push	{r7}
 18604              	.LCFI43:
 18605              		.cfi_def_cfa_offset 4
 18606 0002 85B0     		sub	sp, sp, #20
 18607              	.LCFI44:
 18608              		.cfi_def_cfa_offset 24
 18609 0004 00AF     		add	r7, sp, #0
 18610              		.cfi_offset 7, -4
 18611              	.LCFI45:
 18612              		.cfi_def_cfa_register 7
 18613 0006 7860     		str	r0, [r7, #4]
 768:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18614              		.loc 1 768 0
 18615 0008 4FF00003 		mov	r3, #0
 18616 000c FB60     		str	r3, [r7, #12]
 769:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18617              		.loc 1 771 0
 18618 000e 0A4B     		ldr	r3, .L55
 18619 0010 5B68     		ldr	r3, [r3, #4]
 18620 0012 FB60     		str	r3, [r7, #12]
 772:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 18621              		.loc 1 773 0
 18622 0014 FB68     		ldr	r3, [r7, #12]
 18623 0016 23F44043 		bic	r3, r3, #49152
 18624 001a FB60     		str	r3, [r7, #12]
 774:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 18625              		.loc 1 775 0
 18626 001c FA68     		ldr	r2, [r7, #12]
 18627 001e 7B68     		ldr	r3, [r7, #4]
 18628 0020 42EA0303 		orr	r3, r2, r3
 18629 0024 FB60     		str	r3, [r7, #12]
 776:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18630              		.loc 1 777 0
 18631 0026 044B     		ldr	r3, .L55
 18632 0028 FA68     		ldr	r2, [r7, #12]
 18633 002a 5A60     		str	r2, [r3, #4]
 778:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18634              		.loc 1 778 0
 18635 002c 07F11407 		add	r7, r7, #20
 18636 0030 BD46     		mov	sp, r7
 18637 0032 80BC     		pop	{r7}
 18638 0034 7047     		bx	lr
 18639              	.L56:
 18640 0036 00BF     		.align	2
 18641              	.L55:
 18642 0038 00100240 		.word	1073876992
 18643              		.cfi_endproc
 18644              	.LFE44:
 18646              		.section	.text.RCC_LSEConfig,"ax",%progbits
 18647              		.align	2
 18648              		.global	RCC_LSEConfig
 18649              		.thumb
 18650              		.thumb_func
 18652              	RCC_LSEConfig:
 18653              	.LFB45:
 779:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 780:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 782:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 784:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 791:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 792:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 794:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 797:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 799:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 800:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 801:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 803:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 810:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 811:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 813:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 816:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 818:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 820:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 821:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 828:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 829:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18654              		.loc 1 830 0
 18655              		.cfi_startproc
 18656              		@ args = 0, pretend = 0, frame = 8
 18657              		@ frame_needed = 1, uses_anonymous_args = 0
 18658              		@ link register save eliminated.
 18659 0000 80B4     		push	{r7}
 18660              	.LCFI46:
 18661              		.cfi_def_cfa_offset 4
 18662 0002 83B0     		sub	sp, sp, #12
 18663              	.LCFI47:
 18664              		.cfi_def_cfa_offset 16
 18665 0004 00AF     		add	r7, sp, #0
 18666              		.cfi_offset 7, -4
 18667              	.LCFI48:
 18668              		.cfi_def_cfa_register 7
 18669 0006 0346     		mov	r3, r0
 18670 0008 FB71     		strb	r3, [r7, #7]
 831:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 18671              		.loc 1 835 0
 18672 000a 0E4B     		ldr	r3, .L62
 18673 000c 4FF00002 		mov	r2, #0
 18674 0010 1A70     		strb	r2, [r3, #0]
 836:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 18675              		.loc 1 837 0
 18676 0012 0C4B     		ldr	r3, .L62
 18677 0014 4FF00002 		mov	r2, #0
 18678 0018 1A70     		strb	r2, [r3, #0]
 838:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 18679              		.loc 1 839 0
 18680 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 18681 001c 012B     		cmp	r3, #1
 18682 001e 02D0     		beq	.L59
 18683 0020 042B     		cmp	r3, #4
 18684 0022 05D0     		beq	.L60
 840:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 841:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 845:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 846:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 850:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 851:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 852:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;      
 18685              		.loc 1 852 0
 18686 0024 09E0     		b	.L57
 18687              	.L59:
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 18688              		.loc 1 843 0
 18689 0026 074B     		ldr	r3, .L62
 18690 0028 4FF00102 		mov	r2, #1
 18691 002c 1A70     		strb	r2, [r3, #0]
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18692              		.loc 1 844 0
 18693 002e 04E0     		b	.L57
 18694              	.L60:
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 18695              		.loc 1 848 0
 18696 0030 044B     		ldr	r3, .L62
 18697 0032 4FF00502 		mov	r2, #5
 18698 0036 1A70     		strb	r2, [r3, #0]
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 18699              		.loc 1 849 0
 18700 0038 00BF     		nop
 18701              	.L57:
 853:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 854:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18702              		.loc 1 854 0
 18703 003a 07F10C07 		add	r7, r7, #12
 18704 003e BD46     		mov	sp, r7
 18705 0040 80BC     		pop	{r7}
 18706 0042 7047     		bx	lr
 18707              	.L63:
 18708              		.align	2
 18709              	.L62:
 18710 0044 20100240 		.word	1073877024
 18711              		.cfi_endproc
 18712              	.LFE45:
 18714              		.section	.text.RCC_LSICmd,"ax",%progbits
 18715              		.align	2
 18716              		.global	RCC_LSICmd
 18717              		.thumb
 18718              		.thumb_func
 18720              	RCC_LSICmd:
 18721              	.LFB46:
 855:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 856:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 857:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 861:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 862:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18722              		.loc 1 863 0
 18723              		.cfi_startproc
 18724              		@ args = 0, pretend = 0, frame = 8
 18725              		@ frame_needed = 1, uses_anonymous_args = 0
 18726              		@ link register save eliminated.
 18727 0000 80B4     		push	{r7}
 18728              	.LCFI49:
 18729              		.cfi_def_cfa_offset 4
 18730 0002 83B0     		sub	sp, sp, #12
 18731              	.LCFI50:
 18732              		.cfi_def_cfa_offset 16
 18733 0004 00AF     		add	r7, sp, #0
 18734              		.cfi_offset 7, -4
 18735              	.LCFI51:
 18736              		.cfi_def_cfa_register 7
 18737 0006 0346     		mov	r3, r0
 18738 0008 FB71     		strb	r3, [r7, #7]
 864:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 18739              		.loc 1 866 0
 18740 000a 044B     		ldr	r3, .L65
 18741 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18742 000e 1A60     		str	r2, [r3, #0]
 867:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18743              		.loc 1 867 0
 18744 0010 07F10C07 		add	r7, r7, #12
 18745 0014 BD46     		mov	sp, r7
 18746 0016 80BC     		pop	{r7}
 18747 0018 7047     		bx	lr
 18748              	.L66:
 18749 001a 00BF     		.align	2
 18750              	.L65:
 18751 001c 80044242 		.word	1111622784
 18752              		.cfi_endproc
 18753              	.LFE46:
 18755              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 18756              		.align	2
 18757              		.global	RCC_RTCCLKConfig
 18758              		.thumb
 18759              		.thumb_func
 18761              	RCC_RTCCLKConfig:
 18762              	.LFB47:
 868:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 869:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 870:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 878:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 879:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18763              		.loc 1 880 0
 18764              		.cfi_startproc
 18765              		@ args = 0, pretend = 0, frame = 8
 18766              		@ frame_needed = 1, uses_anonymous_args = 0
 18767              		@ link register save eliminated.
 18768 0000 80B4     		push	{r7}
 18769              	.LCFI52:
 18770              		.cfi_def_cfa_offset 4
 18771 0002 83B0     		sub	sp, sp, #12
 18772              	.LCFI53:
 18773              		.cfi_def_cfa_offset 16
 18774 0004 00AF     		add	r7, sp, #0
 18775              		.cfi_offset 7, -4
 18776              	.LCFI54:
 18777              		.cfi_def_cfa_register 7
 18778 0006 7860     		str	r0, [r7, #4]
 881:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 18779              		.loc 1 884 0
 18780 0008 054B     		ldr	r3, .L68
 18781 000a 054A     		ldr	r2, .L68
 18782 000c 116A     		ldr	r1, [r2, #32]
 18783 000e 7A68     		ldr	r2, [r7, #4]
 18784 0010 41EA0202 		orr	r2, r1, r2
 18785 0014 1A62     		str	r2, [r3, #32]
 885:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18786              		.loc 1 885 0
 18787 0016 07F10C07 		add	r7, r7, #12
 18788 001a BD46     		mov	sp, r7
 18789 001c 80BC     		pop	{r7}
 18790 001e 7047     		bx	lr
 18791              	.L69:
 18792              		.align	2
 18793              	.L68:
 18794 0020 00100240 		.word	1073876992
 18795              		.cfi_endproc
 18796              	.LFE47:
 18798              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 18799              		.align	2
 18800              		.global	RCC_RTCCLKCmd
 18801              		.thumb
 18802              		.thumb_func
 18804              	RCC_RTCCLKCmd:
 18805              	.LFB48:
 886:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 887:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 888:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 892:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 893:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18806              		.loc 1 894 0
 18807              		.cfi_startproc
 18808              		@ args = 0, pretend = 0, frame = 8
 18809              		@ frame_needed = 1, uses_anonymous_args = 0
 18810              		@ link register save eliminated.
 18811 0000 80B4     		push	{r7}
 18812              	.LCFI55:
 18813              		.cfi_def_cfa_offset 4
 18814 0002 83B0     		sub	sp, sp, #12
 18815              	.LCFI56:
 18816              		.cfi_def_cfa_offset 16
 18817 0004 00AF     		add	r7, sp, #0
 18818              		.cfi_offset 7, -4
 18819              	.LCFI57:
 18820              		.cfi_def_cfa_register 7
 18821 0006 0346     		mov	r3, r0
 18822 0008 FB71     		strb	r3, [r7, #7]
 895:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 18823              		.loc 1 897 0
 18824 000a 044B     		ldr	r3, .L71
 18825 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18826 000e 1A60     		str	r2, [r3, #0]
 898:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18827              		.loc 1 898 0
 18828 0010 07F10C07 		add	r7, r7, #12
 18829 0014 BD46     		mov	sp, r7
 18830 0016 80BC     		pop	{r7}
 18831 0018 7047     		bx	lr
 18832              	.L72:
 18833 001a 00BF     		.align	2
 18834              	.L71:
 18835 001c 3C044242 		.word	1111622716
 18836              		.cfi_endproc
 18837              	.LFE48:
 18839              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 18840              		.align	2
 18841              		.global	RCC_GetClocksFreq
 18842              		.thumb
 18843              		.thumb_func
 18845              	RCC_GetClocksFreq:
 18846              	.LFB49:
 899:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 900:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 901:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 907:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 908:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18847              		.loc 1 909 0
 18848              		.cfi_startproc
 18849              		@ args = 0, pretend = 0, frame = 32
 18850              		@ frame_needed = 1, uses_anonymous_args = 0
 18851              		@ link register save eliminated.
 18852 0000 80B4     		push	{r7}
 18853              	.LCFI58:
 18854              		.cfi_def_cfa_offset 4
 18855 0002 89B0     		sub	sp, sp, #36
 18856              	.LCFI59:
 18857              		.cfi_def_cfa_offset 40
 18858 0004 00AF     		add	r7, sp, #0
 18859              		.cfi_offset 7, -4
 18860              	.LCFI60:
 18861              		.cfi_def_cfa_register 7
 18862 0006 7860     		str	r0, [r7, #4]
 910:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 18863              		.loc 1 910 0
 18864 0008 4FF00003 		mov	r3, #0
 18865 000c FB61     		str	r3, [r7, #28]
 18866 000e 4FF00003 		mov	r3, #0
 18867 0012 BB61     		str	r3, [r7, #24]
 18868 0014 4FF00003 		mov	r3, #0
 18869 0018 7B61     		str	r3, [r7, #20]
 18870 001a 4FF00003 		mov	r3, #0
 18871 001e 3B61     		str	r3, [r7, #16]
 911:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 912:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 916:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 18872              		.loc 1 917 0
 18873 0020 4FF00003 		mov	r3, #0
 18874 0024 FB60     		str	r3, [r7, #12]
 918:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 919:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     
 920:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 18875              		.loc 1 921 0
 18876 0026 504B     		ldr	r3, .L82
 18877 0028 5B68     		ldr	r3, [r3, #4]
 18878 002a 03F00C03 		and	r3, r3, #12
 18879 002e FB61     		str	r3, [r7, #28]
 922:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 923:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch (tmp)
 18880              		.loc 1 923 0
 18881 0030 FB69     		ldr	r3, [r7, #28]
 18882 0032 042B     		cmp	r3, #4
 18883 0034 07D0     		beq	.L76
 18884 0036 082B     		cmp	r3, #8
 18885 0038 09D0     		beq	.L77
 18886 003a 002B     		cmp	r3, #0
 18887 003c 32D1     		bne	.L81
 18888              	.L75:
 924:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 925:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 18889              		.loc 1 926 0
 18890 003e 7B68     		ldr	r3, [r7, #4]
 18891 0040 4A4A     		ldr	r2, .L82+4
 18892 0042 1A60     		str	r2, [r3, #0]
 927:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18893              		.loc 1 927 0
 18894 0044 32E0     		b	.L78
 18895              	.L76:
 928:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 18896              		.loc 1 929 0
 18897 0046 7B68     		ldr	r3, [r7, #4]
 18898 0048 484A     		ldr	r2, .L82+4
 18899 004a 1A60     		str	r2, [r3, #0]
 930:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18900              		.loc 1 930 0
 18901 004c 2EE0     		b	.L78
 18902              	.L77:
 931:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 933:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 18903              		.loc 1 934 0
 18904 004e 464B     		ldr	r3, .L82
 18905 0050 5B68     		ldr	r3, [r3, #4]
 18906 0052 03F47013 		and	r3, r3, #3932160
 18907 0056 BB61     		str	r3, [r7, #24]
 935:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 18908              		.loc 1 935 0
 18909 0058 434B     		ldr	r3, .L82
 18910 005a 5B68     		ldr	r3, [r3, #4]
 18911 005c 03F48033 		and	r3, r3, #65536
 18912 0060 7B61     		str	r3, [r7, #20]
 936:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 937:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 18913              		.loc 1 938 0
 18914 0062 BB69     		ldr	r3, [r7, #24]
 18915 0064 4FEA9343 		lsr	r3, r3, #18
 18916 0068 03F10203 		add	r3, r3, #2
 18917 006c BB61     		str	r3, [r7, #24]
 939:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 940:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 18918              		.loc 1 940 0
 18919 006e 7B69     		ldr	r3, [r7, #20]
 18920 0070 002B     		cmp	r3, #0
 18921 0072 06D1     		bne	.L79
 941:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 18922              		.loc 1 942 0
 18923 0074 BB69     		ldr	r3, [r7, #24]
 18924 0076 3E4A     		ldr	r2, .L82+8
 18925 0078 02FB03F2 		mul	r2, r2, r3
 18926 007c 7B68     		ldr	r3, [r7, #4]
 18927 007e 1A60     		str	r2, [r3, #0]
 943:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 944:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 945:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 946:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #else
 951:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 956:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 957:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {
 958:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 960:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #endif
 961:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 962:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 963:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 965:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 967:../StdPeripheralDriver/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 969:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 970:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 973:../StdPeripheralDriver/src/stm32f10x_rcc.c ****             
 974:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 978:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 979:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 981:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 985:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 989:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 990:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           
 992:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 997:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 998:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18928              		.loc 1 999 0
 18929 0080 14E0     		b	.L78
 18930              	.L79:
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 18931              		.loc 1 947 0
 18932 0082 394B     		ldr	r3, .L82
 18933 0084 DB6A     		ldr	r3, [r3, #44]
 18934 0086 03F00F03 		and	r3, r3, #15
 18935 008a 03F10103 		add	r3, r3, #1
 18936 008e FB60     		str	r3, [r7, #12]
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 18937              		.loc 1 949 0
 18938 0090 364A     		ldr	r2, .L82+4
 18939 0092 FB68     		ldr	r3, [r7, #12]
 18940 0094 B2FBF3F3 		udiv	r3, r2, r3
 18941 0098 BA69     		ldr	r2, [r7, #24]
 18942 009a 02FB03F2 		mul	r2, r2, r3
 18943 009e 7B68     		ldr	r3, [r7, #4]
 18944 00a0 1A60     		str	r2, [r3, #0]
 18945              		.loc 1 999 0
 18946 00a2 03E0     		b	.L78
 18947              	.L81:
1000:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1001:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
1002:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 18948              		.loc 1 1002 0
 18949 00a4 7B68     		ldr	r3, [r7, #4]
 18950 00a6 314A     		ldr	r2, .L82+4
 18951 00a8 1A60     		str	r2, [r3, #0]
1003:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18952              		.loc 1 1003 0
 18953 00aa 00BF     		nop
 18954              	.L78:
1004:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1005:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1006:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 18955              		.loc 1 1008 0
 18956 00ac 2E4B     		ldr	r3, .L82
 18957 00ae 5B68     		ldr	r3, [r3, #4]
 18958 00b0 03F0F003 		and	r3, r3, #240
 18959 00b4 FB61     		str	r3, [r7, #28]
1009:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 18960              		.loc 1 1009 0
 18961 00b6 FB69     		ldr	r3, [r7, #28]
 18962 00b8 4FEA1313 		lsr	r3, r3, #4
 18963 00bc FB61     		str	r3, [r7, #28]
1010:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18964              		.loc 1 1010 0
 18965 00be 2D4A     		ldr	r2, .L82+12
 18966 00c0 FB69     		ldr	r3, [r7, #28]
 18967 00c2 D318     		adds	r3, r2, r3
 18968 00c4 1B78     		ldrb	r3, [r3, #0]
 18969 00c6 DBB2     		uxtb	r3, r3
 18970 00c8 3B61     		str	r3, [r7, #16]
1011:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 18971              		.loc 1 1012 0
 18972 00ca 7B68     		ldr	r3, [r7, #4]
 18973 00cc 1A68     		ldr	r2, [r3, #0]
 18974 00ce 3B69     		ldr	r3, [r7, #16]
 18975 00d0 22FA03F2 		lsr	r2, r2, r3
 18976 00d4 7B68     		ldr	r3, [r7, #4]
 18977 00d6 5A60     		str	r2, [r3, #4]
1013:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 18978              		.loc 1 1014 0
 18979 00d8 234B     		ldr	r3, .L82
 18980 00da 5B68     		ldr	r3, [r3, #4]
 18981 00dc 03F4E063 		and	r3, r3, #1792
 18982 00e0 FB61     		str	r3, [r7, #28]
1015:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 18983              		.loc 1 1015 0
 18984 00e2 FB69     		ldr	r3, [r7, #28]
 18985 00e4 4FEA1323 		lsr	r3, r3, #8
 18986 00e8 FB61     		str	r3, [r7, #28]
1016:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18987              		.loc 1 1016 0
 18988 00ea 224A     		ldr	r2, .L82+12
 18989 00ec FB69     		ldr	r3, [r7, #28]
 18990 00ee D318     		adds	r3, r2, r3
 18991 00f0 1B78     		ldrb	r3, [r3, #0]
 18992 00f2 DBB2     		uxtb	r3, r3
 18993 00f4 3B61     		str	r3, [r7, #16]
1017:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 18994              		.loc 1 1018 0
 18995 00f6 7B68     		ldr	r3, [r7, #4]
 18996 00f8 5A68     		ldr	r2, [r3, #4]
 18997 00fa 3B69     		ldr	r3, [r7, #16]
 18998 00fc 22FA03F2 		lsr	r2, r2, r3
 18999 0100 7B68     		ldr	r3, [r7, #4]
 19000 0102 9A60     		str	r2, [r3, #8]
1019:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 19001              		.loc 1 1020 0
 19002 0104 184B     		ldr	r3, .L82
 19003 0106 5B68     		ldr	r3, [r3, #4]
 19004 0108 03F46053 		and	r3, r3, #14336
 19005 010c FB61     		str	r3, [r7, #28]
1021:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 19006              		.loc 1 1021 0
 19007 010e FB69     		ldr	r3, [r7, #28]
 19008 0110 4FEAD323 		lsr	r3, r3, #11
 19009 0114 FB61     		str	r3, [r7, #28]
1022:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 19010              		.loc 1 1022 0
 19011 0116 174A     		ldr	r2, .L82+12
 19012 0118 FB69     		ldr	r3, [r7, #28]
 19013 011a D318     		adds	r3, r2, r3
 19014 011c 1B78     		ldrb	r3, [r3, #0]
 19015 011e DBB2     		uxtb	r3, r3
 19016 0120 3B61     		str	r3, [r7, #16]
1023:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 19017              		.loc 1 1024 0
 19018 0122 7B68     		ldr	r3, [r7, #4]
 19019 0124 5A68     		ldr	r2, [r3, #4]
 19020 0126 3B69     		ldr	r3, [r7, #16]
 19021 0128 22FA03F2 		lsr	r2, r2, r3
 19022 012c 7B68     		ldr	r3, [r7, #4]
 19023 012e DA60     		str	r2, [r3, #12]
1025:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 19024              		.loc 1 1026 0
 19025 0130 0D4B     		ldr	r3, .L82
 19026 0132 5B68     		ldr	r3, [r3, #4]
 19027 0134 03F44043 		and	r3, r3, #49152
 19028 0138 FB61     		str	r3, [r7, #28]
1027:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 19029              		.loc 1 1027 0
 19030 013a FB69     		ldr	r3, [r7, #28]
 19031 013c 4FEA9333 		lsr	r3, r3, #14
 19032 0140 FB61     		str	r3, [r7, #28]
1028:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 19033              		.loc 1 1028 0
 19034 0142 0D4A     		ldr	r2, .L82+16
 19035 0144 FB69     		ldr	r3, [r7, #28]
 19036 0146 D318     		adds	r3, r2, r3
 19037 0148 1B78     		ldrb	r3, [r3, #0]
 19038 014a DBB2     		uxtb	r3, r3
 19039 014c 3B61     		str	r3, [r7, #16]
1029:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 19040              		.loc 1 1030 0
 19041 014e 7B68     		ldr	r3, [r7, #4]
 19042 0150 DA68     		ldr	r2, [r3, #12]
 19043 0152 3B69     		ldr	r3, [r7, #16]
 19044 0154 B2FBF3F2 		udiv	r2, r2, r3
 19045 0158 7B68     		ldr	r3, [r7, #4]
 19046 015a 1A61     		str	r2, [r3, #16]
1031:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19047              		.loc 1 1031 0
 19048 015c 07F12407 		add	r7, r7, #36
 19049 0160 BD46     		mov	sp, r7
 19050 0162 80BC     		pop	{r7}
 19051 0164 7047     		bx	lr
 19052              	.L83:
 19053 0166 00BF     		.align	2
 19054              	.L82:
 19055 0168 00100240 		.word	1073876992
 19056 016c 00127A00 		.word	8000000
 19057 0170 00093D00 		.word	4000000
 19058 0174 00000000 		.word	APBAHBPrescTable
 19059 0178 00000000 		.word	ADCPrescTable
 19060              		.cfi_endproc
 19061              	.LFE49:
 19063              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 19064              		.align	2
 19065              		.global	RCC_AHBPeriphClockCmd
 19066              		.thumb
 19067              		.thumb_func
 19069              	RCC_AHBPeriphClockCmd:
 19070              	.LFB50:
1032:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1033:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1034:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1037:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1049:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1051:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1059:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1063:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1064:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19071              		.loc 1 1065 0
 19072              		.cfi_startproc
 19073              		@ args = 0, pretend = 0, frame = 8
 19074              		@ frame_needed = 1, uses_anonymous_args = 0
 19075              		@ link register save eliminated.
 19076 0000 80B4     		push	{r7}
 19077              	.LCFI61:
 19078              		.cfi_def_cfa_offset 4
 19079 0002 83B0     		sub	sp, sp, #12
 19080              	.LCFI62:
 19081              		.cfi_def_cfa_offset 16
 19082 0004 00AF     		add	r7, sp, #0
 19083              		.cfi_offset 7, -4
 19084              	.LCFI63:
 19085              		.cfi_def_cfa_register 7
 19086 0006 7860     		str	r0, [r7, #4]
 19087 0008 0B46     		mov	r3, r1
 19088 000a FB70     		strb	r3, [r7, #3]
1066:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1070:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19089              		.loc 1 1070 0
 19090 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19091 000e 002B     		cmp	r3, #0
 19092 0010 07D0     		beq	.L85
1071:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1072:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 19093              		.loc 1 1072 0
 19094 0012 0B4B     		ldr	r3, .L87
 19095 0014 0A4A     		ldr	r2, .L87
 19096 0016 5169     		ldr	r1, [r2, #20]
 19097 0018 7A68     		ldr	r2, [r7, #4]
 19098 001a 41EA0202 		orr	r2, r1, r2
 19099 001e 5A61     		str	r2, [r3, #20]
 19100 0020 08E0     		b	.L84
 19101              	.L85:
1073:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1074:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1075:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1076:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 19102              		.loc 1 1076 0
 19103 0022 074B     		ldr	r3, .L87
 19104 0024 064A     		ldr	r2, .L87
 19105 0026 5169     		ldr	r1, [r2, #20]
 19106 0028 7A68     		ldr	r2, [r7, #4]
 19107 002a 6FEA0202 		mvn	r2, r2
 19108 002e 01EA0202 		and	r2, r1, r2
 19109 0032 5A61     		str	r2, [r3, #20]
 19110              	.L84:
1077:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1078:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19111              		.loc 1 1078 0
 19112 0034 07F10C07 		add	r7, r7, #12
 19113 0038 BD46     		mov	sp, r7
 19114 003a 80BC     		pop	{r7}
 19115 003c 7047     		bx	lr
 19116              	.L88:
 19117 003e 00BF     		.align	2
 19118              	.L87:
 19119 0040 00100240 		.word	1073876992
 19120              		.cfi_endproc
 19121              	.LFE50:
 19123              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 19124              		.align	2
 19125              		.global	RCC_APB2PeriphClockCmd
 19126              		.thumb
 19127              		.thumb_func
 19129              	RCC_APB2PeriphClockCmd:
 19130              	.LFB51:
1079:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1080:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1081:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1094:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1095:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19131              		.loc 1 1096 0
 19132              		.cfi_startproc
 19133              		@ args = 0, pretend = 0, frame = 8
 19134              		@ frame_needed = 1, uses_anonymous_args = 0
 19135              		@ link register save eliminated.
 19136 0000 80B4     		push	{r7}
 19137              	.LCFI64:
 19138              		.cfi_def_cfa_offset 4
 19139 0002 83B0     		sub	sp, sp, #12
 19140              	.LCFI65:
 19141              		.cfi_def_cfa_offset 16
 19142 0004 00AF     		add	r7, sp, #0
 19143              		.cfi_offset 7, -4
 19144              	.LCFI66:
 19145              		.cfi_def_cfa_register 7
 19146 0006 7860     		str	r0, [r7, #4]
 19147 0008 0B46     		mov	r3, r1
 19148 000a FB70     		strb	r3, [r7, #3]
1097:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19149              		.loc 1 1100 0
 19150 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19151 000e 002B     		cmp	r3, #0
 19152 0010 07D0     		beq	.L90
1101:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1102:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 19153              		.loc 1 1102 0
 19154 0012 0B4B     		ldr	r3, .L92
 19155 0014 0A4A     		ldr	r2, .L92
 19156 0016 9169     		ldr	r1, [r2, #24]
 19157 0018 7A68     		ldr	r2, [r7, #4]
 19158 001a 41EA0202 		orr	r2, r1, r2
 19159 001e 9A61     		str	r2, [r3, #24]
 19160 0020 08E0     		b	.L89
 19161              	.L90:
1103:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1104:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1105:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1106:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 19162              		.loc 1 1106 0
 19163 0022 074B     		ldr	r3, .L92
 19164 0024 064A     		ldr	r2, .L92
 19165 0026 9169     		ldr	r1, [r2, #24]
 19166 0028 7A68     		ldr	r2, [r7, #4]
 19167 002a 6FEA0202 		mvn	r2, r2
 19168 002e 01EA0202 		and	r2, r1, r2
 19169 0032 9A61     		str	r2, [r3, #24]
 19170              	.L89:
1107:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1108:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19171              		.loc 1 1108 0
 19172 0034 07F10C07 		add	r7, r7, #12
 19173 0038 BD46     		mov	sp, r7
 19174 003a 80BC     		pop	{r7}
 19175 003c 7047     		bx	lr
 19176              	.L93:
 19177 003e 00BF     		.align	2
 19178              	.L92:
 19179 0040 00100240 		.word	1073876992
 19180              		.cfi_endproc
 19181              	.LFE51:
 19183              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 19184              		.align	2
 19185              		.global	RCC_APB1PeriphClockCmd
 19186              		.thumb
 19187              		.thumb_func
 19189              	RCC_APB1PeriphClockCmd:
 19190              	.LFB52:
1109:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1110:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1125:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19191              		.loc 1 1127 0
 19192              		.cfi_startproc
 19193              		@ args = 0, pretend = 0, frame = 8
 19194              		@ frame_needed = 1, uses_anonymous_args = 0
 19195              		@ link register save eliminated.
 19196 0000 80B4     		push	{r7}
 19197              	.LCFI67:
 19198              		.cfi_def_cfa_offset 4
 19199 0002 83B0     		sub	sp, sp, #12
 19200              	.LCFI68:
 19201              		.cfi_def_cfa_offset 16
 19202 0004 00AF     		add	r7, sp, #0
 19203              		.cfi_offset 7, -4
 19204              	.LCFI69:
 19205              		.cfi_def_cfa_register 7
 19206 0006 7860     		str	r0, [r7, #4]
 19207 0008 0B46     		mov	r3, r1
 19208 000a FB70     		strb	r3, [r7, #3]
1128:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19209              		.loc 1 1131 0
 19210 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19211 000e 002B     		cmp	r3, #0
 19212 0010 07D0     		beq	.L95
1132:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1133:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 19213              		.loc 1 1133 0
 19214 0012 0B4B     		ldr	r3, .L97
 19215 0014 0A4A     		ldr	r2, .L97
 19216 0016 D169     		ldr	r1, [r2, #28]
 19217 0018 7A68     		ldr	r2, [r7, #4]
 19218 001a 41EA0202 		orr	r2, r1, r2
 19219 001e DA61     		str	r2, [r3, #28]
 19220 0020 08E0     		b	.L94
 19221              	.L95:
1134:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1135:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1136:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1137:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 19222              		.loc 1 1137 0
 19223 0022 074B     		ldr	r3, .L97
 19224 0024 064A     		ldr	r2, .L97
 19225 0026 D169     		ldr	r1, [r2, #28]
 19226 0028 7A68     		ldr	r2, [r7, #4]
 19227 002a 6FEA0202 		mvn	r2, r2
 19228 002e 01EA0202 		and	r2, r1, r2
 19229 0032 DA61     		str	r2, [r3, #28]
 19230              	.L94:
1138:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19231              		.loc 1 1139 0
 19232 0034 07F10C07 		add	r7, r7, #12
 19233 0038 BD46     		mov	sp, r7
 19234 003a 80BC     		pop	{r7}
 19235 003c 7047     		bx	lr
 19236              	.L98:
 19237 003e 00BF     		.align	2
 19238              	.L97:
 19239 0040 00100240 		.word	1073876992
 19240              		.cfi_endproc
 19241              	.LFE52:
 19243              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 19244              		.align	2
 19245              		.global	RCC_APB2PeriphResetCmd
 19246              		.thumb
 19247              		.thumb_func
 19249              	RCC_APB2PeriphResetCmd:
 19250              	.LFB53:
1140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1143:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1152:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1153:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
1155:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1161:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1163:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1164:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1165:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
1168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1171:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1184:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19251              		.loc 1 1186 0
 19252              		.cfi_startproc
 19253              		@ args = 0, pretend = 0, frame = 8
 19254              		@ frame_needed = 1, uses_anonymous_args = 0
 19255              		@ link register save eliminated.
 19256 0000 80B4     		push	{r7}
 19257              	.LCFI70:
 19258              		.cfi_def_cfa_offset 4
 19259 0002 83B0     		sub	sp, sp, #12
 19260              	.LCFI71:
 19261              		.cfi_def_cfa_offset 16
 19262 0004 00AF     		add	r7, sp, #0
 19263              		.cfi_offset 7, -4
 19264              	.LCFI72:
 19265              		.cfi_def_cfa_register 7
 19266 0006 7860     		str	r0, [r7, #4]
 19267 0008 0B46     		mov	r3, r1
 19268 000a FB70     		strb	r3, [r7, #3]
1187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19269              		.loc 1 1190 0
 19270 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19271 000e 002B     		cmp	r3, #0
 19272 0010 07D0     		beq	.L100
1191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1192:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 19273              		.loc 1 1192 0
 19274 0012 0B4B     		ldr	r3, .L102
 19275 0014 0A4A     		ldr	r2, .L102
 19276 0016 D168     		ldr	r1, [r2, #12]
 19277 0018 7A68     		ldr	r2, [r7, #4]
 19278 001a 41EA0202 		orr	r2, r1, r2
 19279 001e DA60     		str	r2, [r3, #12]
 19280 0020 08E0     		b	.L99
 19281              	.L100:
1193:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1194:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1195:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1196:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 19282              		.loc 1 1196 0
 19283 0022 074B     		ldr	r3, .L102
 19284 0024 064A     		ldr	r2, .L102
 19285 0026 D168     		ldr	r1, [r2, #12]
 19286 0028 7A68     		ldr	r2, [r7, #4]
 19287 002a 6FEA0202 		mvn	r2, r2
 19288 002e 01EA0202 		and	r2, r1, r2
 19289 0032 DA60     		str	r2, [r3, #12]
 19290              	.L99:
1197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1198:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19291              		.loc 1 1198 0
 19292 0034 07F10C07 		add	r7, r7, #12
 19293 0038 BD46     		mov	sp, r7
 19294 003a 80BC     		pop	{r7}
 19295 003c 7047     		bx	lr
 19296              	.L103:
 19297 003e 00BF     		.align	2
 19298              	.L102:
 19299 0040 00100240 		.word	1073876992
 19300              		.cfi_endproc
 19301              	.LFE53:
 19303              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 19304              		.align	2
 19305              		.global	RCC_APB1PeriphResetCmd
 19306              		.thumb
 19307              		.thumb_func
 19309              	RCC_APB1PeriphResetCmd:
 19310              	.LFB54:
1199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1216:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19311              		.loc 1 1217 0
 19312              		.cfi_startproc
 19313              		@ args = 0, pretend = 0, frame = 8
 19314              		@ frame_needed = 1, uses_anonymous_args = 0
 19315              		@ link register save eliminated.
 19316 0000 80B4     		push	{r7}
 19317              	.LCFI73:
 19318              		.cfi_def_cfa_offset 4
 19319 0002 83B0     		sub	sp, sp, #12
 19320              	.LCFI74:
 19321              		.cfi_def_cfa_offset 16
 19322 0004 00AF     		add	r7, sp, #0
 19323              		.cfi_offset 7, -4
 19324              	.LCFI75:
 19325              		.cfi_def_cfa_register 7
 19326 0006 7860     		str	r0, [r7, #4]
 19327 0008 0B46     		mov	r3, r1
 19328 000a FB70     		strb	r3, [r7, #3]
1218:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19329              		.loc 1 1221 0
 19330 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19331 000e 002B     		cmp	r3, #0
 19332 0010 07D0     		beq	.L105
1222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1223:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 19333              		.loc 1 1223 0
 19334 0012 0B4B     		ldr	r3, .L107
 19335 0014 0A4A     		ldr	r2, .L107
 19336 0016 1169     		ldr	r1, [r2, #16]
 19337 0018 7A68     		ldr	r2, [r7, #4]
 19338 001a 41EA0202 		orr	r2, r1, r2
 19339 001e 1A61     		str	r2, [r3, #16]
 19340 0020 08E0     		b	.L104
 19341              	.L105:
1224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1225:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1227:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 19342              		.loc 1 1227 0
 19343 0022 074B     		ldr	r3, .L107
 19344 0024 064A     		ldr	r2, .L107
 19345 0026 1169     		ldr	r1, [r2, #16]
 19346 0028 7A68     		ldr	r2, [r7, #4]
 19347 002a 6FEA0202 		mvn	r2, r2
 19348 002e 01EA0202 		and	r2, r1, r2
 19349 0032 1A61     		str	r2, [r3, #16]
 19350              	.L104:
1228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1229:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19351              		.loc 1 1229 0
 19352 0034 07F10C07 		add	r7, r7, #12
 19353 0038 BD46     		mov	sp, r7
 19354 003a 80BC     		pop	{r7}
 19355 003c 7047     		bx	lr
 19356              	.L108:
 19357 003e 00BF     		.align	2
 19358              	.L107:
 19359 0040 00100240 		.word	1073876992
 19360              		.cfi_endproc
 19361              	.LFE54:
 19363              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 19364              		.align	2
 19365              		.global	RCC_BackupResetCmd
 19366              		.thumb
 19367              		.thumb_func
 19369              	RCC_BackupResetCmd:
 19370              	.LFB55:
1230:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19371              		.loc 1 1238 0
 19372              		.cfi_startproc
 19373              		@ args = 0, pretend = 0, frame = 8
 19374              		@ frame_needed = 1, uses_anonymous_args = 0
 19375              		@ link register save eliminated.
 19376 0000 80B4     		push	{r7}
 19377              	.LCFI76:
 19378              		.cfi_def_cfa_offset 4
 19379 0002 83B0     		sub	sp, sp, #12
 19380              	.LCFI77:
 19381              		.cfi_def_cfa_offset 16
 19382 0004 00AF     		add	r7, sp, #0
 19383              		.cfi_offset 7, -4
 19384              	.LCFI78:
 19385              		.cfi_def_cfa_register 7
 19386 0006 0346     		mov	r3, r0
 19387 0008 FB71     		strb	r3, [r7, #7]
1239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 19388              		.loc 1 1241 0
 19389 000a 044B     		ldr	r3, .L110
 19390 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 19391 000e 1A60     		str	r2, [r3, #0]
1242:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19392              		.loc 1 1242 0
 19393 0010 07F10C07 		add	r7, r7, #12
 19394 0014 BD46     		mov	sp, r7
 19395 0016 80BC     		pop	{r7}
 19396 0018 7047     		bx	lr
 19397              	.L111:
 19398 001a 00BF     		.align	2
 19399              	.L110:
 19400 001c 40044242 		.word	1111622720
 19401              		.cfi_endproc
 19402              	.LFE55:
 19404              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 19405              		.align	2
 19406              		.global	RCC_ClockSecuritySystemCmd
 19407              		.thumb
 19408              		.thumb_func
 19410              	RCC_ClockSecuritySystemCmd:
 19411              	.LFB56:
1243:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19412              		.loc 1 1251 0
 19413              		.cfi_startproc
 19414              		@ args = 0, pretend = 0, frame = 8
 19415              		@ frame_needed = 1, uses_anonymous_args = 0
 19416              		@ link register save eliminated.
 19417 0000 80B4     		push	{r7}
 19418              	.LCFI79:
 19419              		.cfi_def_cfa_offset 4
 19420 0002 83B0     		sub	sp, sp, #12
 19421              	.LCFI80:
 19422              		.cfi_def_cfa_offset 16
 19423 0004 00AF     		add	r7, sp, #0
 19424              		.cfi_offset 7, -4
 19425              	.LCFI81:
 19426              		.cfi_def_cfa_register 7
 19427 0006 0346     		mov	r3, r0
 19428 0008 FB71     		strb	r3, [r7, #7]
1252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 19429              		.loc 1 1254 0
 19430 000a 044B     		ldr	r3, .L113
 19431 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 19432 000e 1A60     		str	r2, [r3, #0]
1255:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19433              		.loc 1 1255 0
 19434 0010 07F10C07 		add	r7, r7, #12
 19435 0014 BD46     		mov	sp, r7
 19436 0016 80BC     		pop	{r7}
 19437 0018 7047     		bx	lr
 19438              	.L114:
 19439 001a 00BF     		.align	2
 19440              	.L113:
 19441 001c 4C004242 		.word	1111621708
 19442              		.cfi_endproc
 19443              	.LFE56:
 19445              		.section	.text.RCC_MCOConfig,"ax",%progbits
 19446              		.align	2
 19447              		.global	RCC_MCOConfig
 19448              		.thumb
 19449              		.thumb_func
 19451              	RCC_MCOConfig:
 19452              	.LFB57:
1256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1258:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:       
1263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1282:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19453              		.loc 1 1283 0
 19454              		.cfi_startproc
 19455              		@ args = 0, pretend = 0, frame = 8
 19456              		@ frame_needed = 1, uses_anonymous_args = 0
 19457              		@ link register save eliminated.
 19458 0000 80B4     		push	{r7}
 19459              	.LCFI82:
 19460              		.cfi_def_cfa_offset 4
 19461 0002 83B0     		sub	sp, sp, #12
 19462              	.LCFI83:
 19463              		.cfi_def_cfa_offset 16
 19464 0004 00AF     		add	r7, sp, #0
 19465              		.cfi_offset 7, -4
 19466              	.LCFI84:
 19467              		.cfi_def_cfa_register 7
 19468 0006 0346     		mov	r3, r0
 19469 0008 FB71     		strb	r3, [r7, #7]
1284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 19470              		.loc 1 1288 0
 19471 000a 044B     		ldr	r3, .L116
 19472 000c FA79     		ldrb	r2, [r7, #7]
 19473 000e 1A70     		strb	r2, [r3, #0]
1289:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19474              		.loc 1 1289 0
 19475 0010 07F10C07 		add	r7, r7, #12
 19476 0014 BD46     		mov	sp, r7
 19477 0016 80BC     		pop	{r7}
 19478 0018 7047     		bx	lr
 19479              	.L117:
 19480 001a 00BF     		.align	2
 19481              	.L116:
 19482 001c 07100240 		.word	1073876999
 19483              		.cfi_endproc
 19484              	.LFE57:
 19486              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 19487              		.align	2
 19488              		.global	RCC_GetFlagStatus
 19489              		.thumb
 19490              		.thumb_func
 19492              	RCC_GetFlagStatus:
 19493              	.LFB58:
1290:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1291:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1295:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1297:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19494              		.loc 1 1327 0
 19495              		.cfi_startproc
 19496              		@ args = 0, pretend = 0, frame = 24
 19497              		@ frame_needed = 1, uses_anonymous_args = 0
 19498              		@ link register save eliminated.
 19499 0000 80B4     		push	{r7}
 19500              	.LCFI85:
 19501              		.cfi_def_cfa_offset 4
 19502 0002 87B0     		sub	sp, sp, #28
 19503              	.LCFI86:
 19504              		.cfi_def_cfa_offset 32
 19505 0004 00AF     		add	r7, sp, #0
 19506              		.cfi_offset 7, -4
 19507              	.LCFI87:
 19508              		.cfi_def_cfa_register 7
 19509 0006 0346     		mov	r3, r0
 19510 0008 FB71     		strb	r3, [r7, #7]
1328:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 19511              		.loc 1 1328 0
 19512 000a 4FF00003 		mov	r3, #0
 19513 000e FB60     		str	r3, [r7, #12]
1329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 19514              		.loc 1 1329 0
 19515 0010 4FF00003 		mov	r3, #0
 19516 0014 7B61     		str	r3, [r7, #20]
1330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 19517              		.loc 1 1330 0
 19518 0016 4FF00003 		mov	r3, #0
 19519 001a FB74     		strb	r3, [r7, #19]
1331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1334:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 19520              		.loc 1 1335 0
 19521 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19522 001e 4FEA5313 		lsr	r3, r3, #5
 19523 0022 DBB2     		uxtb	r3, r3
 19524 0024 FB60     		str	r3, [r7, #12]
1336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 19525              		.loc 1 1336 0
 19526 0026 FB68     		ldr	r3, [r7, #12]
 19527 0028 012B     		cmp	r3, #1
 19528 002a 03D1     		bne	.L119
1337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 19529              		.loc 1 1338 0
 19530 002c 144B     		ldr	r3, .L124
 19531 002e 1B68     		ldr	r3, [r3, #0]
 19532 0030 7B61     		str	r3, [r7, #20]
 19533 0032 09E0     		b	.L120
 19534              	.L119:
1339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 19535              		.loc 1 1340 0
 19536 0034 FB68     		ldr	r3, [r7, #12]
 19537 0036 022B     		cmp	r3, #2
 19538 0038 03D1     		bne	.L121
1341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 19539              		.loc 1 1342 0
 19540 003a 114B     		ldr	r3, .L124
 19541 003c 1B6A     		ldr	r3, [r3, #32]
 19542 003e 7B61     		str	r3, [r7, #20]
 19543 0040 02E0     		b	.L120
 19544              	.L121:
1343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1346:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 19545              		.loc 1 1346 0
 19546 0042 0F4B     		ldr	r3, .L124
 19547 0044 5B6A     		ldr	r3, [r3, #36]
 19548 0046 7B61     		str	r3, [r7, #20]
 19549              	.L120:
1347:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 19550              		.loc 1 1350 0
 19551 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19552 004a 03F01F03 		and	r3, r3, #31
 19553 004e FB60     		str	r3, [r7, #12]
1351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 19554              		.loc 1 1351 0
 19555 0050 FB68     		ldr	r3, [r7, #12]
 19556 0052 7A69     		ldr	r2, [r7, #20]
 19557 0054 22FA03F3 		lsr	r3, r2, r3
 19558 0058 03F00103 		and	r3, r3, #1
 19559 005c DBB2     		uxtb	r3, r3
 19560 005e 002B     		cmp	r3, #0
 19561 0060 03D0     		beq	.L122
1352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 19562              		.loc 1 1353 0
 19563 0062 4FF00103 		mov	r3, #1
 19564 0066 FB74     		strb	r3, [r7, #19]
 19565 0068 02E0     		b	.L123
 19566              	.L122:
1354:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1355:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 19567              		.loc 1 1357 0
 19568 006a 4FF00003 		mov	r3, #0
 19569 006e FB74     		strb	r3, [r7, #19]
 19570              	.L123:
1358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1360:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return bitstatus;
 19571              		.loc 1 1361 0
 19572 0070 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19573              		.loc 1 1362 0
 19574 0072 1846     		mov	r0, r3
 19575 0074 07F11C07 		add	r7, r7, #28
 19576 0078 BD46     		mov	sp, r7
 19577 007a 80BC     		pop	{r7}
 19578 007c 7047     		bx	lr
 19579              	.L125:
 19580 007e 00BF     		.align	2
 19581              	.L124:
 19582 0080 00100240 		.word	1073876992
 19583              		.cfi_endproc
 19584              	.LFE58:
 19586              		.section	.text.RCC_ClearFlag,"ax",%progbits
 19587              		.align	2
 19588              		.global	RCC_ClearFlag
 19589              		.thumb
 19590              		.thumb_func
 19592              	RCC_ClearFlag:
 19593              	.LFB59:
1363:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1364:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
1369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1371:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19594              		.loc 1 1372 0
 19595              		.cfi_startproc
 19596              		@ args = 0, pretend = 0, frame = 0
 19597              		@ frame_needed = 1, uses_anonymous_args = 0
 19598              		@ link register save eliminated.
 19599 0000 80B4     		push	{r7}
 19600              	.LCFI88:
 19601              		.cfi_def_cfa_offset 4
 19602 0002 00AF     		add	r7, sp, #0
 19603              		.cfi_offset 7, -4
 19604              	.LCFI89:
 19605              		.cfi_def_cfa_register 7
1373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 19606              		.loc 1 1374 0
 19607 0004 044B     		ldr	r3, .L127
 19608 0006 044A     		ldr	r2, .L127
 19609 0008 526A     		ldr	r2, [r2, #36]
 19610 000a 42F08072 		orr	r2, r2, #16777216
 19611 000e 5A62     		str	r2, [r3, #36]
1375:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19612              		.loc 1 1375 0
 19613 0010 BD46     		mov	sp, r7
 19614 0012 80BC     		pop	{r7}
 19615 0014 7047     		bx	lr
 19616              	.L128:
 19617 0016 00BF     		.align	2
 19618              	.L127:
 19619 0018 00100240 		.word	1073876992
 19620              		.cfi_endproc
 19621              	.LFE59:
 19623              		.section	.text.RCC_GetITStatus,"ax",%progbits
 19624              		.align	2
 19625              		.global	RCC_GetITStatus
 19626              		.thumb
 19627              		.thumb_func
 19629              	RCC_GetITStatus:
 19630              	.LFB60:
1376:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1377:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1378:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1381:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19631              		.loc 1 1403 0
 19632              		.cfi_startproc
 19633              		@ args = 0, pretend = 0, frame = 16
 19634              		@ frame_needed = 1, uses_anonymous_args = 0
 19635              		@ link register save eliminated.
 19636 0000 80B4     		push	{r7}
 19637              	.LCFI90:
 19638              		.cfi_def_cfa_offset 4
 19639 0002 85B0     		sub	sp, sp, #20
 19640              	.LCFI91:
 19641              		.cfi_def_cfa_offset 24
 19642 0004 00AF     		add	r7, sp, #0
 19643              		.cfi_offset 7, -4
 19644              	.LCFI92:
 19645              		.cfi_def_cfa_register 7
 19646 0006 0346     		mov	r3, r0
 19647 0008 FB71     		strb	r3, [r7, #7]
1404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 19648              		.loc 1 1404 0
 19649 000a 4FF00003 		mov	r3, #0
 19650 000e FB73     		strb	r3, [r7, #15]
1405:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1408:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 19651              		.loc 1 1409 0
 19652 0010 0A4B     		ldr	r3, .L132
 19653 0012 9A68     		ldr	r2, [r3, #8]
 19654 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19655 0016 02EA0303 		and	r3, r2, r3
 19656 001a 002B     		cmp	r3, #0
 19657 001c 03D0     		beq	.L130
1410:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 19658              		.loc 1 1411 0
 19659 001e 4FF00103 		mov	r3, #1
 19660 0022 FB73     		strb	r3, [r7, #15]
 19661 0024 02E0     		b	.L131
 19662              	.L130:
1412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 19663              		.loc 1 1415 0
 19664 0026 4FF00003 		mov	r3, #0
 19665 002a FB73     		strb	r3, [r7, #15]
 19666              	.L131:
1416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1417:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return  bitstatus;
 19667              		.loc 1 1419 0
 19668 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19669              		.loc 1 1420 0
 19670 002e 1846     		mov	r0, r3
 19671 0030 07F11407 		add	r7, r7, #20
 19672 0034 BD46     		mov	sp, r7
 19673 0036 80BC     		pop	{r7}
 19674 0038 7047     		bx	lr
 19675              	.L133:
 19676 003a 00BF     		.align	2
 19677              	.L132:
 19678 003c 00100240 		.word	1073876992
 19679              		.cfi_endproc
 19680              	.LFE60:
 19682              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 19683              		.align	2
 19684              		.global	RCC_ClearITPendingBit
 19685              		.thumb
 19686              		.thumb_func
 19688              	RCC_ClearITPendingBit:
 19689              	.LFB61:
1421:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1422:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1426:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:
1428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1445:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1448:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19690              		.loc 1 1449 0
 19691              		.cfi_startproc
 19692              		@ args = 0, pretend = 0, frame = 8
 19693              		@ frame_needed = 1, uses_anonymous_args = 0
 19694              		@ link register save eliminated.
 19695 0000 80B4     		push	{r7}
 19696              	.LCFI93:
 19697              		.cfi_def_cfa_offset 4
 19698 0002 83B0     		sub	sp, sp, #12
 19699              	.LCFI94:
 19700              		.cfi_def_cfa_offset 16
 19701 0004 00AF     		add	r7, sp, #0
 19702              		.cfi_offset 7, -4
 19703              	.LCFI95:
 19704              		.cfi_def_cfa_register 7
 19705 0006 0346     		mov	r3, r0
 19706 0008 FB71     		strb	r3, [r7, #7]
1450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../StdPeripheralDriver/src/stm32f10x_rcc.c ****      pending bits */
1455:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 19707              		.loc 1 1455 0
 19708 000a 044B     		ldr	r3, .L135
 19709 000c FA79     		ldrb	r2, [r7, #7]
 19710 000e 1A70     		strb	r2, [r3, #0]
1456:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19711              		.loc 1 1456 0
 19712 0010 07F10C07 		add	r7, r7, #12
 19713 0014 BD46     		mov	sp, r7
 19714 0016 80BC     		pop	{r7}
 19715 0018 7047     		bx	lr
 19716              	.L136:
 19717 001a 00BF     		.align	2
 19718              	.L135:
 19719 001c 0A100240 		.word	1073877002
 19720              		.cfi_endproc
 19721              	.LFE61:
 19723              		.text
 19724              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/cc0ZSc71.s:17711  .data.APBAHBPrescTable:00000000 $d
     /tmp/cc0ZSc71.s:17714  .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/cc0ZSc71.s:17732  .data.ADCPrescTable:00000000 $d
     /tmp/cc0ZSc71.s:17735  .data.ADCPrescTable:00000000 ADCPrescTable
     /tmp/cc0ZSc71.s:17741  .text.RCC_DeInit:00000000 $t
     /tmp/cc0ZSc71.s:17746  .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/cc0ZSc71.s:17807  .text.RCC_DeInit:0000005c $d
     /tmp/cc0ZSc71.s:17813  .text.RCC_HSEConfig:00000000 $t
     /tmp/cc0ZSc71.s:17818  .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/cc0ZSc71.s:17883  .text.RCC_HSEConfig:00000058 $d
     /tmp/cc0ZSc71.s:17888  .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/cc0ZSc71.s:17893  .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/cc0ZSc71.s:19492  .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/cc0ZSc71.s:17963  .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/cc0ZSc71.s:17968  .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/cc0ZSc71.s:18016  .text.RCC_AdjustHSICalibrationValue:0000003c $d
     /tmp/cc0ZSc71.s:18021  .text.RCC_HSICmd:00000000 $t
     /tmp/cc0ZSc71.s:18026  .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/cc0ZSc71.s:18057  .text.RCC_HSICmd:0000001c $d
     /tmp/cc0ZSc71.s:18062  .text.RCC_PLLConfig:00000000 $t
     /tmp/cc0ZSc71.s:18067  .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/cc0ZSc71.s:18116  .text.RCC_PLLConfig:00000040 $d
     /tmp/cc0ZSc71.s:18121  .text.RCC_PLLCmd:00000000 $t
     /tmp/cc0ZSc71.s:18126  .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/cc0ZSc71.s:18157  .text.RCC_PLLCmd:0000001c $d
     /tmp/cc0ZSc71.s:18162  .text.RCC_PREDIV1Config:00000000 $t
     /tmp/cc0ZSc71.s:18167  .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
     /tmp/cc0ZSc71.s:18217  .text.RCC_PREDIV1Config:00000044 $d
     /tmp/cc0ZSc71.s:18222  .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/cc0ZSc71.s:18227  .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/cc0ZSc71.s:18273  .text.RCC_SYSCLKConfig:00000038 $d
     /tmp/cc0ZSc71.s:18278  .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/cc0ZSc71.s:18283  .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/cc0ZSc71.s:18311  .text.RCC_GetSYSCLKSource:00000018 $d
     /tmp/cc0ZSc71.s:18316  .text.RCC_HCLKConfig:00000000 $t
     /tmp/cc0ZSc71.s:18321  .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/cc0ZSc71.s:18367  .text.RCC_HCLKConfig:00000038 $d
     /tmp/cc0ZSc71.s:18372  .text.RCC_PCLK1Config:00000000 $t
     /tmp/cc0ZSc71.s:18377  .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/cc0ZSc71.s:18423  .text.RCC_PCLK1Config:00000038 $d
     /tmp/cc0ZSc71.s:18428  .text.RCC_PCLK2Config:00000000 $t
     /tmp/cc0ZSc71.s:18433  .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/cc0ZSc71.s:18480  .text.RCC_PCLK2Config:0000003c $d
     /tmp/cc0ZSc71.s:18485  .text.RCC_ITConfig:00000000 $t
     /tmp/cc0ZSc71.s:18490  .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/cc0ZSc71.s:18546  .text.RCC_ITConfig:0000004c $d
     /tmp/cc0ZSc71.s:18551  .text.RCC_USBCLKConfig:00000000 $t
     /tmp/cc0ZSc71.s:18556  .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
     /tmp/cc0ZSc71.s:18586  .text.RCC_USBCLKConfig:00000018 $d
     /tmp/cc0ZSc71.s:18591  .text.RCC_ADCCLKConfig:00000000 $t
     /tmp/cc0ZSc71.s:18596  .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
     /tmp/cc0ZSc71.s:18642  .text.RCC_ADCCLKConfig:00000038 $d
     /tmp/cc0ZSc71.s:18647  .text.RCC_LSEConfig:00000000 $t
     /tmp/cc0ZSc71.s:18652  .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/cc0ZSc71.s:18710  .text.RCC_LSEConfig:00000044 $d
     /tmp/cc0ZSc71.s:18715  .text.RCC_LSICmd:00000000 $t
     /tmp/cc0ZSc71.s:18720  .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/cc0ZSc71.s:18751  .text.RCC_LSICmd:0000001c $d
     /tmp/cc0ZSc71.s:18756  .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/cc0ZSc71.s:18761  .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/cc0ZSc71.s:18794  .text.RCC_RTCCLKConfig:00000020 $d
     /tmp/cc0ZSc71.s:18799  .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/cc0ZSc71.s:18804  .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/cc0ZSc71.s:18835  .text.RCC_RTCCLKCmd:0000001c $d
     /tmp/cc0ZSc71.s:18840  .text.RCC_GetClocksFreq:00000000 $t
     /tmp/cc0ZSc71.s:18845  .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/cc0ZSc71.s:19055  .text.RCC_GetClocksFreq:00000168 $d
     /tmp/cc0ZSc71.s:19064  .text.RCC_AHBPeriphClockCmd:00000000 $t
     /tmp/cc0ZSc71.s:19069  .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
     /tmp/cc0ZSc71.s:19119  .text.RCC_AHBPeriphClockCmd:00000040 $d
     /tmp/cc0ZSc71.s:19124  .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/cc0ZSc71.s:19129  .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/cc0ZSc71.s:19179  .text.RCC_APB2PeriphClockCmd:00000040 $d
     /tmp/cc0ZSc71.s:19184  .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/cc0ZSc71.s:19189  .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/cc0ZSc71.s:19239  .text.RCC_APB1PeriphClockCmd:00000040 $d
     /tmp/cc0ZSc71.s:19244  .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/cc0ZSc71.s:19249  .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/cc0ZSc71.s:19299  .text.RCC_APB2PeriphResetCmd:00000040 $d
     /tmp/cc0ZSc71.s:19304  .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/cc0ZSc71.s:19309  .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/cc0ZSc71.s:19359  .text.RCC_APB1PeriphResetCmd:00000040 $d
     /tmp/cc0ZSc71.s:19364  .text.RCC_BackupResetCmd:00000000 $t
     /tmp/cc0ZSc71.s:19369  .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/cc0ZSc71.s:19400  .text.RCC_BackupResetCmd:0000001c $d
     /tmp/cc0ZSc71.s:19405  .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/cc0ZSc71.s:19410  .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/cc0ZSc71.s:19441  .text.RCC_ClockSecuritySystemCmd:0000001c $d
     /tmp/cc0ZSc71.s:19446  .text.RCC_MCOConfig:00000000 $t
     /tmp/cc0ZSc71.s:19451  .text.RCC_MCOConfig:00000000 RCC_MCOConfig
     /tmp/cc0ZSc71.s:19482  .text.RCC_MCOConfig:0000001c $d
     /tmp/cc0ZSc71.s:19487  .text.RCC_GetFlagStatus:00000000 $t
     /tmp/cc0ZSc71.s:19582  .text.RCC_GetFlagStatus:00000080 $d
     /tmp/cc0ZSc71.s:19587  .text.RCC_ClearFlag:00000000 $t
     /tmp/cc0ZSc71.s:19592  .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/cc0ZSc71.s:19619  .text.RCC_ClearFlag:00000018 $d
     /tmp/cc0ZSc71.s:19624  .text.RCC_GetITStatus:00000000 $t
     /tmp/cc0ZSc71.s:19629  .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/cc0ZSc71.s:19678  .text.RCC_GetITStatus:0000003c $d
     /tmp/cc0ZSc71.s:19683  .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/cc0ZSc71.s:19688  .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/cc0ZSc71.s:19719  .text.RCC_ClearITPendingBit:0000001c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
