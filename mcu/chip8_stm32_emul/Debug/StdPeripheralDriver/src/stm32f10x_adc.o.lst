   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_adc.c"
  23              	.Ltext0:
  24              		.file 1 "../StdPeripheralDriver/src/stm32f10x_adc.c"
 18114              		.align	2
 18115              		.global	ADC_DeInit
 18116              		.thumb
 18117              		.thumb_func
 18119              	ADC_DeInit:
 18120              	.LFB29:
   1:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @file    stm32f10x_adc.c
   4:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief   This file provides all the ADC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_adc.h"
  24:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_rcc.h"
  25:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  26:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  28:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  29:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  30:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC 
  31:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief ADC driver modules
  32:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  33:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  34:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  35:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_TypesDefinitions
  36:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  37:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  38:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  39:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
  40:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
  41:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  42:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  43:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Defines
  44:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  45:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  46:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  47:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCNUM mask */
  48:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCNUM_Reset           ((uint32_t)0xFFFF1FFF)
  49:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  50:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCEN mask */
  51:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Set              ((uint32_t)0x00000800)
  52:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Reset            ((uint32_t)0xFFFFF7FF)
  53:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  54:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JAUTO mask */
  55:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Set               ((uint32_t)0x00000400)
  56:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Reset             ((uint32_t)0xFFFFFBFF)
  57:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  58:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDISCEN mask */
  59:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Set             ((uint32_t)0x00001000)
  60:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Reset           ((uint32_t)0xFFFFEFFF)
  61:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  62:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC AWDCH mask */
  63:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDCH_Reset             ((uint32_t)0xFFFFFFE0)
  64:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Analog watchdog enable mode mask */
  66:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDMode_Reset           ((uint32_t)0xFF3FFDFF)
  67:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  68:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR1 register Mask */
  69:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_CLEAR_Mask              ((uint32_t)0xFFF0FEFF)
  70:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  71:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC ADON mask */
  72:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Set                ((uint32_t)0x00000001)
  73:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Reset              ((uint32_t)0xFFFFFFFE)
  74:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  75:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DMA mask */
  76:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Set                 ((uint32_t)0x00000100)
  77:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Reset               ((uint32_t)0xFFFFFEFF)
  78:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC RSTCAL mask */
  80:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_RSTCAL_Set              ((uint32_t)0x00000008)
  81:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  82:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC CAL mask */
  83:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CAL_Set                 ((uint32_t)0x00000004)
  84:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  85:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SWSTART mask */
  86:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_SWSTART_Set             ((uint32_t)0x00400000)
  87:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  88:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC EXTTRIG mask */
  89:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Set             ((uint32_t)0x00100000)
  90:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Reset           ((uint32_t)0xFFEFFFFF)
  91:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  92:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Software start mask */
  93:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Set     ((uint32_t)0x00500000)
  94:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Reset   ((uint32_t)0xFFAFFFFF)
  95:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  96:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTSEL mask */
  97:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTSEL_Reset           ((uint32_t)0xFFFF8FFF)
  98:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  99:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTTRIG mask */
 100:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Set            ((uint32_t)0x00008000)
 101:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Reset          ((uint32_t)0xFFFF7FFF)
 102:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 103:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSWSTART mask */
 104:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JSWSTART_Set            ((uint32_t)0x00200000)
 105:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 106:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC injected software start mask */
 107:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Set   ((uint32_t)0x00208000)
 108:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Reset ((uint32_t)0xFFDF7FFF)
 109:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 110:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC TSPD mask */
 111:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Set             ((uint32_t)0x00800000)
 112:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Reset           ((uint32_t)0xFF7FFFFF)
 113:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 114:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR2 register Mask */
 115:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CLEAR_Mask              ((uint32_t)0xFFF1F7FD)
 116:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 117:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SQx mask */
 118:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR3_SQ_Set                 ((uint32_t)0x0000001F)
 119:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR2_SQ_Set                 ((uint32_t)0x0000001F)
 120:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_SQ_Set                 ((uint32_t)0x0000001F)
 121:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 122:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* SQR1 register Mask */
 123:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_CLEAR_Mask             ((uint32_t)0xFF0FFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 125:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSQx mask */
 126:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JSQ_Set                ((uint32_t)0x0000001F)
 127:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 128:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JL mask */
 129:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Set                 ((uint32_t)0x00300000)
 130:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Reset               ((uint32_t)0xFFCFFFFF)
 131:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 132:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SMPx mask */
 133:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR1_SMP_Set               ((uint32_t)0x00000007)
 134:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR2_SMP_Set               ((uint32_t)0x00000007)
 135:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 136:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDRx registers offset */
 137:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JDR_Offset                  ((uint8_t)0x28)
 138:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 139:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC1 DR register base address */
 140:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define DR_ADDRESS                  ((uint32_t)0x4001244C)
 141:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 142:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 143:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 144:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 145:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 146:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Macros
 147:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 148:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 149:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 150:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 151:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 152:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 153:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 154:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Variables
 155:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 156:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 157:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 158:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 159:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 160:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 161:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_FunctionPrototypes
 163:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 164:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 165:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 166:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 167:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 168:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 169:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 170:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Functions
 171:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 172:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 173:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 175:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
 176:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 177:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 178:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 179:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DeInit(ADC_TypeDef* ADCx)
 180:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18121              		.loc 1 180 0
 18122              		.cfi_startproc
 18123              		@ args = 0, pretend = 0, frame = 8
 18124              		@ frame_needed = 1, uses_anonymous_args = 0
 18125 0000 80B5     		push	{r7, lr}
 18126              	.LCFI0:
 18127              		.cfi_def_cfa_offset 8
 18128 0002 82B0     		sub	sp, sp, #8
 18129              	.LCFI1:
 18130              		.cfi_def_cfa_offset 16
 18131 0004 00AF     		add	r7, sp, #0
 18132              		.cfi_offset 14, -4
 18133              		.cfi_offset 7, -8
 18134              	.LCFI2:
 18135              		.cfi_def_cfa_register 7
 18136 0006 7860     		str	r0, [r7, #4]
 181:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 182:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 183:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
 184:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADCx == ADC1)
 18137              		.loc 1 184 0
 18138 0008 7A68     		ldr	r2, [r7, #4]
 18139 000a 1A4B     		ldr	r3, .L5
 18140 000c 9A42     		cmp	r2, r3
 18141 000e 0CD1     		bne	.L2
 185:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 186:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable ADC1 reset state */
 187:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 18142              		.loc 1 187 0
 18143 0010 4FF40070 		mov	r0, #512
 18144 0014 4FF00101 		mov	r1, #1
 18145 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 188:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Release ADC1 from reset state */
 189:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 18146              		.loc 1 189 0
 18147 001c 4FF40070 		mov	r0, #512
 18148 0020 4FF00001 		mov	r1, #0
 18149 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 18150 0028 20E0     		b	.L1
 18151              	.L2:
 190:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 191:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else if (ADCx == ADC2)
 18152              		.loc 1 191 0
 18153 002a 7A68     		ldr	r2, [r7, #4]
 18154 002c 124B     		ldr	r3, .L5+4
 18155 002e 9A42     		cmp	r2, r3
 18156 0030 0CD1     		bne	.L4
 192:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 193:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable ADC2 reset state */
 194:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 18157              		.loc 1 194 0
 18158 0032 4FF48060 		mov	r0, #1024
 18159 0036 4FF00101 		mov	r1, #1
 18160 003a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 195:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Release ADC2 from reset state */
 196:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 18161              		.loc 1 196 0
 18162 003e 4FF48060 		mov	r0, #1024
 18163 0042 4FF00001 		mov	r1, #0
 18164 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 18165 004a 0FE0     		b	.L1
 18166              	.L4:
 197:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 198:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 199:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 200:../StdPeripheralDriver/src/stm32f10x_adc.c ****     if (ADCx == ADC3)
 18167              		.loc 1 200 0
 18168 004c 7A68     		ldr	r2, [r7, #4]
 18169 004e 0B4B     		ldr	r3, .L5+8
 18170 0050 9A42     		cmp	r2, r3
 18171 0052 0BD1     		bne	.L1
 201:../StdPeripheralDriver/src/stm32f10x_adc.c ****     {
 202:../StdPeripheralDriver/src/stm32f10x_adc.c ****       /* Enable ADC3 reset state */
 203:../StdPeripheralDriver/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 18172              		.loc 1 203 0
 18173 0054 4FF40040 		mov	r0, #32768
 18174 0058 4FF00101 		mov	r1, #1
 18175 005c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 204:../StdPeripheralDriver/src/stm32f10x_adc.c ****       /* Release ADC3 from reset state */
 205:../StdPeripheralDriver/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 18176              		.loc 1 205 0
 18177 0060 4FF40040 		mov	r0, #32768
 18178 0064 4FF00001 		mov	r1, #0
 18179 0068 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 18180              	.L1:
 206:../StdPeripheralDriver/src/stm32f10x_adc.c ****     }
 207:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 208:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18181              		.loc 1 208 0
 18182 006c 07F10807 		add	r7, r7, #8
 18183 0070 BD46     		mov	sp, r7
 18184 0072 80BD     		pop	{r7, pc}
 18185              	.L6:
 18186              		.align	2
 18187              	.L5:
 18188 0074 00240140 		.word	1073816576
 18189 0078 00280140 		.word	1073817600
 18190 007c 003C0140 		.word	1073822720
 18191              		.cfi_endproc
 18192              	.LFE29:
 18194              		.section	.text.ADC_Init,"ax",%progbits
 18195              		.align	2
 18196              		.global	ADC_Init
 18197              		.thumb
 18198              		.thumb_func
 18200              	ADC_Init:
 18201              	.LFB30:
 209:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 210:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 211:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters
 212:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         in the ADC_InitStruct.
 213:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 214:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 215:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         the configuration information for the specified ADC peripheral.
 216:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 217:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 218:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 219:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18202              		.loc 1 219 0
 18203              		.cfi_startproc
 18204              		@ args = 0, pretend = 0, frame = 16
 18205              		@ frame_needed = 1, uses_anonymous_args = 0
 18206              		@ link register save eliminated.
 18207 0000 80B4     		push	{r7}
 18208              	.LCFI3:
 18209              		.cfi_def_cfa_offset 4
 18210 0002 85B0     		sub	sp, sp, #20
 18211              	.LCFI4:
 18212              		.cfi_def_cfa_offset 24
 18213 0004 00AF     		add	r7, sp, #0
 18214              		.cfi_offset 7, -4
 18215              	.LCFI5:
 18216              		.cfi_def_cfa_register 7
 18217 0006 7860     		str	r0, [r7, #4]
 18218 0008 3960     		str	r1, [r7, #0]
 220:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 18219              		.loc 1 220 0
 18220 000a 4FF00003 		mov	r3, #0
 18221 000e FB60     		str	r3, [r7, #12]
 221:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t tmpreg2 = 0;
 18222              		.loc 1 221 0
 18223 0010 4FF00003 		mov	r3, #0
 18224 0014 FB72     		strb	r3, [r7, #11]
 222:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 223:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 224:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode));
 225:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 226:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode));
 227:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));   
 228:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 229:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));
 230:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 231:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 232:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx CR1 value */
 233:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 18225              		.loc 1 233 0
 18226 0016 7B68     		ldr	r3, [r7, #4]
 18227 0018 5B68     		ldr	r3, [r3, #4]
 18228 001a FB60     		str	r3, [r7, #12]
 234:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear DUALMOD and SCAN bits */
 235:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_CLEAR_Mask;
 18229              		.loc 1 235 0
 18230 001c FB68     		ldr	r3, [r7, #12]
 18231 001e 23F47023 		bic	r3, r3, #983040
 18232 0022 23F48073 		bic	r3, r3, #256
 18233 0026 FB60     		str	r3, [r7, #12]
 236:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: Dual mode and scan conversion mode */
 237:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set DUALMOD bits according to ADC_Mode value */
 238:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 239:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8
 18234              		.loc 1 239 0
 18235 0028 3B68     		ldr	r3, [r7, #0]
 18236 002a 1A68     		ldr	r2, [r3, #0]
 18237 002c 3B68     		ldr	r3, [r7, #0]
 18238 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 18239 0030 4FEA0323 		lsl	r3, r3, #8
 18240 0034 42EA0303 		orr	r3, r2, r3
 18241 0038 FA68     		ldr	r2, [r7, #12]
 18242 003a 42EA0303 		orr	r3, r2, r3
 18243 003e FB60     		str	r3, [r7, #12]
 240:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx CR1 */
 241:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 18244              		.loc 1 241 0
 18245 0040 7B68     		ldr	r3, [r7, #4]
 18246 0042 FA68     		ldr	r2, [r7, #12]
 18247 0044 5A60     		str	r2, [r3, #4]
 242:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 243:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 244:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx CR2 value */
 245:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR2;
 18248              		.loc 1 245 0
 18249 0046 7B68     		ldr	r3, [r7, #4]
 18250 0048 9B68     		ldr	r3, [r3, #8]
 18251 004a FB60     		str	r3, [r7, #12]
 246:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear CONT, ALIGN and EXTSEL bits */
 247:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR2_CLEAR_Mask;
 18252              		.loc 1 247 0
 18253 004c FA68     		ldr	r2, [r7, #12]
 18254 004e 1A4B     		ldr	r3, .L8
 18255 0050 02EA0303 		and	r3, r2, r3
 18256 0054 FB60     		str	r3, [r7, #12]
 248:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: external trigger event and continuous conversion mode */
 249:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 250:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 251:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 18257              		.loc 1 252 0
 18258 0056 3B68     		ldr	r3, [r7, #0]
 18259 0058 DA68     		ldr	r2, [r3, #12]
 18260 005a 3B68     		ldr	r3, [r7, #0]
 18261 005c 9B68     		ldr	r3, [r3, #8]
 18262 005e 1A43     		orrs	r2, r2, r3
 253:../StdPeripheralDriver/src/stm32f10x_adc.c ****             ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 18263              		.loc 1 253 0
 18264 0060 3B68     		ldr	r3, [r7, #0]
 18265 0062 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 18266 0064 4FEA4303 		lsl	r3, r3, #1
 252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 18267              		.loc 1 252 0
 18268 0068 42EA0303 		orr	r3, r2, r3
 18269 006c FA68     		ldr	r2, [r7, #12]
 18270 006e 42EA0303 		orr	r3, r2, r3
 18271 0072 FB60     		str	r3, [r7, #12]
 254:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx CR2 */
 255:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg1;
 18272              		.loc 1 255 0
 18273 0074 7B68     		ldr	r3, [r7, #4]
 18274 0076 FA68     		ldr	r2, [r7, #12]
 18275 0078 9A60     		str	r2, [r3, #8]
 256:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 257:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 258:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx SQR1 value */
 259:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->SQR1;
 18276              		.loc 1 259 0
 18277 007a 7B68     		ldr	r3, [r7, #4]
 18278 007c DB6A     		ldr	r3, [r3, #44]
 18279 007e FB60     		str	r3, [r7, #12]
 260:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear L bits */
 261:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= SQR1_CLEAR_Mask;
 18280              		.loc 1 261 0
 18281 0080 FB68     		ldr	r3, [r7, #12]
 18282 0082 23F47003 		bic	r3, r3, #15728640
 18283 0086 FB60     		str	r3, [r7, #12]
 262:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: regular channel sequence length */
 263:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set L bits according to ADC_NbrOfChannel value */
 264:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 18284              		.loc 1 264 0
 18285 0088 3B68     		ldr	r3, [r7, #0]
 18286 008a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 18287 008c 03F1FF33 		add	r3, r3, #-1
 18288 0090 DAB2     		uxtb	r2, r3
 18289 0092 FB7A     		ldrb	r3, [r7, #11]
 18290 0094 42EA0303 		orr	r3, r2, r3
 18291 0098 FB72     		strb	r3, [r7, #11]
 265:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)tmpreg2 << 20;
 18292              		.loc 1 265 0
 18293 009a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 18294 009c 4FEA0353 		lsl	r3, r3, #20
 18295 00a0 FA68     		ldr	r2, [r7, #12]
 18296 00a2 42EA0303 		orr	r3, r2, r3
 18297 00a6 FB60     		str	r3, [r7, #12]
 266:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx SQR1 */
 267:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SQR1 = tmpreg1;
 18298              		.loc 1 267 0
 18299 00a8 7B68     		ldr	r3, [r7, #4]
 18300 00aa FA68     		ldr	r2, [r7, #12]
 18301 00ac DA62     		str	r2, [r3, #44]
 268:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18302              		.loc 1 268 0
 18303 00ae 07F11407 		add	r7, r7, #20
 18304 00b2 BD46     		mov	sp, r7
 18305 00b4 80BC     		pop	{r7}
 18306 00b6 7047     		bx	lr
 18307              	.L9:
 18308              		.align	2
 18309              	.L8:
 18310 00b8 FDF7F1FF 		.word	-919555
 18311              		.cfi_endproc
 18312              	.LFE30:
 18314              		.section	.text.ADC_StructInit,"ax",%progbits
 18315              		.align	2
 18316              		.global	ADC_StructInit
 18317              		.thumb
 18318              		.thumb_func
 18320              	ADC_StructInit:
 18321              	.LFB31:
 269:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 270:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 271:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 272:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
 273:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 274:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 275:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 276:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18322              		.loc 1 276 0
 18323              		.cfi_startproc
 18324              		@ args = 0, pretend = 0, frame = 8
 18325              		@ frame_needed = 1, uses_anonymous_args = 0
 18326              		@ link register save eliminated.
 18327 0000 80B4     		push	{r7}
 18328              	.LCFI6:
 18329              		.cfi_def_cfa_offset 4
 18330 0002 83B0     		sub	sp, sp, #12
 18331              	.LCFI7:
 18332              		.cfi_def_cfa_offset 16
 18333 0004 00AF     		add	r7, sp, #0
 18334              		.cfi_offset 7, -4
 18335              	.LCFI8:
 18336              		.cfi_def_cfa_register 7
 18337 0006 7860     		str	r0, [r7, #4]
 277:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Reset ADC init structure parameters values */
 278:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_Mode member */
 279:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 18338              		.loc 1 279 0
 18339 0008 7B68     		ldr	r3, [r7, #4]
 18340 000a 4FF00002 		mov	r2, #0
 18341 000e 1A60     		str	r2, [r3, #0]
 280:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* initialize the ADC_ScanConvMode member */
 281:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 18342              		.loc 1 281 0
 18343 0010 7B68     		ldr	r3, [r7, #4]
 18344 0012 4FF00002 		mov	r2, #0
 18345 0016 1A71     		strb	r2, [r3, #4]
 282:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 283:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 18346              		.loc 1 283 0
 18347 0018 7B68     		ldr	r3, [r7, #4]
 18348 001a 4FF00002 		mov	r2, #0
 18349 001e 5A71     		strb	r2, [r3, #5]
 284:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 285:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 18350              		.loc 1 285 0
 18351 0020 7B68     		ldr	r3, [r7, #4]
 18352 0022 4FF00002 		mov	r2, #0
 18353 0026 9A60     		str	r2, [r3, #8]
 286:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_DataAlign member */
 287:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 18354              		.loc 1 287 0
 18355 0028 7B68     		ldr	r3, [r7, #4]
 18356 002a 4FF00002 		mov	r2, #0
 18357 002e DA60     		str	r2, [r3, #12]
 288:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_NbrOfChannel member */
 289:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_NbrOfChannel = 1;
 18358              		.loc 1 289 0
 18359 0030 7B68     		ldr	r3, [r7, #4]
 18360 0032 4FF00102 		mov	r2, #1
 18361 0036 1A74     		strb	r2, [r3, #16]
 290:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18362              		.loc 1 290 0
 18363 0038 07F10C07 		add	r7, r7, #12
 18364 003c BD46     		mov	sp, r7
 18365 003e 80BC     		pop	{r7}
 18366 0040 7047     		bx	lr
 18367              		.cfi_endproc
 18368              	.LFE31:
 18370 0042 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 18371              		.align	2
 18372              		.global	ADC_Cmd
 18373              		.thumb
 18374              		.thumb_func
 18376              	ADC_Cmd:
 18377              	.LFB32:
 291:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 292:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 293:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 294:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 295:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the ADCx peripheral.
 296:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 297:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 298:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 299:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 300:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18378              		.loc 1 300 0
 18379              		.cfi_startproc
 18380              		@ args = 0, pretend = 0, frame = 8
 18381              		@ frame_needed = 1, uses_anonymous_args = 0
 18382              		@ link register save eliminated.
 18383 0000 80B4     		push	{r7}
 18384              	.LCFI9:
 18385              		.cfi_def_cfa_offset 4
 18386 0002 83B0     		sub	sp, sp, #12
 18387              	.LCFI10:
 18388              		.cfi_def_cfa_offset 16
 18389 0004 00AF     		add	r7, sp, #0
 18390              		.cfi_offset 7, -4
 18391              	.LCFI11:
 18392              		.cfi_def_cfa_register 7
 18393 0006 7860     		str	r0, [r7, #4]
 18394 0008 0B46     		mov	r3, r1
 18395 000a FB70     		strb	r3, [r7, #3]
 301:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 302:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 303:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 304:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18396              		.loc 1 304 0
 18397 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18398 000e 002B     		cmp	r3, #0
 18399 0010 06D0     		beq	.L12
 305:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 306:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 307:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_ADON_Set;
 18400              		.loc 1 307 0
 18401 0012 7B68     		ldr	r3, [r7, #4]
 18402 0014 9B68     		ldr	r3, [r3, #8]
 18403 0016 43F00102 		orr	r2, r3, #1
 18404 001a 7B68     		ldr	r3, [r7, #4]
 18405 001c 9A60     		str	r2, [r3, #8]
 18406 001e 05E0     		b	.L11
 18407              	.L12:
 308:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 309:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 310:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 311:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC peripheral */
 312:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_ADON_Reset;
 18408              		.loc 1 312 0
 18409 0020 7B68     		ldr	r3, [r7, #4]
 18410 0022 9B68     		ldr	r3, [r3, #8]
 18411 0024 23F00102 		bic	r2, r3, #1
 18412 0028 7B68     		ldr	r3, [r7, #4]
 18413 002a 9A60     		str	r2, [r3, #8]
 18414              	.L11:
 313:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 314:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18415              		.loc 1 314 0
 18416 002c 07F10C07 		add	r7, r7, #12
 18417 0030 BD46     		mov	sp, r7
 18418 0032 80BC     		pop	{r7}
 18419 0034 7047     		bx	lr
 18420              		.cfi_endproc
 18421              	.LFE32:
 18423 0036 00BF     		.section	.text.ADC_DMACmd,"ax",%progbits
 18424              		.align	2
 18425              		.global	ADC_DMACmd
 18426              		.thumb
 18427              		.thumb_func
 18429              	ADC_DMACmd:
 18430              	.LFB33:
 315:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 316:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 317:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
 318:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1 or 3 to select the ADC peripheral.
 319:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   Note: ADC2 hasn't a DMA capability.
 320:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
 321:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 322:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 323:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 324:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 325:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18431              		.loc 1 325 0
 18432              		.cfi_startproc
 18433              		@ args = 0, pretend = 0, frame = 8
 18434              		@ frame_needed = 1, uses_anonymous_args = 0
 18435              		@ link register save eliminated.
 18436 0000 80B4     		push	{r7}
 18437              	.LCFI12:
 18438              		.cfi_def_cfa_offset 4
 18439 0002 83B0     		sub	sp, sp, #12
 18440              	.LCFI13:
 18441              		.cfi_def_cfa_offset 16
 18442 0004 00AF     		add	r7, sp, #0
 18443              		.cfi_offset 7, -4
 18444              	.LCFI14:
 18445              		.cfi_def_cfa_register 7
 18446 0006 7860     		str	r0, [r7, #4]
 18447 0008 0B46     		mov	r3, r1
 18448 000a FB70     		strb	r3, [r7, #3]
 326:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 327:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DMA_PERIPH(ADCx));
 328:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 329:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18449              		.loc 1 329 0
 18450 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18451 000e 002B     		cmp	r3, #0
 18452 0010 06D0     		beq	.L15
 330:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 331:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC DMA request */
 332:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_DMA_Set;
 18453              		.loc 1 332 0
 18454 0012 7B68     		ldr	r3, [r7, #4]
 18455 0014 9B68     		ldr	r3, [r3, #8]
 18456 0016 43F48072 		orr	r2, r3, #256
 18457 001a 7B68     		ldr	r3, [r7, #4]
 18458 001c 9A60     		str	r2, [r3, #8]
 18459 001e 05E0     		b	.L14
 18460              	.L15:
 333:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 334:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 335:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 336:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC DMA request */
 337:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_DMA_Reset;
 18461              		.loc 1 337 0
 18462 0020 7B68     		ldr	r3, [r7, #4]
 18463 0022 9B68     		ldr	r3, [r3, #8]
 18464 0024 23F48072 		bic	r2, r3, #256
 18465 0028 7B68     		ldr	r3, [r7, #4]
 18466 002a 9A60     		str	r2, [r3, #8]
 18467              	.L14:
 338:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 339:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18468              		.loc 1 339 0
 18469 002c 07F10C07 		add	r7, r7, #12
 18470 0030 BD46     		mov	sp, r7
 18471 0032 80BC     		pop	{r7}
 18472 0034 7047     		bx	lr
 18473              		.cfi_endproc
 18474              	.LFE33:
 18476 0036 00BF     		.section	.text.ADC_ITConfig,"ax",%progbits
 18477              		.align	2
 18478              		.global	ADC_ITConfig
 18479              		.thumb
 18480              		.thumb_func
 18482              	ADC_ITConfig:
 18483              	.LFB34:
 340:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 341:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 342:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
 343:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 344:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
 345:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
 346:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
 347:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
 348:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
 349:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
 350:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 351:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 352:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 353:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
 354:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18484              		.loc 1 354 0
 18485              		.cfi_startproc
 18486              		@ args = 0, pretend = 0, frame = 16
 18487              		@ frame_needed = 1, uses_anonymous_args = 0
 18488              		@ link register save eliminated.
 18489 0000 80B4     		push	{r7}
 18490              	.LCFI15:
 18491              		.cfi_def_cfa_offset 4
 18492 0002 85B0     		sub	sp, sp, #20
 18493              	.LCFI16:
 18494              		.cfi_def_cfa_offset 24
 18495 0004 00AF     		add	r7, sp, #0
 18496              		.cfi_offset 7, -4
 18497              	.LCFI17:
 18498              		.cfi_def_cfa_register 7
 18499 0006 7860     		str	r0, [r7, #4]
 18500 0008 1346     		mov	r3, r2
 18501 000a 0A46     		mov	r2, r1	@ movhi
 18502 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 18503 000e 7B70     		strb	r3, [r7, #1]
 355:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 18504              		.loc 1 355 0
 18505 0010 4FF00003 		mov	r3, #0
 18506 0014 FB73     		strb	r3, [r7, #15]
 356:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 358:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
 360:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
 361:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = (uint8_t)ADC_IT;
 18507              		.loc 1 361 0
 18508 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 18509 0018 FB73     		strb	r3, [r7, #15]
 362:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18510              		.loc 1 362 0
 18511 001a 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 18512 001c 002B     		cmp	r3, #0
 18513 001e 06D0     		beq	.L18
 363:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 364:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC interrupts */
 365:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= itmask;
 18514              		.loc 1 365 0
 18515 0020 7B68     		ldr	r3, [r7, #4]
 18516 0022 5A68     		ldr	r2, [r3, #4]
 18517 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 18518 0026 1A43     		orrs	r2, r2, r3
 18519 0028 7B68     		ldr	r3, [r7, #4]
 18520 002a 5A60     		str	r2, [r3, #4]
 18521 002c 07E0     		b	.L17
 18522              	.L18:
 366:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 367:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 368:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 369:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC interrupts */
 370:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 18523              		.loc 1 370 0
 18524 002e 7B68     		ldr	r3, [r7, #4]
 18525 0030 5A68     		ldr	r2, [r3, #4]
 18526 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 18527 0034 6FEA0303 		mvn	r3, r3
 18528 0038 1A40     		ands	r2, r2, r3
 18529 003a 7B68     		ldr	r3, [r7, #4]
 18530 003c 5A60     		str	r2, [r3, #4]
 18531              	.L17:
 371:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 372:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18532              		.loc 1 372 0
 18533 003e 07F11407 		add	r7, r7, #20
 18534 0042 BD46     		mov	sp, r7
 18535 0044 80BC     		pop	{r7}
 18536 0046 7047     		bx	lr
 18537              		.cfi_endproc
 18538              	.LFE34:
 18540              		.section	.text.ADC_ResetCalibration,"ax",%progbits
 18541              		.align	2
 18542              		.global	ADC_ResetCalibration
 18543              		.thumb
 18544              		.thumb_func
 18546              	ADC_ResetCalibration:
 18547              	.LFB35:
 373:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 374:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 375:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Resets the selected ADC calibration registers.
 376:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 377:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 378:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 379:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ResetCalibration(ADC_TypeDef* ADCx)
 380:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18548              		.loc 1 380 0
 18549              		.cfi_startproc
 18550              		@ args = 0, pretend = 0, frame = 8
 18551              		@ frame_needed = 1, uses_anonymous_args = 0
 18552              		@ link register save eliminated.
 18553 0000 80B4     		push	{r7}
 18554              	.LCFI18:
 18555              		.cfi_def_cfa_offset 4
 18556 0002 83B0     		sub	sp, sp, #12
 18557              	.LCFI19:
 18558              		.cfi_def_cfa_offset 16
 18559 0004 00AF     		add	r7, sp, #0
 18560              		.cfi_offset 7, -4
 18561              	.LCFI20:
 18562              		.cfi_def_cfa_register 7
 18563 0006 7860     		str	r0, [r7, #4]
 381:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 382:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 383:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Resets the selected ADC calibration registers */  
 384:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_RSTCAL_Set;
 18564              		.loc 1 384 0
 18565 0008 7B68     		ldr	r3, [r7, #4]
 18566 000a 9B68     		ldr	r3, [r3, #8]
 18567 000c 43F00802 		orr	r2, r3, #8
 18568 0010 7B68     		ldr	r3, [r7, #4]
 18569 0012 9A60     		str	r2, [r3, #8]
 385:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18570              		.loc 1 385 0
 18571 0014 07F10C07 		add	r7, r7, #12
 18572 0018 BD46     		mov	sp, r7
 18573 001a 80BC     		pop	{r7}
 18574 001c 7047     		bx	lr
 18575              		.cfi_endproc
 18576              	.LFE35:
 18578 001e 00BF     		.section	.text.ADC_GetResetCalibrationStatus,"ax",%progbits
 18579              		.align	2
 18580              		.global	ADC_GetResetCalibrationStatus
 18581              		.thumb
 18582              		.thumb_func
 18584              	ADC_GetResetCalibrationStatus:
 18585              	.LFB36:
 386:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 387:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 388:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC reset calibration registers status.
 389:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 390:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC reset calibration registers (SET or RESET).
 391:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 392:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
 393:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18586              		.loc 1 393 0
 18587              		.cfi_startproc
 18588              		@ args = 0, pretend = 0, frame = 16
 18589              		@ frame_needed = 1, uses_anonymous_args = 0
 18590              		@ link register save eliminated.
 18591 0000 80B4     		push	{r7}
 18592              	.LCFI21:
 18593              		.cfi_def_cfa_offset 4
 18594 0002 85B0     		sub	sp, sp, #20
 18595              	.LCFI22:
 18596              		.cfi_def_cfa_offset 24
 18597 0004 00AF     		add	r7, sp, #0
 18598              		.cfi_offset 7, -4
 18599              	.LCFI23:
 18600              		.cfi_def_cfa_register 7
 18601 0006 7860     		str	r0, [r7, #4]
 394:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18602              		.loc 1 394 0
 18603 0008 4FF00003 		mov	r3, #0
 18604 000c FB73     		strb	r3, [r7, #15]
 395:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 396:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 397:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of RSTCAL bit */
 398:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 18605              		.loc 1 398 0
 18606 000e 7B68     		ldr	r3, [r7, #4]
 18607 0010 9B68     		ldr	r3, [r3, #8]
 18608 0012 03F00803 		and	r3, r3, #8
 18609 0016 002B     		cmp	r3, #0
 18610 0018 03D0     		beq	.L22
 399:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 400:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* RSTCAL bit is set */
 401:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18611              		.loc 1 401 0
 18612 001a 4FF00103 		mov	r3, #1
 18613 001e FB73     		strb	r3, [r7, #15]
 18614 0020 02E0     		b	.L23
 18615              	.L22:
 402:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 403:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 404:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 405:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* RSTCAL bit is reset */
 406:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18616              		.loc 1 406 0
 18617 0022 4FF00003 		mov	r3, #0
 18618 0026 FB73     		strb	r3, [r7, #15]
 18619              	.L23:
 407:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 408:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the RSTCAL bit status */
 409:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18620              		.loc 1 409 0
 18621 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 410:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18622              		.loc 1 410 0
 18623 002a 1846     		mov	r0, r3
 18624 002c 07F11407 		add	r7, r7, #20
 18625 0030 BD46     		mov	sp, r7
 18626 0032 80BC     		pop	{r7}
 18627 0034 7047     		bx	lr
 18628              		.cfi_endproc
 18629              	.LFE36:
 18631 0036 00BF     		.section	.text.ADC_StartCalibration,"ax",%progbits
 18632              		.align	2
 18633              		.global	ADC_StartCalibration
 18634              		.thumb
 18635              		.thumb_func
 18637              	ADC_StartCalibration:
 18638              	.LFB37:
 411:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 412:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 413:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Starts the selected ADC calibration process.
 414:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 415:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 416:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 417:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StartCalibration(ADC_TypeDef* ADCx)
 418:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18639              		.loc 1 418 0
 18640              		.cfi_startproc
 18641              		@ args = 0, pretend = 0, frame = 8
 18642              		@ frame_needed = 1, uses_anonymous_args = 0
 18643              		@ link register save eliminated.
 18644 0000 80B4     		push	{r7}
 18645              	.LCFI24:
 18646              		.cfi_def_cfa_offset 4
 18647 0002 83B0     		sub	sp, sp, #12
 18648              	.LCFI25:
 18649              		.cfi_def_cfa_offset 16
 18650 0004 00AF     		add	r7, sp, #0
 18651              		.cfi_offset 7, -4
 18652              	.LCFI26:
 18653              		.cfi_def_cfa_register 7
 18654 0006 7860     		str	r0, [r7, #4]
 419:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 420:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 421:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Enable the selected ADC calibration process */  
 422:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_CAL_Set;
 18655              		.loc 1 422 0
 18656 0008 7B68     		ldr	r3, [r7, #4]
 18657 000a 9B68     		ldr	r3, [r3, #8]
 18658 000c 43F00402 		orr	r2, r3, #4
 18659 0010 7B68     		ldr	r3, [r7, #4]
 18660 0012 9A60     		str	r2, [r3, #8]
 423:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18661              		.loc 1 423 0
 18662 0014 07F10C07 		add	r7, r7, #12
 18663 0018 BD46     		mov	sp, r7
 18664 001a 80BC     		pop	{r7}
 18665 001c 7047     		bx	lr
 18666              		.cfi_endproc
 18667              	.LFE37:
 18669 001e 00BF     		.section	.text.ADC_GetCalibrationStatus,"ax",%progbits
 18670              		.align	2
 18671              		.global	ADC_GetCalibrationStatus
 18672              		.thumb
 18673              		.thumb_func
 18675              	ADC_GetCalibrationStatus:
 18676              	.LFB38:
 424:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 425:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 426:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC calibration status.
 427:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 428:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC calibration (SET or RESET).
 429:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 430:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
 431:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18677              		.loc 1 431 0
 18678              		.cfi_startproc
 18679              		@ args = 0, pretend = 0, frame = 16
 18680              		@ frame_needed = 1, uses_anonymous_args = 0
 18681              		@ link register save eliminated.
 18682 0000 80B4     		push	{r7}
 18683              	.LCFI27:
 18684              		.cfi_def_cfa_offset 4
 18685 0002 85B0     		sub	sp, sp, #20
 18686              	.LCFI28:
 18687              		.cfi_def_cfa_offset 24
 18688 0004 00AF     		add	r7, sp, #0
 18689              		.cfi_offset 7, -4
 18690              	.LCFI29:
 18691              		.cfi_def_cfa_register 7
 18692 0006 7860     		str	r0, [r7, #4]
 432:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18693              		.loc 1 432 0
 18694 0008 4FF00003 		mov	r3, #0
 18695 000c FB73     		strb	r3, [r7, #15]
 433:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 434:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 435:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of CAL bit */
 436:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 18696              		.loc 1 436 0
 18697 000e 7B68     		ldr	r3, [r7, #4]
 18698 0010 9B68     		ldr	r3, [r3, #8]
 18699 0012 03F00403 		and	r3, r3, #4
 18700 0016 002B     		cmp	r3, #0
 18701 0018 03D0     		beq	.L26
 437:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 438:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* CAL bit is set: calibration on going */
 439:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18702              		.loc 1 439 0
 18703 001a 4FF00103 		mov	r3, #1
 18704 001e FB73     		strb	r3, [r7, #15]
 18705 0020 02E0     		b	.L27
 18706              	.L26:
 440:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 441:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 442:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 443:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* CAL bit is reset: end of calibration */
 444:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18707              		.loc 1 444 0
 18708 0022 4FF00003 		mov	r3, #0
 18709 0026 FB73     		strb	r3, [r7, #15]
 18710              	.L27:
 445:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 446:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the CAL bit status */
 447:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18711              		.loc 1 447 0
 18712 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 448:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18713              		.loc 1 448 0
 18714 002a 1846     		mov	r0, r3
 18715 002c 07F11407 		add	r7, r7, #20
 18716 0030 BD46     		mov	sp, r7
 18717 0032 80BC     		pop	{r7}
 18718 0034 7047     		bx	lr
 18719              		.cfi_endproc
 18720              	.LFE38:
 18722 0036 00BF     		.section	.text.ADC_SoftwareStartConvCmd,"ax",%progbits
 18723              		.align	2
 18724              		.global	ADC_SoftwareStartConvCmd
 18725              		.thumb
 18726              		.thumb_func
 18728              	ADC_SoftwareStartConvCmd:
 18729              	.LFB39:
 449:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 450:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 451:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC software start conversion .
 452:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 453:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start conversion.
 454:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 455:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 456:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 457:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 458:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18730              		.loc 1 458 0
 18731              		.cfi_startproc
 18732              		@ args = 0, pretend = 0, frame = 8
 18733              		@ frame_needed = 1, uses_anonymous_args = 0
 18734              		@ link register save eliminated.
 18735 0000 80B4     		push	{r7}
 18736              	.LCFI30:
 18737              		.cfi_def_cfa_offset 4
 18738 0002 83B0     		sub	sp, sp, #12
 18739              	.LCFI31:
 18740              		.cfi_def_cfa_offset 16
 18741 0004 00AF     		add	r7, sp, #0
 18742              		.cfi_offset 7, -4
 18743              	.LCFI32:
 18744              		.cfi_def_cfa_register 7
 18745 0006 7860     		str	r0, [r7, #4]
 18746 0008 0B46     		mov	r3, r1
 18747 000a FB70     		strb	r3, [r7, #3]
 459:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 460:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 462:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18748              		.loc 1 462 0
 18749 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18750 000e 002B     		cmp	r3, #0
 18751 0010 06D0     		beq	.L29
 463:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 464:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event and start the selected
 465:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC conversion */
 466:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 18752              		.loc 1 466 0
 18753 0012 7B68     		ldr	r3, [r7, #4]
 18754 0014 9B68     		ldr	r3, [r3, #8]
 18755 0016 43F4A002 		orr	r2, r3, #5242880
 18756 001a 7B68     		ldr	r3, [r7, #4]
 18757 001c 9A60     		str	r2, [r3, #8]
 18758 001e 05E0     		b	.L28
 18759              	.L29:
 467:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 468:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 469:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 470:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event and stop the selected
 471:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC conversion */
 472:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 18760              		.loc 1 472 0
 18761 0020 7B68     		ldr	r3, [r7, #4]
 18762 0022 9B68     		ldr	r3, [r3, #8]
 18763 0024 23F4A002 		bic	r2, r3, #5242880
 18764 0028 7B68     		ldr	r3, [r7, #4]
 18765 002a 9A60     		str	r2, [r3, #8]
 18766              	.L28:
 473:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 474:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18767              		.loc 1 474 0
 18768 002c 07F10C07 		add	r7, r7, #12
 18769 0030 BD46     		mov	sp, r7
 18770 0032 80BC     		pop	{r7}
 18771 0034 7047     		bx	lr
 18772              		.cfi_endproc
 18773              	.LFE39:
 18775 0036 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 18776              		.align	2
 18777              		.global	ADC_GetSoftwareStartConvStatus
 18778              		.thumb
 18779              		.thumb_func
 18781              	ADC_GetSoftwareStartConvStatus:
 18782              	.LFB40:
 475:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 476:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 477:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start conversion Status.
 478:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 480:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 481:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 482:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18783              		.loc 1 482 0
 18784              		.cfi_startproc
 18785              		@ args = 0, pretend = 0, frame = 16
 18786              		@ frame_needed = 1, uses_anonymous_args = 0
 18787              		@ link register save eliminated.
 18788 0000 80B4     		push	{r7}
 18789              	.LCFI33:
 18790              		.cfi_def_cfa_offset 4
 18791 0002 85B0     		sub	sp, sp, #20
 18792              	.LCFI34:
 18793              		.cfi_def_cfa_offset 24
 18794 0004 00AF     		add	r7, sp, #0
 18795              		.cfi_offset 7, -4
 18796              	.LCFI35:
 18797              		.cfi_def_cfa_register 7
 18798 0006 7860     		str	r0, [r7, #4]
 483:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18799              		.loc 1 483 0
 18800 0008 4FF00003 		mov	r3, #0
 18801 000c FB73     		strb	r3, [r7, #15]
 484:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 485:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 486:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of SWSTART bit */
 487:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 18802              		.loc 1 487 0
 18803 000e 7B68     		ldr	r3, [r7, #4]
 18804 0010 9B68     		ldr	r3, [r3, #8]
 18805 0012 03F48003 		and	r3, r3, #4194304
 18806 0016 002B     		cmp	r3, #0
 18807 0018 03D0     		beq	.L32
 488:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 489:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* SWSTART bit is set */
 490:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18808              		.loc 1 490 0
 18809 001a 4FF00103 		mov	r3, #1
 18810 001e FB73     		strb	r3, [r7, #15]
 18811 0020 02E0     		b	.L33
 18812              	.L32:
 491:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 492:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 493:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 494:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* SWSTART bit is reset */
 495:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18813              		.loc 1 495 0
 18814 0022 4FF00003 		mov	r3, #0
 18815 0026 FB73     		strb	r3, [r7, #15]
 18816              	.L33:
 496:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 497:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the SWSTART bit status */
 498:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18817              		.loc 1 498 0
 18818 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 499:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18819              		.loc 1 499 0
 18820 002a 1846     		mov	r0, r3
 18821 002c 07F11407 		add	r7, r7, #20
 18822 0030 BD46     		mov	sp, r7
 18823 0032 80BC     		pop	{r7}
 18824 0034 7047     		bx	lr
 18825              		.cfi_endproc
 18826              	.LFE40:
 18828 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 18829              		.align	2
 18830              		.global	ADC_DiscModeChannelCountConfig
 18831              		.thumb
 18832              		.thumb_func
 18834              	ADC_DiscModeChannelCountConfig:
 18835              	.LFB41:
 500:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 501:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 502:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular
 503:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         group channel.
 504:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 505:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel
 506:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         count value. This number must be between 1 and 8.
 507:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 508:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 509:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 510:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18836              		.loc 1 510 0
 18837              		.cfi_startproc
 18838              		@ args = 0, pretend = 0, frame = 16
 18839              		@ frame_needed = 1, uses_anonymous_args = 0
 18840              		@ link register save eliminated.
 18841 0000 80B4     		push	{r7}
 18842              	.LCFI36:
 18843              		.cfi_def_cfa_offset 4
 18844 0002 85B0     		sub	sp, sp, #20
 18845              	.LCFI37:
 18846              		.cfi_def_cfa_offset 24
 18847 0004 00AF     		add	r7, sp, #0
 18848              		.cfi_offset 7, -4
 18849              	.LCFI38:
 18850              		.cfi_def_cfa_register 7
 18851 0006 7860     		str	r0, [r7, #4]
 18852 0008 0B46     		mov	r3, r1
 18853 000a FB70     		strb	r3, [r7, #3]
 511:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 18854              		.loc 1 511 0
 18855 000c 4FF00003 		mov	r3, #0
 18856 0010 FB60     		str	r3, [r7, #12]
 512:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 18857              		.loc 1 512 0
 18858 0012 4FF00003 		mov	r3, #0
 18859 0016 BB60     		str	r3, [r7, #8]
 513:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 514:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 515:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 516:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 517:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 18860              		.loc 1 517 0
 18861 0018 7B68     		ldr	r3, [r7, #4]
 18862 001a 5B68     		ldr	r3, [r3, #4]
 18863 001c FB60     		str	r3, [r7, #12]
 518:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old discontinuous mode channel count */
 519:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_DISCNUM_Reset;
 18864              		.loc 1 519 0
 18865 001e FB68     		ldr	r3, [r7, #12]
 18866 0020 23F46043 		bic	r3, r3, #57344
 18867 0024 FB60     		str	r3, [r7, #12]
 520:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the discontinuous mode channel count */
 521:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = Number - 1;
 18868              		.loc 1 521 0
 18869 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18870 0028 03F1FF33 		add	r3, r3, #-1
 18871 002c BB60     		str	r3, [r7, #8]
 522:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 18872              		.loc 1 522 0
 18873 002e BB68     		ldr	r3, [r7, #8]
 18874 0030 4FEA4333 		lsl	r3, r3, #13
 18875 0034 FA68     		ldr	r2, [r7, #12]
 18876 0036 42EA0303 		orr	r3, r2, r3
 18877 003a FB60     		str	r3, [r7, #12]
 523:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 524:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 18878              		.loc 1 524 0
 18879 003c 7B68     		ldr	r3, [r7, #4]
 18880 003e FA68     		ldr	r2, [r7, #12]
 18881 0040 5A60     		str	r2, [r3, #4]
 525:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18882              		.loc 1 525 0
 18883 0042 07F11407 		add	r7, r7, #20
 18884 0046 BD46     		mov	sp, r7
 18885 0048 80BC     		pop	{r7}
 18886 004a 7047     		bx	lr
 18887              		.cfi_endproc
 18888              	.LFE41:
 18890              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 18891              		.align	2
 18892              		.global	ADC_DiscModeCmd
 18893              		.thumb
 18894              		.thumb_func
 18896              	ADC_DiscModeCmd:
 18897              	.LFB42:
 526:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 528:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group
 529:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 530:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 531:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 532:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         on regular group channel.
 533:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         This parameter can be: ENABLE or DISABLE.
 534:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 535:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 536:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 537:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18898              		.loc 1 537 0
 18899              		.cfi_startproc
 18900              		@ args = 0, pretend = 0, frame = 8
 18901              		@ frame_needed = 1, uses_anonymous_args = 0
 18902              		@ link register save eliminated.
 18903 0000 80B4     		push	{r7}
 18904              	.LCFI39:
 18905              		.cfi_def_cfa_offset 4
 18906 0002 83B0     		sub	sp, sp, #12
 18907              	.LCFI40:
 18908              		.cfi_def_cfa_offset 16
 18909 0004 00AF     		add	r7, sp, #0
 18910              		.cfi_offset 7, -4
 18911              	.LCFI41:
 18912              		.cfi_def_cfa_register 7
 18913 0006 7860     		str	r0, [r7, #4]
 18914 0008 0B46     		mov	r3, r1
 18915 000a FB70     		strb	r3, [r7, #3]
 538:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 539:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 540:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 541:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18916              		.loc 1 541 0
 18917 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18918 000e 002B     		cmp	r3, #0
 18919 0010 06D0     		beq	.L36
 542:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 543:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 544:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_DISCEN_Set;
 18920              		.loc 1 544 0
 18921 0012 7B68     		ldr	r3, [r7, #4]
 18922 0014 5B68     		ldr	r3, [r3, #4]
 18923 0016 43F40062 		orr	r2, r3, #2048
 18924 001a 7B68     		ldr	r3, [r7, #4]
 18925 001c 5A60     		str	r2, [r3, #4]
 18926 001e 05E0     		b	.L35
 18927              	.L36:
 545:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 546:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 547:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 548:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 549:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_DISCEN_Reset;
 18928              		.loc 1 549 0
 18929 0020 7B68     		ldr	r3, [r7, #4]
 18930 0022 5B68     		ldr	r3, [r3, #4]
 18931 0024 23F40062 		bic	r2, r3, #2048
 18932 0028 7B68     		ldr	r3, [r7, #4]
 18933 002a 5A60     		str	r2, [r3, #4]
 18934              	.L35:
 550:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 551:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18935              		.loc 1 551 0
 18936 002c 07F10C07 		add	r7, r7, #12
 18937 0030 BD46     		mov	sp, r7
 18938 0032 80BC     		pop	{r7}
 18939 0034 7047     		bx	lr
 18940              		.cfi_endproc
 18941              	.LFE42:
 18943 0036 00BF     		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 18944              		.align	2
 18945              		.global	ADC_RegularChannelConfig
 18946              		.thumb
 18947              		.thumb_func
 18949              	ADC_RegularChannelConfig:
 18950              	.LFB43:
 552:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 553:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 554:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 555:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 556:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 557:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 558:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 560:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 561:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 562:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 563:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 564:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 565:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 566:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 567:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 568:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 569:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 570:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 571:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 572:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 573:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 574:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 575:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 576:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 577:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the regular group sequencer. This parameter must be between 1 to 16.
 578:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 579:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 580:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 581:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 582:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 583:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 584:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 585:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 586:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 587:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 588:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 589:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 590:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 591:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18951              		.loc 1 591 0
 18952              		.cfi_startproc
 18953              		@ args = 0, pretend = 0, frame = 16
 18954              		@ frame_needed = 1, uses_anonymous_args = 0
 18955              		@ link register save eliminated.
 18956 0000 80B4     		push	{r7}
 18957              	.LCFI42:
 18958              		.cfi_def_cfa_offset 4
 18959 0002 85B0     		sub	sp, sp, #20
 18960              	.LCFI43:
 18961              		.cfi_def_cfa_offset 24
 18962 0004 00AF     		add	r7, sp, #0
 18963              		.cfi_offset 7, -4
 18964              	.LCFI44:
 18965              		.cfi_def_cfa_register 7
 18966 0006 7860     		str	r0, [r7, #4]
 18967 0008 F970     		strb	r1, [r7, #3]
 18968 000a BA70     		strb	r2, [r7, #2]
 18969 000c 7B70     		strb	r3, [r7, #1]
 592:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 18970              		.loc 1 592 0
 18971 000e 4FF00003 		mov	r3, #0
 18972 0012 FB60     		str	r3, [r7, #12]
 18973 0014 4FF00003 		mov	r3, #0
 18974 0018 BB60     		str	r3, [r7, #8]
 593:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 594:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 595:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 596:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 597:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 598:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 599:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 18975              		.loc 1 599 0
 18976 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18977 001c 092B     		cmp	r3, #9
 18978 001e 29D9     		bls	.L39
 600:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 601:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 602:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 18979              		.loc 1 602 0
 18980 0020 7B68     		ldr	r3, [r7, #4]
 18981 0022 DB68     		ldr	r3, [r3, #12]
 18982 0024 FB60     		str	r3, [r7, #12]
 603:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 604:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 18983              		.loc 1 604 0
 18984 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18985 0028 1346     		mov	r3, r2
 18986 002a 4FEA4303 		lsl	r3, r3, #1
 18987 002e 9B18     		adds	r3, r3, r2
 18988 0030 A3F11E03 		sub	r3, r3, #30
 18989 0034 4FF00702 		mov	r2, #7
 18990 0038 02FA03F3 		lsl	r3, r2, r3
 18991 003c BB60     		str	r3, [r7, #8]
 605:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 606:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18992              		.loc 1 606 0
 18993 003e BB68     		ldr	r3, [r7, #8]
 18994 0040 6FEA0303 		mvn	r3, r3
 18995 0044 FA68     		ldr	r2, [r7, #12]
 18996 0046 02EA0303 		and	r3, r2, r3
 18997 004a FB60     		str	r3, [r7, #12]
 607:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 608:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 18998              		.loc 1 608 0
 18999 004c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 19000 004e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19001 0050 1346     		mov	r3, r2
 19002 0052 4FEA4303 		lsl	r3, r3, #1
 19003 0056 9B18     		adds	r3, r3, r2
 19004 0058 A3F11E03 		sub	r3, r3, #30
 19005 005c 01FA03F3 		lsl	r3, r1, r3
 19006 0060 BB60     		str	r3, [r7, #8]
 609:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 610:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19007              		.loc 1 610 0
 19008 0062 FA68     		ldr	r2, [r7, #12]
 19009 0064 BB68     		ldr	r3, [r7, #8]
 19010 0066 42EA0303 		orr	r3, r2, r3
 19011 006a FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 612:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 19012              		.loc 1 612 0
 19013 006c 7B68     		ldr	r3, [r7, #4]
 19014 006e FA68     		ldr	r2, [r7, #12]
 19015 0070 DA60     		str	r2, [r3, #12]
 19016 0072 24E0     		b	.L40
 19017              	.L39:
 613:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 614:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 615:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 616:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 617:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 19018              		.loc 1 617 0
 19019 0074 7B68     		ldr	r3, [r7, #4]
 19020 0076 1B69     		ldr	r3, [r3, #16]
 19021 0078 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 619:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 19022              		.loc 1 619 0
 19023 007a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19024 007c 1346     		mov	r3, r2
 19025 007e 4FEA4303 		lsl	r3, r3, #1
 19026 0082 9B18     		adds	r3, r3, r2
 19027 0084 4FF00702 		mov	r2, #7
 19028 0088 02FA03F3 		lsl	r3, r2, r3
 19029 008c BB60     		str	r3, [r7, #8]
 620:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 621:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19030              		.loc 1 621 0
 19031 008e BB68     		ldr	r3, [r7, #8]
 19032 0090 6FEA0303 		mvn	r3, r3
 19033 0094 FA68     		ldr	r2, [r7, #12]
 19034 0096 02EA0303 		and	r3, r2, r3
 19035 009a FB60     		str	r3, [r7, #12]
 622:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 623:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 19036              		.loc 1 623 0
 19037 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 19038 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19039 00a0 1346     		mov	r3, r2
 19040 00a2 4FEA4303 		lsl	r3, r3, #1
 19041 00a6 9B18     		adds	r3, r3, r2
 19042 00a8 01FA03F3 		lsl	r3, r1, r3
 19043 00ac BB60     		str	r3, [r7, #8]
 624:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 625:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19044              		.loc 1 625 0
 19045 00ae FA68     		ldr	r2, [r7, #12]
 19046 00b0 BB68     		ldr	r3, [r7, #8]
 19047 00b2 42EA0303 		orr	r3, r2, r3
 19048 00b6 FB60     		str	r3, [r7, #12]
 626:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 627:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 19049              		.loc 1 627 0
 19050 00b8 7B68     		ldr	r3, [r7, #4]
 19051 00ba FA68     		ldr	r2, [r7, #12]
 19052 00bc 1A61     		str	r2, [r3, #16]
 19053              	.L40:
 628:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 629:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 1 to 6 */
 630:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (Rank < 7)
 19054              		.loc 1 630 0
 19055 00be BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 19056 00c0 062B     		cmp	r3, #6
 19057 00c2 29D8     		bhi	.L41
 631:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 632:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 633:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR3;
 19058              		.loc 1 633 0
 19059 00c4 7B68     		ldr	r3, [r7, #4]
 19060 00c6 5B6B     		ldr	r3, [r3, #52]
 19061 00c8 FB60     		str	r3, [r7, #12]
 634:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 635:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 19062              		.loc 1 635 0
 19063 00ca BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 19064 00cc 03F1FF32 		add	r2, r3, #-1
 19065 00d0 1346     		mov	r3, r2
 19066 00d2 4FEA8303 		lsl	r3, r3, #2
 19067 00d6 9B18     		adds	r3, r3, r2
 19068 00d8 4FF01F02 		mov	r2, #31
 19069 00dc 02FA03F3 		lsl	r3, r2, r3
 19070 00e0 BB60     		str	r3, [r7, #8]
 636:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 637:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19071              		.loc 1 637 0
 19072 00e2 BB68     		ldr	r3, [r7, #8]
 19073 00e4 6FEA0303 		mvn	r3, r3
 19074 00e8 FA68     		ldr	r2, [r7, #12]
 19075 00ea 02EA0303 		and	r3, r2, r3
 19076 00ee FB60     		str	r3, [r7, #12]
 638:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 639:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 19077              		.loc 1 639 0
 19078 00f0 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19079 00f2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 19080 00f4 03F1FF32 		add	r2, r3, #-1
 19081 00f8 1346     		mov	r3, r2
 19082 00fa 4FEA8303 		lsl	r3, r3, #2
 19083 00fe 9B18     		adds	r3, r3, r2
 19084 0100 01FA03F3 		lsl	r3, r1, r3
 19085 0104 BB60     		str	r3, [r7, #8]
 640:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 641:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19086              		.loc 1 641 0
 19087 0106 FA68     		ldr	r2, [r7, #12]
 19088 0108 BB68     		ldr	r3, [r7, #8]
 19089 010a 42EA0303 		orr	r3, r2, r3
 19090 010e FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 643:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR3 = tmpreg1;
 19091              		.loc 1 643 0
 19092 0110 7B68     		ldr	r3, [r7, #4]
 19093 0112 FA68     		ldr	r2, [r7, #12]
 19094 0114 5A63     		str	r2, [r3, #52]
 19095 0116 55E0     		b	.L38
 19096              	.L41:
 644:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 645:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 7 to 12 */
 646:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else if (Rank < 13)
 19097              		.loc 1 646 0
 19098 0118 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 19099 011a 0C2B     		cmp	r3, #12
 19100 011c 29D8     		bhi	.L43
 647:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 648:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 649:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR2;
 19101              		.loc 1 649 0
 19102 011e 7B68     		ldr	r3, [r7, #4]
 19103 0120 1B6B     		ldr	r3, [r3, #48]
 19104 0122 FB60     		str	r3, [r7, #12]
 650:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 651:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 19105              		.loc 1 651 0
 19106 0124 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19107 0126 1346     		mov	r3, r2
 19108 0128 4FEA8303 		lsl	r3, r3, #2
 19109 012c 9B18     		adds	r3, r3, r2
 19110 012e A3F12303 		sub	r3, r3, #35
 19111 0132 4FF01F02 		mov	r2, #31
 19112 0136 02FA03F3 		lsl	r3, r2, r3
 19113 013a BB60     		str	r3, [r7, #8]
 652:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 653:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19114              		.loc 1 653 0
 19115 013c BB68     		ldr	r3, [r7, #8]
 19116 013e 6FEA0303 		mvn	r3, r3
 19117 0142 FA68     		ldr	r2, [r7, #12]
 19118 0144 02EA0303 		and	r3, r2, r3
 19119 0148 FB60     		str	r3, [r7, #12]
 654:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 655:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 19120              		.loc 1 655 0
 19121 014a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19122 014c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19123 014e 1346     		mov	r3, r2
 19124 0150 4FEA8303 		lsl	r3, r3, #2
 19125 0154 9B18     		adds	r3, r3, r2
 19126 0156 A3F12303 		sub	r3, r3, #35
 19127 015a 01FA03F3 		lsl	r3, r1, r3
 19128 015e BB60     		str	r3, [r7, #8]
 656:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 657:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19129              		.loc 1 657 0
 19130 0160 FA68     		ldr	r2, [r7, #12]
 19131 0162 BB68     		ldr	r3, [r7, #8]
 19132 0164 42EA0303 		orr	r3, r2, r3
 19133 0168 FB60     		str	r3, [r7, #12]
 658:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 659:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR2 = tmpreg1;
 19134              		.loc 1 659 0
 19135 016a 7B68     		ldr	r3, [r7, #4]
 19136 016c FA68     		ldr	r2, [r7, #12]
 19137 016e 1A63     		str	r2, [r3, #48]
 19138 0170 28E0     		b	.L38
 19139              	.L43:
 660:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 661:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 13 to 16 */
 662:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 663:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 664:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 665:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR1;
 19140              		.loc 1 665 0
 19141 0172 7B68     		ldr	r3, [r7, #4]
 19142 0174 DB6A     		ldr	r3, [r3, #44]
 19143 0176 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 667:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 19144              		.loc 1 667 0
 19145 0178 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19146 017a 1346     		mov	r3, r2
 19147 017c 4FEA8303 		lsl	r3, r3, #2
 19148 0180 9B18     		adds	r3, r3, r2
 19149 0182 A3F14103 		sub	r3, r3, #65
 19150 0186 4FF01F02 		mov	r2, #31
 19151 018a 02FA03F3 		lsl	r3, r2, r3
 19152 018e BB60     		str	r3, [r7, #8]
 668:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 669:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19153              		.loc 1 669 0
 19154 0190 BB68     		ldr	r3, [r7, #8]
 19155 0192 6FEA0303 		mvn	r3, r3
 19156 0196 FA68     		ldr	r2, [r7, #12]
 19157 0198 02EA0303 		and	r3, r2, r3
 19158 019c FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 671:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 19159              		.loc 1 671 0
 19160 019e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19161 01a0 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19162 01a2 1346     		mov	r3, r2
 19163 01a4 4FEA8303 		lsl	r3, r3, #2
 19164 01a8 9B18     		adds	r3, r3, r2
 19165 01aa A3F14103 		sub	r3, r3, #65
 19166 01ae 01FA03F3 		lsl	r3, r1, r3
 19167 01b2 BB60     		str	r3, [r7, #8]
 672:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 673:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19168              		.loc 1 673 0
 19169 01b4 FA68     		ldr	r2, [r7, #12]
 19170 01b6 BB68     		ldr	r3, [r7, #8]
 19171 01b8 42EA0303 		orr	r3, r2, r3
 19172 01bc FB60     		str	r3, [r7, #12]
 674:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 675:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR1 = tmpreg1;
 19173              		.loc 1 675 0
 19174 01be 7B68     		ldr	r3, [r7, #4]
 19175 01c0 FA68     		ldr	r2, [r7, #12]
 19176 01c2 DA62     		str	r2, [r3, #44]
 19177              	.L38:
 676:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 677:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19178              		.loc 1 677 0
 19179 01c4 07F11407 		add	r7, r7, #20
 19180 01c8 BD46     		mov	sp, r7
 19181 01ca 80BC     		pop	{r7}
 19182 01cc 7047     		bx	lr
 19183              		.cfi_endproc
 19184              	.LFE43:
 19186 01ce 00BF     		.section	.text.ADC_ExternalTrigConvCmd,"ax",%progbits
 19187              		.align	2
 19188              		.global	ADC_ExternalTrigConvCmd
 19189              		.thumb
 19190              		.thumb_func
 19192              	ADC_ExternalTrigConvCmd:
 19193              	.LFB44:
 678:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 679:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 680:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx conversion through external trigger.
 681:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 682:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of conversion.
 683:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 684:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 685:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 686:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 687:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19194              		.loc 1 687 0
 19195              		.cfi_startproc
 19196              		@ args = 0, pretend = 0, frame = 8
 19197              		@ frame_needed = 1, uses_anonymous_args = 0
 19198              		@ link register save eliminated.
 19199 0000 80B4     		push	{r7}
 19200              	.LCFI45:
 19201              		.cfi_def_cfa_offset 4
 19202 0002 83B0     		sub	sp, sp, #12
 19203              	.LCFI46:
 19204              		.cfi_def_cfa_offset 16
 19205 0004 00AF     		add	r7, sp, #0
 19206              		.cfi_offset 7, -4
 19207              	.LCFI47:
 19208              		.cfi_def_cfa_register 7
 19209 0006 7860     		str	r0, [r7, #4]
 19210 0008 0B46     		mov	r3, r1
 19211 000a FB70     		strb	r3, [r7, #3]
 688:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 689:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 690:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 691:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19212              		.loc 1 691 0
 19213 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19214 000e 002B     		cmp	r3, #0
 19215 0010 06D0     		beq	.L45
 692:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 693:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event */
 694:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_Set;
 19216              		.loc 1 694 0
 19217 0012 7B68     		ldr	r3, [r7, #4]
 19218 0014 9B68     		ldr	r3, [r3, #8]
 19219 0016 43F48012 		orr	r2, r3, #1048576
 19220 001a 7B68     		ldr	r3, [r7, #4]
 19221 001c 9A60     		str	r2, [r3, #8]
 19222 001e 05E0     		b	.L44
 19223              	.L45:
 695:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 696:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 697:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 698:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event */
 699:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_Reset;
 19224              		.loc 1 699 0
 19225 0020 7B68     		ldr	r3, [r7, #4]
 19226 0022 9B68     		ldr	r3, [r3, #8]
 19227 0024 23F48012 		bic	r2, r3, #1048576
 19228 0028 7B68     		ldr	r3, [r7, #4]
 19229 002a 9A60     		str	r2, [r3, #8]
 19230              	.L44:
 700:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 701:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19231              		.loc 1 701 0
 19232 002c 07F10C07 		add	r7, r7, #12
 19233 0030 BD46     		mov	sp, r7
 19234 0032 80BC     		pop	{r7}
 19235 0034 7047     		bx	lr
 19236              		.cfi_endproc
 19237              	.LFE44:
 19239 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 19240              		.align	2
 19241              		.global	ADC_GetConversionValue
 19242              		.thumb
 19243              		.thumb_func
 19245              	ADC_GetConversionValue:
 19246              	.LFB45:
 702:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 703:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 704:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 705:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 706:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 707:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 708:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 709:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19247              		.loc 1 709 0
 19248              		.cfi_startproc
 19249              		@ args = 0, pretend = 0, frame = 8
 19250              		@ frame_needed = 1, uses_anonymous_args = 0
 19251              		@ link register save eliminated.
 19252 0000 80B4     		push	{r7}
 19253              	.LCFI48:
 19254              		.cfi_def_cfa_offset 4
 19255 0002 83B0     		sub	sp, sp, #12
 19256              	.LCFI49:
 19257              		.cfi_def_cfa_offset 16
 19258 0004 00AF     		add	r7, sp, #0
 19259              		.cfi_offset 7, -4
 19260              	.LCFI50:
 19261              		.cfi_def_cfa_register 7
 19262 0006 7860     		str	r0, [r7, #4]
 710:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 711:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 712:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the selected ADC conversion value */
 713:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (uint16_t) ADCx->DR;
 19263              		.loc 1 713 0
 19264 0008 7B68     		ldr	r3, [r7, #4]
 19265 000a DB6C     		ldr	r3, [r3, #76]
 19266 000c 9BB2     		uxth	r3, r3
 714:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19267              		.loc 1 714 0
 19268 000e 1846     		mov	r0, r3
 19269 0010 07F10C07 		add	r7, r7, #12
 19270 0014 BD46     		mov	sp, r7
 19271 0016 80BC     		pop	{r7}
 19272 0018 7047     		bx	lr
 19273              		.cfi_endproc
 19274              	.LFE45:
 19276 001a 00BF     		.section	.text.ADC_GetDualModeConversionValue,"ax",%progbits
 19277              		.align	2
 19278              		.global	ADC_GetDualModeConversionValue
 19279              		.thumb
 19280              		.thumb_func
 19282              	ADC_GetDualModeConversionValue:
 19283              	.LFB46:
 715:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 716:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 717:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
 718:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 719:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 720:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint32_t ADC_GetDualModeConversionValue(void)
 721:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19284              		.loc 1 721 0
 19285              		.cfi_startproc
 19286              		@ args = 0, pretend = 0, frame = 0
 19287              		@ frame_needed = 1, uses_anonymous_args = 0
 19288              		@ link register save eliminated.
 19289 0000 80B4     		push	{r7}
 19290              	.LCFI51:
 19291              		.cfi_def_cfa_offset 4
 19292 0002 00AF     		add	r7, sp, #0
 19293              		.cfi_offset 7, -4
 19294              	.LCFI52:
 19295              		.cfi_def_cfa_register 7
 722:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the dual mode conversion value */
 723:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (*(__IO uint32_t *) DR_ADDRESS);
 19296              		.loc 1 723 0
 19297 0004 024B     		ldr	r3, .L49
 19298 0006 1B68     		ldr	r3, [r3, #0]
 724:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19299              		.loc 1 724 0
 19300 0008 1846     		mov	r0, r3
 19301 000a BD46     		mov	sp, r7
 19302 000c 80BC     		pop	{r7}
 19303 000e 7047     		bx	lr
 19304              	.L50:
 19305              		.align	2
 19306              	.L49:
 19307 0010 4C240140 		.word	1073816652
 19308              		.cfi_endproc
 19309              	.LFE46:
 19311              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 19312              		.align	2
 19313              		.global	ADC_AutoInjectedConvCmd
 19314              		.thumb
 19315              		.thumb_func
 19317              	ADC_AutoInjectedConvCmd:
 19318              	.LFB47:
 725:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 726:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 727:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group
 728:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         conversion after regular one.
 729:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 730:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
 731:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 732:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 733:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 734:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 735:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19319              		.loc 1 735 0
 19320              		.cfi_startproc
 19321              		@ args = 0, pretend = 0, frame = 8
 19322              		@ frame_needed = 1, uses_anonymous_args = 0
 19323              		@ link register save eliminated.
 19324 0000 80B4     		push	{r7}
 19325              	.LCFI53:
 19326              		.cfi_def_cfa_offset 4
 19327 0002 83B0     		sub	sp, sp, #12
 19328              	.LCFI54:
 19329              		.cfi_def_cfa_offset 16
 19330 0004 00AF     		add	r7, sp, #0
 19331              		.cfi_offset 7, -4
 19332              	.LCFI55:
 19333              		.cfi_def_cfa_register 7
 19334 0006 7860     		str	r0, [r7, #4]
 19335 0008 0B46     		mov	r3, r1
 19336 000a FB70     		strb	r3, [r7, #3]
 736:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 737:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 738:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 739:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19337              		.loc 1 739 0
 19338 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19339 000e 002B     		cmp	r3, #0
 19340 0010 06D0     		beq	.L52
 740:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 741:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
 742:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JAUTO_Set;
 19341              		.loc 1 742 0
 19342 0012 7B68     		ldr	r3, [r7, #4]
 19343 0014 5B68     		ldr	r3, [r3, #4]
 19344 0016 43F48062 		orr	r2, r3, #1024
 19345 001a 7B68     		ldr	r3, [r7, #4]
 19346 001c 5A60     		str	r2, [r3, #4]
 19347 001e 05E0     		b	.L51
 19348              	.L52:
 743:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 744:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 745:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 746:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
 747:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JAUTO_Reset;
 19349              		.loc 1 747 0
 19350 0020 7B68     		ldr	r3, [r7, #4]
 19351 0022 5B68     		ldr	r3, [r3, #4]
 19352 0024 23F48062 		bic	r2, r3, #1024
 19353 0028 7B68     		ldr	r3, [r7, #4]
 19354 002a 5A60     		str	r2, [r3, #4]
 19355              	.L51:
 748:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 749:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19356              		.loc 1 749 0
 19357 002c 07F10C07 		add	r7, r7, #12
 19358 0030 BD46     		mov	sp, r7
 19359 0032 80BC     		pop	{r7}
 19360 0034 7047     		bx	lr
 19361              		.cfi_endproc
 19362              	.LFE47:
 19364 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 19365              		.align	2
 19366              		.global	ADC_InjectedDiscModeCmd
 19367              		.thumb
 19368              		.thumb_func
 19370              	ADC_InjectedDiscModeCmd:
 19371              	.LFB48:
 750:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 752:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group
 753:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 754:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 755:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 756:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         on injected group channel.
 757:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 758:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 759:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 760:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 761:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19372              		.loc 1 761 0
 19373              		.cfi_startproc
 19374              		@ args = 0, pretend = 0, frame = 8
 19375              		@ frame_needed = 1, uses_anonymous_args = 0
 19376              		@ link register save eliminated.
 19377 0000 80B4     		push	{r7}
 19378              	.LCFI56:
 19379              		.cfi_def_cfa_offset 4
 19380 0002 83B0     		sub	sp, sp, #12
 19381              	.LCFI57:
 19382              		.cfi_def_cfa_offset 16
 19383 0004 00AF     		add	r7, sp, #0
 19384              		.cfi_offset 7, -4
 19385              	.LCFI58:
 19386              		.cfi_def_cfa_register 7
 19387 0006 7860     		str	r0, [r7, #4]
 19388 0008 0B46     		mov	r3, r1
 19389 000a FB70     		strb	r3, [r7, #3]
 762:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 763:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 764:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 765:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19390              		.loc 1 765 0
 19391 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19392 000e 002B     		cmp	r3, #0
 19393 0010 06D0     		beq	.L55
 766:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 767:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
 768:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JDISCEN_Set;
 19394              		.loc 1 768 0
 19395 0012 7B68     		ldr	r3, [r7, #4]
 19396 0014 5B68     		ldr	r3, [r3, #4]
 19397 0016 43F48052 		orr	r2, r3, #4096
 19398 001a 7B68     		ldr	r3, [r7, #4]
 19399 001c 5A60     		str	r2, [r3, #4]
 19400 001e 05E0     		b	.L54
 19401              	.L55:
 769:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 770:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 771:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 772:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
 773:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JDISCEN_Reset;
 19402              		.loc 1 773 0
 19403 0020 7B68     		ldr	r3, [r7, #4]
 19404 0022 5B68     		ldr	r3, [r3, #4]
 19405 0024 23F48052 		bic	r2, r3, #4096
 19406 0028 7B68     		ldr	r3, [r7, #4]
 19407 002a 5A60     		str	r2, [r3, #4]
 19408              	.L54:
 774:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 775:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19409              		.loc 1 775 0
 19410 002c 07F10C07 		add	r7, r7, #12
 19411 0030 BD46     		mov	sp, r7
 19412 0032 80BC     		pop	{r7}
 19413 0034 7047     		bx	lr
 19414              		.cfi_endproc
 19415              	.LFE48:
 19417 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 19418              		.align	2
 19419              		.global	ADC_ExternalTrigInjectedConvConfig
 19420              		.thumb
 19421              		.thumb_func
 19423              	ADC_ExternalTrigInjectedConvConfig:
 19424              	.LFB49:
 776:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 777:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 778:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
 779:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 780:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion. 
 781:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 782:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected (for ADC1, ADC2 and ADC3
 783:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected (for ADC1, ADC2 and
 784:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected (for ADC1 and ADC2)
 785:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected (for ADC1 and ADC2)
 786:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected (for ADC1 and ADC2)
 787:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected (for ADC1 and ADC2)
 788:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4: External interrupt line 15 or Timer8
 789:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *                                                       capture compare4 event selected (for ADC1
 790:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected (for ADC3 only)
 791:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected (for ADC3 only)    
 792:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected (for ADC3 only)
 793:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected (for ADC3 only)         
 794:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected (for ADC3 only)    
 795:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
 796:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *                                          by external trigger (for ADC1, ADC2 and ADC3)
 797:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 798:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 799:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
 800:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19425              		.loc 1 800 0
 19426              		.cfi_startproc
 19427              		@ args = 0, pretend = 0, frame = 16
 19428              		@ frame_needed = 1, uses_anonymous_args = 0
 19429              		@ link register save eliminated.
 19430 0000 80B4     		push	{r7}
 19431              	.LCFI59:
 19432              		.cfi_def_cfa_offset 4
 19433 0002 85B0     		sub	sp, sp, #20
 19434              	.LCFI60:
 19435              		.cfi_def_cfa_offset 24
 19436 0004 00AF     		add	r7, sp, #0
 19437              		.cfi_offset 7, -4
 19438              	.LCFI61:
 19439              		.cfi_def_cfa_register 7
 19440 0006 7860     		str	r0, [r7, #4]
 19441 0008 3960     		str	r1, [r7, #0]
 801:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 19442              		.loc 1 801 0
 19443 000a 4FF00003 		mov	r3, #0
 19444 000e FB60     		str	r3, [r7, #12]
 802:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 803:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 804:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
 805:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 806:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR2;
 19445              		.loc 1 806 0
 19446 0010 7B68     		ldr	r3, [r7, #4]
 19447 0012 9B68     		ldr	r3, [r3, #8]
 19448 0014 FB60     		str	r3, [r7, #12]
 807:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old external event selection for injected group */
 808:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR2_JEXTSEL_Reset;
 19449              		.loc 1 808 0
 19450 0016 FB68     		ldr	r3, [r7, #12]
 19451 0018 23F4E043 		bic	r3, r3, #28672
 19452 001c FB60     		str	r3, [r7, #12]
 809:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the external event selection for injected group */
 810:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 19453              		.loc 1 810 0
 19454 001e FA68     		ldr	r2, [r7, #12]
 19455 0020 3B68     		ldr	r3, [r7, #0]
 19456 0022 42EA0303 		orr	r3, r2, r3
 19457 0026 FB60     		str	r3, [r7, #12]
 811:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 812:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg;
 19458              		.loc 1 812 0
 19459 0028 7B68     		ldr	r3, [r7, #4]
 19460 002a FA68     		ldr	r2, [r7, #12]
 19461 002c 9A60     		str	r2, [r3, #8]
 813:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19462              		.loc 1 813 0
 19463 002e 07F11407 		add	r7, r7, #20
 19464 0032 BD46     		mov	sp, r7
 19465 0034 80BC     		pop	{r7}
 19466 0036 7047     		bx	lr
 19467              		.cfi_endproc
 19468              	.LFE49:
 19470              		.section	.text.ADC_ExternalTrigInjectedConvCmd,"ax",%progbits
 19471              		.align	2
 19472              		.global	ADC_ExternalTrigInjectedConvCmd
 19473              		.thumb
 19474              		.thumb_func
 19476              	ADC_ExternalTrigInjectedConvCmd:
 19477              	.LFB50:
 814:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 815:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 816:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx injected channels conversion through
 817:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         external trigger
 818:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 819:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of
 820:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         injected conversion.
 821:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 822:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 823:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 824:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 825:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19478              		.loc 1 825 0
 19479              		.cfi_startproc
 19480              		@ args = 0, pretend = 0, frame = 8
 19481              		@ frame_needed = 1, uses_anonymous_args = 0
 19482              		@ link register save eliminated.
 19483 0000 80B4     		push	{r7}
 19484              	.LCFI62:
 19485              		.cfi_def_cfa_offset 4
 19486 0002 83B0     		sub	sp, sp, #12
 19487              	.LCFI63:
 19488              		.cfi_def_cfa_offset 16
 19489 0004 00AF     		add	r7, sp, #0
 19490              		.cfi_offset 7, -4
 19491              	.LCFI64:
 19492              		.cfi_def_cfa_register 7
 19493 0006 7860     		str	r0, [r7, #4]
 19494 0008 0B46     		mov	r3, r1
 19495 000a FB70     		strb	r3, [r7, #3]
 826:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 827:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 828:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 829:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19496              		.loc 1 829 0
 19497 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19498 000e 002B     		cmp	r3, #0
 19499 0010 06D0     		beq	.L59
 830:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 831:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC external event selection for injected group */
 832:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_Set;
 19500              		.loc 1 832 0
 19501 0012 7B68     		ldr	r3, [r7, #4]
 19502 0014 9B68     		ldr	r3, [r3, #8]
 19503 0016 43F40042 		orr	r2, r3, #32768
 19504 001a 7B68     		ldr	r3, [r7, #4]
 19505 001c 9A60     		str	r2, [r3, #8]
 19506 001e 05E0     		b	.L58
 19507              	.L59:
 833:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 834:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 835:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 836:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC external event selection for injected group */
 837:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 19508              		.loc 1 837 0
 19509 0020 7B68     		ldr	r3, [r7, #4]
 19510 0022 9B68     		ldr	r3, [r3, #8]
 19511 0024 23F40042 		bic	r2, r3, #32768
 19512 0028 7B68     		ldr	r3, [r7, #4]
 19513 002a 9A60     		str	r2, [r3, #8]
 19514              	.L58:
 838:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 839:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19515              		.loc 1 839 0
 19516 002c 07F10C07 		add	r7, r7, #12
 19517 0030 BD46     		mov	sp, r7
 19518 0032 80BC     		pop	{r7}
 19519 0034 7047     		bx	lr
 19520              		.cfi_endproc
 19521              	.LFE50:
 19523 0036 00BF     		.section	.text.ADC_SoftwareStartInjectedConvCmd,"ax",%progbits
 19524              		.align	2
 19525              		.global	ADC_SoftwareStartInjectedConvCmd
 19526              		.thumb
 19527              		.thumb_func
 19529              	ADC_SoftwareStartInjectedConvCmd:
 19530              	.LFB51:
 840:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 841:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 842:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC start of the injected 
 843:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channels conversion.
 844:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 845:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start injected conversion.
 846:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 847:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 848:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 849:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 850:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19531              		.loc 1 850 0
 19532              		.cfi_startproc
 19533              		@ args = 0, pretend = 0, frame = 8
 19534              		@ frame_needed = 1, uses_anonymous_args = 0
 19535              		@ link register save eliminated.
 19536 0000 80B4     		push	{r7}
 19537              	.LCFI65:
 19538              		.cfi_def_cfa_offset 4
 19539 0002 83B0     		sub	sp, sp, #12
 19540              	.LCFI66:
 19541              		.cfi_def_cfa_offset 16
 19542 0004 00AF     		add	r7, sp, #0
 19543              		.cfi_offset 7, -4
 19544              	.LCFI67:
 19545              		.cfi_def_cfa_register 7
 19546 0006 7860     		str	r0, [r7, #4]
 19547 0008 0B46     		mov	r3, r1
 19548 000a FB70     		strb	r3, [r7, #3]
 851:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 852:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19549              		.loc 1 854 0
 19550 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19551 000e 002B     		cmp	r3, #0
 19552 0010 06D0     		beq	.L62
 855:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 856:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion for injected group on external event and start the select
 857:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC injected conversion */
 858:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 19553              		.loc 1 858 0
 19554 0012 7B68     		ldr	r3, [r7, #4]
 19555 0014 9B68     		ldr	r3, [r3, #8]
 19556 0016 43F40212 		orr	r2, r3, #2129920
 19557 001a 7B68     		ldr	r3, [r7, #4]
 19558 001c 9A60     		str	r2, [r3, #8]
 19559 001e 05E0     		b	.L61
 19560              	.L62:
 859:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 860:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 861:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 862:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event for injected group and stop the select
 863:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC injected conversion */
 864:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 19561              		.loc 1 864 0
 19562 0020 7B68     		ldr	r3, [r7, #4]
 19563 0022 9B68     		ldr	r3, [r3, #8]
 19564 0024 23F40212 		bic	r2, r3, #2129920
 19565 0028 7B68     		ldr	r3, [r7, #4]
 19566 002a 9A60     		str	r2, [r3, #8]
 19567              	.L61:
 865:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 866:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19568              		.loc 1 866 0
 19569 002c 07F10C07 		add	r7, r7, #12
 19570 0030 BD46     		mov	sp, r7
 19571 0032 80BC     		pop	{r7}
 19572 0034 7047     		bx	lr
 19573              		.cfi_endproc
 19574              	.LFE51:
 19576 0036 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 19577              		.align	2
 19578              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 19579              		.thumb
 19580              		.thumb_func
 19582              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 19583              	.LFB52:
 867:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 868:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 869:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
 870:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 871:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
 872:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 873:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
 874:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19584              		.loc 1 874 0
 19585              		.cfi_startproc
 19586              		@ args = 0, pretend = 0, frame = 16
 19587              		@ frame_needed = 1, uses_anonymous_args = 0
 19588              		@ link register save eliminated.
 19589 0000 80B4     		push	{r7}
 19590              	.LCFI68:
 19591              		.cfi_def_cfa_offset 4
 19592 0002 85B0     		sub	sp, sp, #20
 19593              	.LCFI69:
 19594              		.cfi_def_cfa_offset 24
 19595 0004 00AF     		add	r7, sp, #0
 19596              		.cfi_offset 7, -4
 19597              	.LCFI70:
 19598              		.cfi_def_cfa_register 7
 19599 0006 7860     		str	r0, [r7, #4]
 875:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 19600              		.loc 1 875 0
 19601 0008 4FF00003 		mov	r3, #0
 19602 000c FB73     		strb	r3, [r7, #15]
 876:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 877:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 878:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of JSWSTART bit */
 879:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 19603              		.loc 1 879 0
 19604 000e 7B68     		ldr	r3, [r7, #4]
 19605 0010 9B68     		ldr	r3, [r3, #8]
 19606 0012 03F40013 		and	r3, r3, #2097152
 19607 0016 002B     		cmp	r3, #0
 19608 0018 03D0     		beq	.L65
 880:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 881:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* JSWSTART bit is set */
 882:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 19609              		.loc 1 882 0
 19610 001a 4FF00103 		mov	r3, #1
 19611 001e FB73     		strb	r3, [r7, #15]
 19612 0020 02E0     		b	.L66
 19613              	.L65:
 883:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 884:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 885:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 886:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* JSWSTART bit is reset */
 887:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 19614              		.loc 1 887 0
 19615 0022 4FF00003 		mov	r3, #0
 19616 0026 FB73     		strb	r3, [r7, #15]
 19617              	.L66:
 888:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 889:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the JSWSTART bit status */
 890:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 19618              		.loc 1 890 0
 19619 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 891:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19620              		.loc 1 891 0
 19621 002a 1846     		mov	r0, r3
 19622 002c 07F11407 		add	r7, r7, #20
 19623 0030 BD46     		mov	sp, r7
 19624 0032 80BC     		pop	{r7}
 19625 0034 7047     		bx	lr
 19626              		.cfi_endproc
 19627              	.LFE52:
 19629 0036 00BF     		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 19630              		.align	2
 19631              		.global	ADC_InjectedChannelConfig
 19632              		.thumb
 19633              		.thumb_func
 19635              	ADC_InjectedChannelConfig:
 19636              	.LFB53:
 892:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 893:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 894:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
 895:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 896:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 897:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 898:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 899:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 900:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 901:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 902:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 903:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 904:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 905:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 906:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 907:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 908:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 909:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 910:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 911:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 912:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 913:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 914:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 915:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 916:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 917:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the injected group sequencer. This parameter must be between 1 and 4.
 918:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 919:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 920:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 921:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 922:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 923:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 924:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 925:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 926:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 927:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 928:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 929:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 930:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
 931:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19637              		.loc 1 931 0
 19638              		.cfi_startproc
 19639              		@ args = 0, pretend = 0, frame = 24
 19640              		@ frame_needed = 1, uses_anonymous_args = 0
 19641              		@ link register save eliminated.
 19642 0000 80B4     		push	{r7}
 19643              	.LCFI71:
 19644              		.cfi_def_cfa_offset 4
 19645 0002 87B0     		sub	sp, sp, #28
 19646              	.LCFI72:
 19647              		.cfi_def_cfa_offset 32
 19648 0004 00AF     		add	r7, sp, #0
 19649              		.cfi_offset 7, -4
 19650              	.LCFI73:
 19651              		.cfi_def_cfa_register 7
 19652 0006 7860     		str	r0, [r7, #4]
 19653 0008 F970     		strb	r1, [r7, #3]
 19654 000a BA70     		strb	r2, [r7, #2]
 19655 000c 7B70     		strb	r3, [r7, #1]
 932:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 19656              		.loc 1 932 0
 19657 000e 4FF00003 		mov	r3, #0
 19658 0012 7B61     		str	r3, [r7, #20]
 19659 0014 4FF00003 		mov	r3, #0
 19660 0018 3B61     		str	r3, [r7, #16]
 19661 001a 4FF00003 		mov	r3, #0
 19662 001e FB60     		str	r3, [r7, #12]
 933:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 934:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 935:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 936:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
 937:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 938:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 939:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 19663              		.loc 1 939 0
 19664 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19665 0022 092B     		cmp	r3, #9
 19666 0024 29D9     		bls	.L68
 940:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 941:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 942:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 19667              		.loc 1 942 0
 19668 0026 7B68     		ldr	r3, [r7, #4]
 19669 0028 DB68     		ldr	r3, [r3, #12]
 19670 002a 7B61     		str	r3, [r7, #20]
 943:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 944:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 19671              		.loc 1 944 0
 19672 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19673 002e 1346     		mov	r3, r2
 19674 0030 4FEA4303 		lsl	r3, r3, #1
 19675 0034 9B18     		adds	r3, r3, r2
 19676 0036 A3F11E03 		sub	r3, r3, #30
 19677 003a 4FF00702 		mov	r2, #7
 19678 003e 02FA03F3 		lsl	r3, r2, r3
 19679 0042 3B61     		str	r3, [r7, #16]
 945:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 946:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19680              		.loc 1 946 0
 19681 0044 3B69     		ldr	r3, [r7, #16]
 19682 0046 6FEA0303 		mvn	r3, r3
 19683 004a 7A69     		ldr	r2, [r7, #20]
 19684 004c 02EA0303 		and	r3, r2, r3
 19685 0050 7B61     		str	r3, [r7, #20]
 947:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 948:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 19686              		.loc 1 948 0
 19687 0052 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 19688 0054 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19689 0056 1346     		mov	r3, r2
 19690 0058 4FEA4303 		lsl	r3, r3, #1
 19691 005c 9B18     		adds	r3, r3, r2
 19692 005e A3F11E03 		sub	r3, r3, #30
 19693 0062 01FA03F3 		lsl	r3, r1, r3
 19694 0066 3B61     		str	r3, [r7, #16]
 949:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 950:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19695              		.loc 1 950 0
 19696 0068 7A69     		ldr	r2, [r7, #20]
 19697 006a 3B69     		ldr	r3, [r7, #16]
 19698 006c 42EA0303 		orr	r3, r2, r3
 19699 0070 7B61     		str	r3, [r7, #20]
 951:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 952:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 19700              		.loc 1 952 0
 19701 0072 7B68     		ldr	r3, [r7, #4]
 19702 0074 7A69     		ldr	r2, [r7, #20]
 19703 0076 DA60     		str	r2, [r3, #12]
 19704 0078 24E0     		b	.L69
 19705              	.L68:
 953:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 954:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 955:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 956:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 957:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 19706              		.loc 1 957 0
 19707 007a 7B68     		ldr	r3, [r7, #4]
 19708 007c 1B69     		ldr	r3, [r3, #16]
 19709 007e 7B61     		str	r3, [r7, #20]
 958:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 959:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 19710              		.loc 1 959 0
 19711 0080 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19712 0082 1346     		mov	r3, r2
 19713 0084 4FEA4303 		lsl	r3, r3, #1
 19714 0088 9B18     		adds	r3, r3, r2
 19715 008a 4FF00702 		mov	r2, #7
 19716 008e 02FA03F3 		lsl	r3, r2, r3
 19717 0092 3B61     		str	r3, [r7, #16]
 960:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 961:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19718              		.loc 1 961 0
 19719 0094 3B69     		ldr	r3, [r7, #16]
 19720 0096 6FEA0303 		mvn	r3, r3
 19721 009a 7A69     		ldr	r2, [r7, #20]
 19722 009c 02EA0303 		and	r3, r2, r3
 19723 00a0 7B61     		str	r3, [r7, #20]
 962:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 963:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 19724              		.loc 1 963 0
 19725 00a2 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 19726 00a4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19727 00a6 1346     		mov	r3, r2
 19728 00a8 4FEA4303 		lsl	r3, r3, #1
 19729 00ac 9B18     		adds	r3, r3, r2
 19730 00ae 01FA03F3 		lsl	r3, r1, r3
 19731 00b2 3B61     		str	r3, [r7, #16]
 964:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 965:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19732              		.loc 1 965 0
 19733 00b4 7A69     		ldr	r2, [r7, #20]
 19734 00b6 3B69     		ldr	r3, [r7, #16]
 19735 00b8 42EA0303 		orr	r3, r2, r3
 19736 00bc 7B61     		str	r3, [r7, #20]
 966:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 967:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 19737              		.loc 1 967 0
 19738 00be 7B68     		ldr	r3, [r7, #4]
 19739 00c0 7A69     		ldr	r2, [r7, #20]
 19740 00c2 1A61     		str	r2, [r3, #16]
 19741              	.L69:
 968:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 969:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Rank configuration */
 970:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 971:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 19742              		.loc 1 971 0
 19743 00c4 7B68     		ldr	r3, [r7, #4]
 19744 00c6 9B6B     		ldr	r3, [r3, #56]
 19745 00c8 7B61     		str	r3, [r7, #20]
 972:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get JL value: Number = JL+1 */
 973:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 19746              		.loc 1 973 0
 19747 00ca 7B69     		ldr	r3, [r7, #20]
 19748 00cc 03F44013 		and	r3, r3, #3145728
 19749 00d0 4FEA1353 		lsr	r3, r3, #20
 19750 00d4 FB60     		str	r3, [r7, #12]
 974:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
 975:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 19751              		.loc 1 975 0
 19752 00d6 FB68     		ldr	r3, [r7, #12]
 19753 00d8 DBB2     		uxtb	r3, r3
 19754 00da 6FEA0303 		mvn	r3, r3
 19755 00de DAB2     		uxtb	r2, r3
 19756 00e0 BB78     		ldrb	r3, [r7, #2]
 19757 00e2 D318     		adds	r3, r2, r3
 19758 00e4 DBB2     		uxtb	r3, r3
 19759 00e6 03F10303 		add	r3, r3, #3
 19760 00ea DBB2     		uxtb	r3, r3
 19761 00ec 1A46     		mov	r2, r3
 19762 00ee 1346     		mov	r3, r2
 19763 00f0 4FEA8303 		lsl	r3, r3, #2
 19764 00f4 9B18     		adds	r3, r3, r2
 19765 00f6 4FF01F02 		mov	r2, #31
 19766 00fa 02FA03F3 		lsl	r3, r2, r3
 19767 00fe 3B61     		str	r3, [r7, #16]
 976:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old JSQx bits for the selected rank */
 977:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= ~tmpreg2;
 19768              		.loc 1 977 0
 19769 0100 3B69     		ldr	r3, [r7, #16]
 19770 0102 6FEA0303 		mvn	r3, r3
 19771 0106 7A69     		ldr	r2, [r7, #20]
 19772 0108 02EA0303 		and	r3, r2, r3
 19773 010c 7B61     		str	r3, [r7, #20]
 978:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
 979:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 19774              		.loc 1 979 0
 19775 010e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19776 0110 FB68     		ldr	r3, [r7, #12]
 19777 0112 DBB2     		uxtb	r3, r3
 19778 0114 6FEA0303 		mvn	r3, r3
 19779 0118 DAB2     		uxtb	r2, r3
 19780 011a BB78     		ldrb	r3, [r7, #2]
 19781 011c D318     		adds	r3, r2, r3
 19782 011e DBB2     		uxtb	r3, r3
 19783 0120 03F10303 		add	r3, r3, #3
 19784 0124 DBB2     		uxtb	r3, r3
 19785 0126 1A46     		mov	r2, r3
 19786 0128 1346     		mov	r3, r2
 19787 012a 4FEA8303 		lsl	r3, r3, #2
 19788 012e 9B18     		adds	r3, r3, r2
 19789 0130 01FA03F3 		lsl	r3, r1, r3
 19790 0134 3B61     		str	r3, [r7, #16]
 980:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the JSQx bits for the selected rank */
 981:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2;
 19791              		.loc 1 981 0
 19792 0136 7A69     		ldr	r2, [r7, #20]
 19793 0138 3B69     		ldr	r3, [r7, #16]
 19794 013a 42EA0303 		orr	r3, r2, r3
 19795 013e 7B61     		str	r3, [r7, #20]
 982:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 983:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 19796              		.loc 1 983 0
 19797 0140 7B68     		ldr	r3, [r7, #4]
 19798 0142 7A69     		ldr	r2, [r7, #20]
 19799 0144 9A63     		str	r2, [r3, #56]
 984:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19800              		.loc 1 984 0
 19801 0146 07F11C07 		add	r7, r7, #28
 19802 014a BD46     		mov	sp, r7
 19803 014c 80BC     		pop	{r7}
 19804 014e 7047     		bx	lr
 19805              		.cfi_endproc
 19806              	.LFE53:
 19808              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 19809              		.align	2
 19810              		.global	ADC_InjectedSequencerLengthConfig
 19811              		.thumb
 19812              		.thumb_func
 19814              	ADC_InjectedSequencerLengthConfig:
 19815              	.LFB54:
 985:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 986:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 987:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the sequencer length for injected channels
 988:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 989:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Length: The sequencer length. 
 990:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a number between 1 to 4.
 991:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 992:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 993:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
 994:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19816              		.loc 1 994 0
 19817              		.cfi_startproc
 19818              		@ args = 0, pretend = 0, frame = 16
 19819              		@ frame_needed = 1, uses_anonymous_args = 0
 19820              		@ link register save eliminated.
 19821 0000 80B4     		push	{r7}
 19822              	.LCFI74:
 19823              		.cfi_def_cfa_offset 4
 19824 0002 85B0     		sub	sp, sp, #20
 19825              	.LCFI75:
 19826              		.cfi_def_cfa_offset 24
 19827 0004 00AF     		add	r7, sp, #0
 19828              		.cfi_offset 7, -4
 19829              	.LCFI76:
 19830              		.cfi_def_cfa_register 7
 19831 0006 7860     		str	r0, [r7, #4]
 19832 0008 0B46     		mov	r3, r1
 19833 000a FB70     		strb	r3, [r7, #3]
 995:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 19834              		.loc 1 995 0
 19835 000c 4FF00003 		mov	r3, #0
 19836 0010 FB60     		str	r3, [r7, #12]
 996:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 19837              		.loc 1 996 0
 19838 0012 4FF00003 		mov	r3, #0
 19839 0016 BB60     		str	r3, [r7, #8]
 997:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 998:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 999:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1000:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1001:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1002:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 19840              		.loc 1 1002 0
 19841 0018 7B68     		ldr	r3, [r7, #4]
 19842 001a 9B6B     		ldr	r3, [r3, #56]
 19843 001c FB60     		str	r3, [r7, #12]
1003:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old injected sequnence lenght JL bits */
1004:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= JSQR_JL_Reset;
 19844              		.loc 1 1004 0
 19845 001e FB68     		ldr	r3, [r7, #12]
 19846 0020 23F44013 		bic	r3, r3, #3145728
 19847 0024 FB60     		str	r3, [r7, #12]
1005:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the injected sequnence lenght JL bits */
1006:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = Length - 1; 
 19848              		.loc 1 1006 0
 19849 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19850 0028 03F1FF33 		add	r3, r3, #-1
 19851 002c BB60     		str	r3, [r7, #8]
1007:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 19852              		.loc 1 1007 0
 19853 002e BB68     		ldr	r3, [r7, #8]
 19854 0030 4FEA0353 		lsl	r3, r3, #20
 19855 0034 FA68     		ldr	r2, [r7, #12]
 19856 0036 42EA0303 		orr	r3, r2, r3
 19857 003a FB60     		str	r3, [r7, #12]
1008:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1009:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 19858              		.loc 1 1009 0
 19859 003c 7B68     		ldr	r3, [r7, #4]
 19860 003e FA68     		ldr	r2, [r7, #12]
 19861 0040 9A63     		str	r2, [r3, #56]
1010:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19862              		.loc 1 1010 0
 19863 0042 07F11407 		add	r7, r7, #20
 19864 0046 BD46     		mov	sp, r7
 19865 0048 80BC     		pop	{r7}
 19866 004a 7047     		bx	lr
 19867              		.cfi_endproc
 19868              	.LFE54:
 19870              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 19871              		.align	2
 19872              		.global	ADC_SetInjectedOffset
 19873              		.thumb
 19874              		.thumb_func
 19876              	ADC_SetInjectedOffset:
 19877              	.LFB55:
1011:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1012:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1013:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Set the injected channels conversion value offset
1014:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1015:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1016:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1017:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1018:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1019:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1020:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1021:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1022:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1023:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1024:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1025:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1026:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19878              		.loc 1 1026 0
 19879              		.cfi_startproc
 19880              		@ args = 0, pretend = 0, frame = 16
 19881              		@ frame_needed = 1, uses_anonymous_args = 0
 19882              		@ link register save eliminated.
 19883 0000 80B4     		push	{r7}
 19884              	.LCFI77:
 19885              		.cfi_def_cfa_offset 4
 19886 0002 85B0     		sub	sp, sp, #20
 19887              	.LCFI78:
 19888              		.cfi_def_cfa_offset 24
 19889 0004 00AF     		add	r7, sp, #0
 19890              		.cfi_offset 7, -4
 19891              	.LCFI79:
 19892              		.cfi_def_cfa_register 7
 19893 0006 7860     		str	r0, [r7, #4]
 19894 0008 1346     		mov	r3, r2
 19895 000a 0A46     		mov	r2, r1
 19896 000c FA70     		strb	r2, [r7, #3]
 19897 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1027:../StdPeripheralDriver/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 19898              		.loc 1 1027 0
 19899 0010 4FF00003 		mov	r3, #0
 19900 0014 FB60     		str	r3, [r7, #12]
1028:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1029:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1030:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1031:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1032:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));  
1033:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1034:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 19901              		.loc 1 1034 0
 19902 0016 7B68     		ldr	r3, [r7, #4]
 19903 0018 FB60     		str	r3, [r7, #12]
1035:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel;
 19904              		.loc 1 1035 0
 19905 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19906 001c FB68     		ldr	r3, [r7, #12]
 19907 001e D318     		adds	r3, r2, r3
 19908 0020 FB60     		str	r3, [r7, #12]
1036:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1037:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the selected injected channel data offset */
1038:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *(__IO uint32_t *) tmp = (uint32_t)Offset;
 19909              		.loc 1 1038 0
 19910 0022 FB68     		ldr	r3, [r7, #12]
 19911 0024 3A88     		ldrh	r2, [r7, #0]
 19912 0026 1A60     		str	r2, [r3, #0]
1039:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19913              		.loc 1 1039 0
 19914 0028 07F11407 		add	r7, r7, #20
 19915 002c BD46     		mov	sp, r7
 19916 002e 80BC     		pop	{r7}
 19917 0030 7047     		bx	lr
 19918              		.cfi_endproc
 19919              	.LFE55:
 19921 0032 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 19922              		.align	2
 19923              		.global	ADC_GetInjectedConversionValue
 19924              		.thumb
 19925              		.thumb_func
 19927              	ADC_GetInjectedConversionValue:
 19928              	.LFB56:
1040:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1041:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1042:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1043:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1045:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1046:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1047:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1048:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1049:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1050:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
1051:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1052:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1053:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19929              		.loc 1 1053 0
 19930              		.cfi_startproc
 19931              		@ args = 0, pretend = 0, frame = 16
 19932              		@ frame_needed = 1, uses_anonymous_args = 0
 19933              		@ link register save eliminated.
 19934 0000 80B4     		push	{r7}
 19935              	.LCFI80:
 19936              		.cfi_def_cfa_offset 4
 19937 0002 85B0     		sub	sp, sp, #20
 19938              	.LCFI81:
 19939              		.cfi_def_cfa_offset 24
 19940 0004 00AF     		add	r7, sp, #0
 19941              		.cfi_offset 7, -4
 19942              	.LCFI82:
 19943              		.cfi_def_cfa_register 7
 19944 0006 7860     		str	r0, [r7, #4]
 19945 0008 0B46     		mov	r3, r1
 19946 000a FB70     		strb	r3, [r7, #3]
1054:../StdPeripheralDriver/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 19947              		.loc 1 1054 0
 19948 000c 4FF00003 		mov	r3, #0
 19949 0010 FB60     		str	r3, [r7, #12]
1055:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1056:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1057:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1059:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1060:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 19950              		.loc 1 1060 0
 19951 0012 7B68     		ldr	r3, [r7, #4]
 19952 0014 FB60     		str	r3, [r7, #12]
1061:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel + JDR_Offset;
 19953              		.loc 1 1061 0
 19954 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19955 0018 FB68     		ldr	r3, [r7, #12]
 19956 001a D318     		adds	r3, r2, r3
 19957 001c 03F12803 		add	r3, r3, #40
 19958 0020 FB60     		str	r3, [r7, #12]
1062:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1063:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Returns the selected injected channel conversion data value */
1064:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp);   
 19959              		.loc 1 1064 0
 19960 0022 FB68     		ldr	r3, [r7, #12]
 19961 0024 1B68     		ldr	r3, [r3, #0]
 19962 0026 9BB2     		uxth	r3, r3
1065:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19963              		.loc 1 1065 0
 19964 0028 1846     		mov	r0, r3
 19965 002a 07F11407 		add	r7, r7, #20
 19966 002e BD46     		mov	sp, r7
 19967 0030 80BC     		pop	{r7}
 19968 0032 7047     		bx	lr
 19969              		.cfi_endproc
 19970              	.LFE56:
 19972              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 19973              		.align	2
 19974              		.global	ADC_AnalogWatchdogCmd
 19975              		.thumb
 19976              		.thumb_func
 19978              	ADC_AnalogWatchdogCmd:
 19979              	.LFB57:
1066:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1067:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1068:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular
1069:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         or injected channels
1070:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1071:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
1072:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1073:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
1074:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel
1075:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or inje
1076:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on  all regular channel
1077:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on  all injected channel
1078:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected c
1079:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
1080:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None	  
1081:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1082:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
1083:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19980              		.loc 1 1083 0
 19981              		.cfi_startproc
 19982              		@ args = 0, pretend = 0, frame = 16
 19983              		@ frame_needed = 1, uses_anonymous_args = 0
 19984              		@ link register save eliminated.
 19985 0000 80B4     		push	{r7}
 19986              	.LCFI83:
 19987              		.cfi_def_cfa_offset 4
 19988 0002 85B0     		sub	sp, sp, #20
 19989              	.LCFI84:
 19990              		.cfi_def_cfa_offset 24
 19991 0004 00AF     		add	r7, sp, #0
 19992              		.cfi_offset 7, -4
 19993              	.LCFI85:
 19994              		.cfi_def_cfa_register 7
 19995 0006 7860     		str	r0, [r7, #4]
 19996 0008 3960     		str	r1, [r7, #0]
1084:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 19997              		.loc 1 1084 0
 19998 000a 4FF00003 		mov	r3, #0
 19999 000e FB60     		str	r3, [r7, #12]
1085:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1086:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1087:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
1088:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1089:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 20000              		.loc 1 1089 0
 20001 0010 7B68     		ldr	r3, [r7, #4]
 20002 0012 5B68     		ldr	r3, [r3, #4]
 20003 0014 FB60     		str	r3, [r7, #12]
1090:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear AWDEN, AWDENJ and AWDSGL bits */
1091:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDMode_Reset;
 20004              		.loc 1 1091 0
 20005 0016 FB68     		ldr	r3, [r7, #12]
 20006 0018 23F44003 		bic	r3, r3, #12582912
 20007 001c 23F40073 		bic	r3, r3, #512
 20008 0020 FB60     		str	r3, [r7, #12]
1092:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the analog watchdog enable mode */
1093:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 20009              		.loc 1 1093 0
 20010 0022 FA68     		ldr	r2, [r7, #12]
 20011 0024 3B68     		ldr	r3, [r7, #0]
 20012 0026 42EA0303 		orr	r3, r2, r3
 20013 002a FB60     		str	r3, [r7, #12]
1094:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1095:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 20014              		.loc 1 1095 0
 20015 002c 7B68     		ldr	r3, [r7, #4]
 20016 002e FA68     		ldr	r2, [r7, #12]
 20017 0030 5A60     		str	r2, [r3, #4]
1096:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20018              		.loc 1 1096 0
 20019 0032 07F11407 		add	r7, r7, #20
 20020 0036 BD46     		mov	sp, r7
 20021 0038 80BC     		pop	{r7}
 20022 003a 7047     		bx	lr
 20023              		.cfi_endproc
 20024              	.LFE57:
 20026              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 20027              		.align	2
 20028              		.global	ADC_AnalogWatchdogThresholdsConfig
 20029              		.thumb
 20030              		.thumb_func
 20032              	ADC_AnalogWatchdogThresholdsConfig:
 20033              	.LFB58:
1097:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1098:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1099:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
1100:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1101:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
1102:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1103:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
1104:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1105:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1106:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1107:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
1108:../StdPeripheralDriver/src/stm32f10x_adc.c ****                                         uint16_t LowThreshold)
1109:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20034              		.loc 1 1109 0
 20035              		.cfi_startproc
 20036              		@ args = 0, pretend = 0, frame = 8
 20037              		@ frame_needed = 1, uses_anonymous_args = 0
 20038              		@ link register save eliminated.
 20039 0000 80B4     		push	{r7}
 20040              	.LCFI86:
 20041              		.cfi_def_cfa_offset 4
 20042 0002 83B0     		sub	sp, sp, #12
 20043              	.LCFI87:
 20044              		.cfi_def_cfa_offset 16
 20045 0004 00AF     		add	r7, sp, #0
 20046              		.cfi_offset 7, -4
 20047              	.LCFI88:
 20048              		.cfi_def_cfa_register 7
 20049 0006 7860     		str	r0, [r7, #4]
 20050 0008 1346     		mov	r3, r2
 20051 000a 0A46     		mov	r2, r1	@ movhi
 20052 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 20053 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1110:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1111:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1112:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
1113:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
1114:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the ADCx high threshold */
1115:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->HTR = HighThreshold;
 20054              		.loc 1 1115 0
 20055 0010 7A88     		ldrh	r2, [r7, #2]
 20056 0012 7B68     		ldr	r3, [r7, #4]
 20057 0014 5A62     		str	r2, [r3, #36]
1116:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the ADCx low threshold */
1117:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->LTR = LowThreshold;
 20058              		.loc 1 1117 0
 20059 0016 3A88     		ldrh	r2, [r7, #0]
 20060 0018 7B68     		ldr	r3, [r7, #4]
 20061 001a 9A62     		str	r2, [r3, #40]
1118:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20062              		.loc 1 1118 0
 20063 001c 07F10C07 		add	r7, r7, #12
 20064 0020 BD46     		mov	sp, r7
 20065 0022 80BC     		pop	{r7}
 20066 0024 7047     		bx	lr
 20067              		.cfi_endproc
 20068              	.LFE58:
 20070 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 20071              		.align	2
 20072              		.global	ADC_AnalogWatchdogSingleChannelConfig
 20073              		.thumb
 20074              		.thumb_func
 20076              	ADC_AnalogWatchdogSingleChannelConfig:
 20077              	.LFB59:
1119:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1120:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1121:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
1122:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1123:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
1124:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1125:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
1126:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1127:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1128:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1129:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1130:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1131:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1132:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1133:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1134:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1135:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1136:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1137:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1138:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1139:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1140:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1141:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1142:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1143:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1144:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1145:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
1146:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20078              		.loc 1 1146 0
 20079              		.cfi_startproc
 20080              		@ args = 0, pretend = 0, frame = 16
 20081              		@ frame_needed = 1, uses_anonymous_args = 0
 20082              		@ link register save eliminated.
 20083 0000 80B4     		push	{r7}
 20084              	.LCFI89:
 20085              		.cfi_def_cfa_offset 4
 20086 0002 85B0     		sub	sp, sp, #20
 20087              	.LCFI90:
 20088              		.cfi_def_cfa_offset 24
 20089 0004 00AF     		add	r7, sp, #0
 20090              		.cfi_offset 7, -4
 20091              	.LCFI91:
 20092              		.cfi_def_cfa_register 7
 20093 0006 7860     		str	r0, [r7, #4]
 20094 0008 0B46     		mov	r3, r1
 20095 000a FB70     		strb	r3, [r7, #3]
1147:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 20096              		.loc 1 1147 0
 20097 000c 4FF00003 		mov	r3, #0
 20098 0010 FB60     		str	r3, [r7, #12]
1148:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1149:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1150:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1151:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1152:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 20099              		.loc 1 1152 0
 20100 0012 7B68     		ldr	r3, [r7, #4]
 20101 0014 5B68     		ldr	r3, [r3, #4]
 20102 0016 FB60     		str	r3, [r7, #12]
1153:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the Analog watchdog channel select bits */
1154:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDCH_Reset;
 20103              		.loc 1 1154 0
 20104 0018 FB68     		ldr	r3, [r7, #12]
 20105 001a 23F01F03 		bic	r3, r3, #31
 20106 001e FB60     		str	r3, [r7, #12]
1155:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the Analog watchdog channel */
1156:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_Channel;
 20107              		.loc 1 1156 0
 20108 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 20109 0022 FA68     		ldr	r2, [r7, #12]
 20110 0024 42EA0303 		orr	r3, r2, r3
 20111 0028 FB60     		str	r3, [r7, #12]
1157:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1158:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 20112              		.loc 1 1158 0
 20113 002a 7B68     		ldr	r3, [r7, #4]
 20114 002c FA68     		ldr	r2, [r7, #12]
 20115 002e 5A60     		str	r2, [r3, #4]
1159:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20116              		.loc 1 1159 0
 20117 0030 07F11407 		add	r7, r7, #20
 20118 0034 BD46     		mov	sp, r7
 20119 0036 80BC     		pop	{r7}
 20120 0038 7047     		bx	lr
 20121              		.cfi_endproc
 20122              	.LFE59:
 20124 003a 00BF     		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 20125              		.align	2
 20126              		.global	ADC_TempSensorVrefintCmd
 20127              		.thumb
 20128              		.thumb_func
 20130              	ADC_TempSensorVrefintCmd:
 20131              	.LFB60:
1160:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1161:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1162:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channel.
1163:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the temperature sensor.
1164:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1165:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1166:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1167:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)
1168:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20132              		.loc 1 1168 0
 20133              		.cfi_startproc
 20134              		@ args = 0, pretend = 0, frame = 8
 20135              		@ frame_needed = 1, uses_anonymous_args = 0
 20136              		@ link register save eliminated.
 20137 0000 80B4     		push	{r7}
 20138              	.LCFI92:
 20139              		.cfi_def_cfa_offset 4
 20140 0002 83B0     		sub	sp, sp, #12
 20141              	.LCFI93:
 20142              		.cfi_def_cfa_offset 16
 20143 0004 00AF     		add	r7, sp, #0
 20144              		.cfi_offset 7, -4
 20145              	.LCFI94:
 20146              		.cfi_def_cfa_register 7
 20147 0006 0346     		mov	r3, r0
 20148 0008 FB71     		strb	r3, [r7, #7]
1169:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1170:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1171:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 20149              		.loc 1 1171 0
 20150 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 20151 000c 002B     		cmp	r3, #0
 20152 000e 06D0     		beq	.L77
1172:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1173:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
1174:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADC1->CR2 |= CR2_TSVREFE_Set;
 20153              		.loc 1 1174 0
 20154 0010 084B     		ldr	r3, .L79
 20155 0012 084A     		ldr	r2, .L79
 20156 0014 9268     		ldr	r2, [r2, #8]
 20157 0016 42F40002 		orr	r2, r2, #8388608
 20158 001a 9A60     		str	r2, [r3, #8]
 20159 001c 05E0     		b	.L76
 20160              	.L77:
1175:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1176:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1177:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1178:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
1179:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADC1->CR2 &= CR2_TSVREFE_Reset;
 20161              		.loc 1 1179 0
 20162 001e 054B     		ldr	r3, .L79
 20163 0020 044A     		ldr	r2, .L79
 20164 0022 9268     		ldr	r2, [r2, #8]
 20165 0024 22F40002 		bic	r2, r2, #8388608
 20166 0028 9A60     		str	r2, [r3, #8]
 20167              	.L76:
1180:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1181:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20168              		.loc 1 1181 0
 20169 002a 07F10C07 		add	r7, r7, #12
 20170 002e BD46     		mov	sp, r7
 20171 0030 80BC     		pop	{r7}
 20172 0032 7047     		bx	lr
 20173              	.L80:
 20174              		.align	2
 20175              	.L79:
 20176 0034 00240140 		.word	1073816576
 20177              		.cfi_endproc
 20178              	.LFE60:
 20180              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 20181              		.align	2
 20182              		.global	ADC_GetFlagStatus
 20183              		.thumb
 20184              		.thumb_func
 20186              	ADC_GetFlagStatus:
 20187              	.LFB61:
1182:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1183:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1184:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1185:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1186:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1187:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1188:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1189:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1190:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1191:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1192:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1193:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1194:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1195:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1196:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20188              		.loc 1 1196 0
 20189              		.cfi_startproc
 20190              		@ args = 0, pretend = 0, frame = 16
 20191              		@ frame_needed = 1, uses_anonymous_args = 0
 20192              		@ link register save eliminated.
 20193 0000 80B4     		push	{r7}
 20194              	.LCFI95:
 20195              		.cfi_def_cfa_offset 4
 20196 0002 85B0     		sub	sp, sp, #20
 20197              	.LCFI96:
 20198              		.cfi_def_cfa_offset 24
 20199 0004 00AF     		add	r7, sp, #0
 20200              		.cfi_offset 7, -4
 20201              	.LCFI97:
 20202              		.cfi_def_cfa_register 7
 20203 0006 7860     		str	r0, [r7, #4]
 20204 0008 0B46     		mov	r3, r1
 20205 000a FB70     		strb	r3, [r7, #3]
1197:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 20206              		.loc 1 1197 0
 20207 000c 4FF00003 		mov	r3, #0
 20208 0010 FB73     		strb	r3, [r7, #15]
1198:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1199:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1200:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1201:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC flag */
1202:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 20209              		.loc 1 1202 0
 20210 0012 7B68     		ldr	r3, [r7, #4]
 20211 0014 1A68     		ldr	r2, [r3, #0]
 20212 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 20213 0018 02EA0303 		and	r3, r2, r3
 20214 001c 002B     		cmp	r3, #0
 20215 001e 03D0     		beq	.L82
1203:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1204:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_FLAG is set */
1205:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 20216              		.loc 1 1205 0
 20217 0020 4FF00103 		mov	r3, #1
 20218 0024 FB73     		strb	r3, [r7, #15]
 20219 0026 02E0     		b	.L83
 20220              	.L82:
1206:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1207:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1208:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1209:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_FLAG is reset */
1210:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 20221              		.loc 1 1210 0
 20222 0028 4FF00003 		mov	r3, #0
 20223 002c FB73     		strb	r3, [r7, #15]
 20224              	.L83:
1211:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1212:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the ADC_FLAG status */
1213:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 20225              		.loc 1 1213 0
 20226 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1214:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20227              		.loc 1 1214 0
 20228 0030 1846     		mov	r0, r3
 20229 0032 07F11407 		add	r7, r7, #20
 20230 0036 BD46     		mov	sp, r7
 20231 0038 80BC     		pop	{r7}
 20232 003a 7047     		bx	lr
 20233              		.cfi_endproc
 20234              	.LFE61:
 20236              		.section	.text.ADC_ClearFlag,"ax",%progbits
 20237              		.align	2
 20238              		.global	ADC_ClearFlag
 20239              		.thumb
 20240              		.thumb_func
 20242              	ADC_ClearFlag:
 20243              	.LFB62:
1215:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1216:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1217:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's pending flags.
1218:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1219:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1220:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1221:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1222:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1223:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1224:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1225:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1226:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1227:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1228:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1229:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20244              		.loc 1 1229 0
 20245              		.cfi_startproc
 20246              		@ args = 0, pretend = 0, frame = 8
 20247              		@ frame_needed = 1, uses_anonymous_args = 0
 20248              		@ link register save eliminated.
 20249 0000 80B4     		push	{r7}
 20250              	.LCFI98:
 20251              		.cfi_def_cfa_offset 4
 20252 0002 83B0     		sub	sp, sp, #12
 20253              	.LCFI99:
 20254              		.cfi_def_cfa_offset 16
 20255 0004 00AF     		add	r7, sp, #0
 20256              		.cfi_offset 7, -4
 20257              	.LCFI100:
 20258              		.cfi_def_cfa_register 7
 20259 0006 7860     		str	r0, [r7, #4]
 20260 0008 0B46     		mov	r3, r1
 20261 000a FB70     		strb	r3, [r7, #3]
1230:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1231:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1232:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1233:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the selected ADC flags */
1234:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 20262              		.loc 1 1234 0
 20263 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 20264 000e 6FEA0302 		mvn	r2, r3
 20265 0012 7B68     		ldr	r3, [r7, #4]
 20266 0014 1A60     		str	r2, [r3, #0]
1235:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20267              		.loc 1 1235 0
 20268 0016 07F10C07 		add	r7, r7, #12
 20269 001a BD46     		mov	sp, r7
 20270 001c 80BC     		pop	{r7}
 20271 001e 7047     		bx	lr
 20272              		.cfi_endproc
 20273              	.LFE62:
 20275              		.section	.text.ADC_GetITStatus,"ax",%progbits
 20276              		.align	2
 20277              		.global	ADC_GetITStatus
 20278              		.thumb
 20279              		.thumb_func
 20281              	ADC_GetITStatus:
 20282              	.LFB63:
1236:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1237:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1238:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1239:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1240:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1241:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1242:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1243:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1244:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1245:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1246:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1247:../StdPeripheralDriver/src/stm32f10x_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1248:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20283              		.loc 1 1248 0
 20284              		.cfi_startproc
 20285              		@ args = 0, pretend = 0, frame = 24
 20286              		@ frame_needed = 1, uses_anonymous_args = 0
 20287              		@ link register save eliminated.
 20288 0000 80B4     		push	{r7}
 20289              	.LCFI101:
 20290              		.cfi_def_cfa_offset 4
 20291 0002 87B0     		sub	sp, sp, #28
 20292              	.LCFI102:
 20293              		.cfi_def_cfa_offset 32
 20294 0004 00AF     		add	r7, sp, #0
 20295              		.cfi_offset 7, -4
 20296              	.LCFI103:
 20297              		.cfi_def_cfa_register 7
 20298 0006 7860     		str	r0, [r7, #4]
 20299 0008 0B46     		mov	r3, r1
 20300 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1249:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ITStatus bitstatus = RESET;
 20301              		.loc 1 1249 0
 20302 000c 4FF00003 		mov	r3, #0
 20303 0010 FB75     		strb	r3, [r7, #23]
1250:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 20304              		.loc 1 1250 0
 20305 0012 4FF00003 		mov	r3, #0
 20306 0016 3B61     		str	r3, [r7, #16]
 20307 0018 4FF00003 		mov	r3, #0
 20308 001c FB60     		str	r3, [r7, #12]
1251:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1253:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_IT(ADC_IT));
1254:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1255:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = ADC_IT >> 8;
 20309              		.loc 1 1255 0
 20310 001e 7B88     		ldrh	r3, [r7, #2]
 20311 0020 4FEA1323 		lsr	r3, r3, #8
 20312 0024 9BB2     		uxth	r3, r3
 20313 0026 3B61     		str	r3, [r7, #16]
1256:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC_IT enable bit status */
1257:../StdPeripheralDriver/src/stm32f10x_adc.c ****   enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 20314              		.loc 1 1257 0
 20315 0028 7B68     		ldr	r3, [r7, #4]
 20316 002a 5A68     		ldr	r2, [r3, #4]
 20317 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 20318 002e DBB2     		uxtb	r3, r3
 20319 0030 02EA0303 		and	r3, r2, r3
 20320 0034 FB60     		str	r3, [r7, #12]
1258:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC interrupt */
1259:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 20321              		.loc 1 1259 0
 20322 0036 7B68     		ldr	r3, [r7, #4]
 20323 0038 1A68     		ldr	r2, [r3, #0]
 20324 003a 3B69     		ldr	r3, [r7, #16]
 20325 003c 02EA0303 		and	r3, r2, r3
 20326 0040 002B     		cmp	r3, #0
 20327 0042 06D0     		beq	.L86
 20328              		.loc 1 1259 0 is_stmt 0 discriminator 1
 20329 0044 FB68     		ldr	r3, [r7, #12]
 20330 0046 002B     		cmp	r3, #0
 20331 0048 03D0     		beq	.L86
1260:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1261:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_IT is set */
1262:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 20332              		.loc 1 1262 0 is_stmt 1
 20333 004a 4FF00103 		mov	r3, #1
 20334 004e FB75     		strb	r3, [r7, #23]
 20335 0050 02E0     		b	.L87
 20336              	.L86:
1263:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1264:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1265:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1266:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_IT is reset */
1267:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 20337              		.loc 1 1267 0
 20338 0052 4FF00003 		mov	r3, #0
 20339 0056 FB75     		strb	r3, [r7, #23]
 20340              	.L87:
1268:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1269:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the ADC_IT status */
1270:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 20341              		.loc 1 1270 0
 20342 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1271:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20343              		.loc 1 1271 0
 20344 005a 1846     		mov	r0, r3
 20345 005c 07F11C07 		add	r7, r7, #28
 20346 0060 BD46     		mov	sp, r7
 20347 0062 80BC     		pop	{r7}
 20348 0064 7047     		bx	lr
 20349              		.cfi_endproc
 20350              	.LFE63:
 20352 0066 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 20353              		.align	2
 20354              		.global	ADC_ClearITPendingBit
 20355              		.thumb
 20356              		.thumb_func
 20358              	ADC_ClearITPendingBit:
 20359              	.LFB64:
1272:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1273:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1274:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1275:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1276:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1277:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1278:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1279:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1280:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1281:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1282:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1283:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1284:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20360              		.loc 1 1284 0
 20361              		.cfi_startproc
 20362              		@ args = 0, pretend = 0, frame = 16
 20363              		@ frame_needed = 1, uses_anonymous_args = 0
 20364              		@ link register save eliminated.
 20365 0000 80B4     		push	{r7}
 20366              	.LCFI104:
 20367              		.cfi_def_cfa_offset 4
 20368 0002 85B0     		sub	sp, sp, #20
 20369              	.LCFI105:
 20370              		.cfi_def_cfa_offset 24
 20371 0004 00AF     		add	r7, sp, #0
 20372              		.cfi_offset 7, -4
 20373              	.LCFI106:
 20374              		.cfi_def_cfa_register 7
 20375 0006 7860     		str	r0, [r7, #4]
 20376 0008 0B46     		mov	r3, r1
 20377 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1285:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 20378              		.loc 1 1285 0
 20379 000c 4FF00003 		mov	r3, #0
 20380 0010 FB73     		strb	r3, [r7, #15]
1286:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1287:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1288:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1289:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1290:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 20381              		.loc 1 1290 0
 20382 0012 7B88     		ldrh	r3, [r7, #2]
 20383 0014 4FEA1323 		lsr	r3, r3, #8
 20384 0018 9BB2     		uxth	r3, r3
 20385 001a FB73     		strb	r3, [r7, #15]
1291:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1292:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 20386              		.loc 1 1292 0
 20387 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 20388 001e 6FEA0302 		mvn	r2, r3
 20389 0022 7B68     		ldr	r3, [r7, #4]
 20390 0024 1A60     		str	r2, [r3, #0]
1293:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20391              		.loc 1 1293 0
 20392 0026 07F11407 		add	r7, r7, #20
 20393 002a BD46     		mov	sp, r7
 20394 002c 80BC     		pop	{r7}
 20395 002e 7047     		bx	lr
 20396              		.cfi_endproc
 20397              	.LFE64:
 20399              		.text
 20400              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_adc.c
     /tmp/ccdc7ybG.s:18114  .text.ADC_DeInit:00000000 $t
     /tmp/ccdc7ybG.s:18119  .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/ccdc7ybG.s:18188  .text.ADC_DeInit:00000074 $d
     /tmp/ccdc7ybG.s:18195  .text.ADC_Init:00000000 $t
     /tmp/ccdc7ybG.s:18200  .text.ADC_Init:00000000 ADC_Init
     /tmp/ccdc7ybG.s:18310  .text.ADC_Init:000000b8 $d
     /tmp/ccdc7ybG.s:18315  .text.ADC_StructInit:00000000 $t
     /tmp/ccdc7ybG.s:18320  .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/ccdc7ybG.s:18371  .text.ADC_Cmd:00000000 $t
     /tmp/ccdc7ybG.s:18376  .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/ccdc7ybG.s:18424  .text.ADC_DMACmd:00000000 $t
     /tmp/ccdc7ybG.s:18429  .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/ccdc7ybG.s:18477  .text.ADC_ITConfig:00000000 $t
     /tmp/ccdc7ybG.s:18482  .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/ccdc7ybG.s:18541  .text.ADC_ResetCalibration:00000000 $t
     /tmp/ccdc7ybG.s:18546  .text.ADC_ResetCalibration:00000000 ADC_ResetCalibration
     /tmp/ccdc7ybG.s:18579  .text.ADC_GetResetCalibrationStatus:00000000 $t
     /tmp/ccdc7ybG.s:18584  .text.ADC_GetResetCalibrationStatus:00000000 ADC_GetResetCalibrationStatus
     /tmp/ccdc7ybG.s:18632  .text.ADC_StartCalibration:00000000 $t
     /tmp/ccdc7ybG.s:18637  .text.ADC_StartCalibration:00000000 ADC_StartCalibration
     /tmp/ccdc7ybG.s:18670  .text.ADC_GetCalibrationStatus:00000000 $t
     /tmp/ccdc7ybG.s:18675  .text.ADC_GetCalibrationStatus:00000000 ADC_GetCalibrationStatus
     /tmp/ccdc7ybG.s:18723  .text.ADC_SoftwareStartConvCmd:00000000 $t
     /tmp/ccdc7ybG.s:18728  .text.ADC_SoftwareStartConvCmd:00000000 ADC_SoftwareStartConvCmd
     /tmp/ccdc7ybG.s:18776  .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/ccdc7ybG.s:18781  .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccdc7ybG.s:18829  .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/ccdc7ybG.s:18834  .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/ccdc7ybG.s:18891  .text.ADC_DiscModeCmd:00000000 $t
     /tmp/ccdc7ybG.s:18896  .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/ccdc7ybG.s:18944  .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/ccdc7ybG.s:18949  .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/ccdc7ybG.s:19187  .text.ADC_ExternalTrigConvCmd:00000000 $t
     /tmp/ccdc7ybG.s:19192  .text.ADC_ExternalTrigConvCmd:00000000 ADC_ExternalTrigConvCmd
     /tmp/ccdc7ybG.s:19240  .text.ADC_GetConversionValue:00000000 $t
     /tmp/ccdc7ybG.s:19245  .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/ccdc7ybG.s:19277  .text.ADC_GetDualModeConversionValue:00000000 $t
     /tmp/ccdc7ybG.s:19282  .text.ADC_GetDualModeConversionValue:00000000 ADC_GetDualModeConversionValue
     /tmp/ccdc7ybG.s:19307  .text.ADC_GetDualModeConversionValue:00000010 $d
     /tmp/ccdc7ybG.s:19312  .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/ccdc7ybG.s:19317  .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/ccdc7ybG.s:19365  .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/ccdc7ybG.s:19370  .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/ccdc7ybG.s:19418  .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/ccdc7ybG.s:19423  .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccdc7ybG.s:19471  .text.ADC_ExternalTrigInjectedConvCmd:00000000 $t
     /tmp/ccdc7ybG.s:19476  .text.ADC_ExternalTrigInjectedConvCmd:00000000 ADC_ExternalTrigInjectedConvCmd
     /tmp/ccdc7ybG.s:19524  .text.ADC_SoftwareStartInjectedConvCmd:00000000 $t
     /tmp/ccdc7ybG.s:19529  .text.ADC_SoftwareStartInjectedConvCmd:00000000 ADC_SoftwareStartInjectedConvCmd
     /tmp/ccdc7ybG.s:19577  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/ccdc7ybG.s:19582  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccdc7ybG.s:19630  .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/ccdc7ybG.s:19635  .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/ccdc7ybG.s:19809  .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/ccdc7ybG.s:19814  .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccdc7ybG.s:19871  .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/ccdc7ybG.s:19876  .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/ccdc7ybG.s:19922  .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/ccdc7ybG.s:19927  .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/ccdc7ybG.s:19973  .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/ccdc7ybG.s:19978  .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/ccdc7ybG.s:20027  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/ccdc7ybG.s:20032  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccdc7ybG.s:20071  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/ccdc7ybG.s:20076  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccdc7ybG.s:20125  .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/ccdc7ybG.s:20130  .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/ccdc7ybG.s:20176  .text.ADC_TempSensorVrefintCmd:00000034 $d
     /tmp/ccdc7ybG.s:20181  .text.ADC_GetFlagStatus:00000000 $t
     /tmp/ccdc7ybG.s:20186  .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/ccdc7ybG.s:20237  .text.ADC_ClearFlag:00000000 $t
     /tmp/ccdc7ybG.s:20242  .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/ccdc7ybG.s:20276  .text.ADC_GetITStatus:00000000 $t
     /tmp/ccdc7ybG.s:20281  .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/ccdc7ybG.s:20353  .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/ccdc7ybG.s:20358  .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
